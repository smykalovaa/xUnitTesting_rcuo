&НаКлиентеПерем КэшПостроительДереваТестов;&НаКлиентеПерем ЗагружаемыйПуть;&НаКлиентеПерем КонтейнерТестов;&НаКлиентеПерем ТекущаяГруппа;// { Plugin interface&НаКлиентеФункция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);КонецФункции&НаКлиентеПроцедура Инициализация(КонтекстЯдраПараметр) ЭкспортКонецПроцедуры&НаСервереФункция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);КонецФункции// } Plugin interface// { Loader interface&НаКлиентеФункция ВыбратьПутьИнтерактивно(ТекущийПуть = "") Экспорт	ДиалогВыбораТеста = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);	ДиалогВыбораТеста.Фильтр = "Обработка-тест (*.epf)|*.epf|Все файлы|*";	ДиалогВыбораТеста.МножественныйВыбор = Истина;	ДиалогВыбораТеста.ПроверятьСуществованиеФайла = Истина;	ДиалогВыбораТеста.ПолноеИмяФайла = ТекущийПуть;		Результат = Новый ТекстовыйДокумент;	Если ДиалогВыбораТеста.Выбрать() Тогда		Для каждого ПолноеИмяФайла Из ДиалогВыбораТеста.ВыбранныеФайлы Цикл			Результат.ДобавитьСтроку(ПолноеИмяФайла);		КонецЦикла;			КонецЕсли;	Текст = Результат.ПолучитьТекст();		Возврат Лев(Текст, СтрДлина(Текст) - 1);КонецФункции&НаКлиентеФункция Загрузить(КонтекстЯдра, Путь) Экспорт	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");	ДеревоТестов = Неопределено;	Для Сч = 1 По СтрЧислоСтрок(Путь) Цикл		ФайлОбработки = Новый Файл(СтрПолучитьСтроку(Путь, Сч));		ПроверитьКорректностьФайла(ФайлОбработки);				Если ДеревоТестов = Неопределено Тогда			ДеревоТестов = ПостроительДереваТестов.СоздатьКонтейнер(ФайлОбработки.Путь);		КонецЕсли;				КонтекстЯдра.ПодключитьВнешнююОбработку(ФайлОбработки);				КонтейнерССервернымиТестамиОбработки = ЗагрузитьФайлНаСервере(ФайлОбработки.ПолноеИмя);		КонтейнерСКлиентскимиТестамиОбработки = ЗагрузитьФайлНаКлиенте(ПостроительДереваТестов, ФайлОбработки);		Если КонтейнерСКлиентскимиТестамиОбработки.Строки.Количество() > 0 Тогда			КонтейнерССервернымиТестамиОбработки.Строки.Добавить(КонтейнерСКлиентскимиТестамиОбработки);		КонецЕсли;		Если КонтейнерССервернымиТестамиОбработки.Строки.Количество() > 0 Тогда			ДеревоТестов.Строки.Добавить(КонтейнерССервернымиТестамиОбработки);		КонецЕсли;	КонецЦикла;		Возврат ДеревоТестов;КонецФункции&НаКлиентеФункция ПолучитьКонтекстПоПути(КонтекстЯдра, Путь) Экспорт	Перем Контекст;	Если ЭтоПутьККлиентскомуКонтексту(Путь) Тогда		Контекст = ПолучитьКлиентскийКонтекст(КонтекстЯдра, Путь);	Иначе		Контекст = ПолучитьСерверныйКонтекст(КонтекстЯдра, Путь);	КонецЕсли;		Возврат Контекст;КонецФункции// } Loader interface&НаКлиентеФункция ПолучитьКлиентскийКонтекст(КонтекстЯдра, Путь)	ПрефиксПутейСФормами = ПрефиксПутейСФормами();	ФайлОбработки = Новый Файл(Сред(Путь, СтрДлина(ПрефиксПутейСФормами) + 1));	ПроверитьКорректностьФайла(ФайлОбработки);	КонтекстЯдра.ПодключитьВнешнююОбработку(ФайлОбработки);	Контекст = ПолучитьФорму("ВнешняяОбработка." + ФайлОбработки.ИмяБезРасширения + ".Форма", , ЭтаФорма, Новый УникальныйИдентификатор);		Возврат Контекст;КонецФункции&НаКлиентеФункция ПолучитьСерверныйКонтекст(КонтекстЯдра, Путь)	ФайлОбработки = Новый Файл(Путь);	ПроверитьКорректностьФайла(ФайлОбработки);	КонтекстЯдра.ПодключитьВнешнююОбработку(ФайлОбработки);	Контекст = КонтекстЯдра.ПолучитьОписаниеКонтекстаВыполнения(ФайлОбработки.ИмяБезРасширения);		Возврат Контекст;КонецФункции&НаКлиентеПроцедура ПроверитьКорректностьФайла(Файл)	Если Не Файл.Существует() Тогда		ВызватьИсключение "Переданный файл не существует файл <" + Файл.ПолноеИмя + ">";	КонецЕсли;	Если Файл.ЭтоКаталог() Тогда		ВызватьИсключение "Передан каталог вместо файла <" + Файл.ПолноеИмя + ">";	КонецЕсли;КонецПроцедуры&НаСервереФункция ЗагрузитьФайлНаСервере(ПолныйПутьКОбработкеНаКлиенте)	ПостроительДереваТестов = ВнешниеОбработки.Создать("ПостроительДереваТестов", Ложь);	ФайлОбработки = Новый Файл(ПолныйПутьКОбработкеНаКлиенте);	Контейнер = ЭтотОбъектНаСервере().ЗагрузитьФайл(ПостроительДереваТестов, ФайлОбработки);		Возврат Контейнер;КонецФункции&НаКлиентеФункция ЗагрузитьФайлНаКлиенте(ПостроительДереваТестов, ФайлОбработки)	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ФайлОбработки.ИмяБезРасширения + ".Форма");	Попытка		Контейнер = ЗагрузитьТестыВНовомФормате_НаКлиенте(ПостроительДереваТестов, ФормаОбработки, ФайлОбработки);	Исключение		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		Если ЭтоНовыйФорматОбработки(ТекстОшибки) Тогда			ВызватьИсключение;		Иначе			Контейнер = ЗагрузитьТестыВСтаромФормате_НаКлиенте(ПостроительДереваТестов, ФормаОбработки, ФайлОбработки);		КонецЕсли;	КонецПопытки;		Возврат Контейнер;КонецФункции&НаКлиентеФункция ЗагрузитьТестыВНовомФормате_НаКлиенте(ПостроительДереваТестов, ФормаОбработки, ФайлОбработки)	ЗагружаемыйПуть = ФайлОбработки.ПолноеИмя;	КэшПостроительДереваТестов = ПостроительДереваТестов;	КонтейнерТестов = ПостроительДереваТестов.СоздатьКонтейнер(ПрефиксПутейСФормами() + ФайлОбработки.ИмяБезРасширения, ПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.Форма);	ФормаОбработки.ЗаполнитьНаборТестов(ЭтаФорма);	Результат = КонтейнерТестов;	КонтейнерТестов = Неопределено;	ТекущаяГруппа = Неопределено;		Возврат Результат;КонецФункции&НаКлиентеФункция ЭтоНовыйФорматОбработки(Знач ТекстОшибки)	ЭтоНовыйФорматОбработки = Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, "ЗаполнитьНаборТестов");		Возврат ЭтоНовыйФорматОбработки;КонецФункции&НаКлиентеФункция ЗагрузитьТестыВСтаромФормате_НаКлиенте(ПостроительДереваТестов, ФормаОбработки, ФайлОбработки)	Попытка		СписокТестов = ФормаОбработки.ПолучитьСписокТестов();	Исключение		Описание = ОписаниеОшибки();		Если Найти(Описание, "Недостаточно фактических параметров") > 0 Тогда			ВызватьИсключение "Старый формат тестов в обработке тестов <"+ФайлОбработки.ПолноеИмя+">."+Символы.ПС+				"Метод ПолучитьСписокТестов сейчас не принимает параметров";		КонецЕсли;				Если Найти(Описание, "Метод объекта не обнаружен (ПолучитьСписокТестов)") = 0 Тогда			ВызватьИсключение Описание;		КонецЕсли;	КонецПопытки;	СлучайныйПорядокВыполнения = Истина;	Попытка		СлучайныйПорядокВыполнения = ФормаОбработки.РазрешенСлучайныйПорядокВыполненияТестов();	Исключение	КонецПопытки;		Контейнер = ПолучитьКонтейнерДереваТестовПоСпискуТестовНаСервере(СписокТестов, ПрефиксПутейСФормами() + ФайлОбработки.ИмяБезРасширения, ПрефиксПутейСФормами() + ФайлОбработки.ПолноеИмя, СлучайныйПорядокВыполнения);	Контейнер.ИконкаУзла = ПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.Форма;		Возврат Контейнер;КонецФункции&НаСервереФункция ПолучитьКонтейнерДереваТестовПоСпискуТестовНаСервере(СписокТестов, ИмяКонтейнера, Путь, СлучайныйПорядокВыполнения = Истина)	ПостроительДереваТестов = ВнешниеОбработки.Создать("ПостроительДереваТестов", Ложь);	Контейнер = ЭтотОбъектНаСервере().ПолучитьКонтейнерДереваТестовПоСпискуТестов(ПостроительДереваТестов, СписокТестов, ИмяКонтейнера, Путь, СлучайныйПорядокВыполнения);		Возврат Контейнер;КонецФункции&НаКлиентеФункция ЭтоПутьККлиентскомуКонтексту(Путь)	ПрефиксПутейСФормами = ПрефиксПутейСФормами();	Результат = (Найти(Путь, ПрефиксПутейСФормами) = 1);		Возврат Результат;КонецФункции&НаКлиентеФункция ПрефиксПутейСФормами()	Возврат "УпрФорма # ";КонецФункции// { API нового формата&НаКлиентеПроцедура СлучайныйПорядокВыполнения() Экспорт	Если ЗначениеЗаполнено(КонтейнерТестов) Тогда		КонтейнерТестов.СлучайныйПорядокВыполнения = Истина;	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура СтрогийПорядокВыполнения() Экспорт	Если ЗначениеЗаполнено(КонтейнерТестов) Тогда		КонтейнерТестов.СлучайныйПорядокВыполнения = Ложь;	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура НачатьГруппу(Знач ИмяГруппы, Знач СтрогийПорядокВыполнения = Ложь) Экспорт	ТекущаяГруппа = КэшПостроительДереваТестов.СоздатьКонтейнер(ИмяГруппы, КэшПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.Группа);	ТекущаяГруппа.СлучайныйПорядокВыполнения = Не СтрогийПорядокВыполнения;	КонтейнерТестов.Строки.Добавить(ТекущаяГруппа);КонецПроцедуры&НаКлиентеФункция Добавить(Знач ИмяМетода, Знач Параметры = Неопределено, Знач Представление = "") Экспорт	Элемент = КэшПостроительДереваТестов.СоздатьЭлемент(ПрефиксПутейСФормами() + ЗагружаемыйПуть, ИмяМетода, Представление);	Если ЗначениеЗаполнено(Параметры) И ТипЗнч(Параметры) = Тип("Массив") Тогда		Элемент.Параметры = Параметры;	КонецЕсли;	Если ЗначениеЗаполнено(ТекущаяГруппа) Тогда		ТекущаяГруппа.Строки.Добавить(Элемент);	Иначе		КонтейнерТестов.Строки.Добавить(Элемент);	КонецЕсли;		Возврат Элемент;КонецФункции&НаКлиентеФункция ПараметрыТеста(Знач Парам1, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено, Знач Парам6 = Неопределено, Знач Парам7 = Неопределено, Знач Парам8 = Неопределено, Знач Парам9 = Неопределено) Экспорт	ВсеПараметры = Новый Массив;	ВсеПараметры.Добавить(Парам1);	ВсеПараметры.Добавить(Парам2);	ВсеПараметры.Добавить(Парам3);	ВсеПараметры.Добавить(Парам4);	ВсеПараметры.Добавить(Парам5);	ВсеПараметры.Добавить(Парам6);	ВсеПараметры.Добавить(Парам7);	ВсеПараметры.Добавить(Парам8);	ВсеПараметры.Добавить(Парам9);		ИндексСПоследнимПараметром = 0;	Для Сч = 0 По ВсеПараметры.ВГраница() Цикл		Индекс = ВсеПараметры.ВГраница() - Сч;		Если ВсеПараметры[Индекс] <> Неопределено Тогда			ИндексСПоследнимПараметром = Индекс;			Прервать;		КонецЕсли;	КонецЦикла;		ПараметрыТеста = Новый Массив;	Для Сч = 0 По ИндексСПоследнимПараметром Цикл		ПараметрыТеста.Добавить(ВсеПараметры[Сч]);	КонецЦикла;		Возврат ПараметрыТеста;КонецФункции// } API нового формата// { Helpers&НаСервереФункция ЭтотОбъектНаСервере()	Возврат РеквизитФормыВЗначение("Объект");КонецФункции&НаКлиентеФункция ЕстьОшибка_МетодОбъектаНеОбнаружен(Знач ТекстОшибки, Знач ИмяМетода)	Результат = Ложь;	Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0 		ИЛИ Найти(текстОшибки, "Object method not found (" + ИмяМетода + ")") > 0  Тогда		Результат = Истина;	КонецЕсли;		Возврат Результат;КонецФункции// } Helpers