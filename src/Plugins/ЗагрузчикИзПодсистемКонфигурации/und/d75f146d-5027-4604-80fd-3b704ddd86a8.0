{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем ПостроительДереваТестов;
&НаКлиенте
Перем ЗагружаемыйПуть;

&НаКлиенте
Перем КонтейнерТестов;
&НаКлиенте
Перем ТекущаяГруппа;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции
// } Plugin interface

// { Loader interface
&НаКлиенте
Функция ВыбратьПутьИнтерактивно(ТекущийПуть = """") Экспорт
	Перем ВыбранныйПуть;
	
	ПараметрыОткрытия = Новый Структура(""ОтборПоИмениТеста"", """");
	ИмяФормыВыбораПодсистемыУФ = СтрЗаменить(ЭтаФорма.ИмяФормы, ""УправляемаяФорма"", ""ФормаВыбораПодсистемУФ"");
	ВыбранныйПуть = ОткрытьФормуМодально(ИмяФормыВыбораПодсистемыУФ, ПараметрыОткрытия, ЭтаФорма);
	
	Возврат ВыбранныйПуть;
КонецФункции

&НаКлиенте
Функция Загрузить(КонтекстЯдра, Путь) Экспорт
	СтруктураМетаданных = СтруктураМетаданныхПоПереданномуПути(Путь);
	ПостроительДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"");
	ДеревоТестов = Неопределено;
	ОбработатьОбъектМетаданных(СтруктураМетаданных, ДеревоТестов);
	Возврат ДеревоТестов;
КонецФункции

&НаКлиенте
Функция ПолучитьКонтекстПоПути(КонтекстЯдра, Путь) Экспорт
	Перем Контекст;
	Если ЭтоПутьККлиентскомуКонтексту(Путь) Тогда
		Контекст = ПолучитьКлиентскийКонтекст(КонтекстЯдра, Путь);
	Иначе
		Контекст = ПолучитьСерверныйКонтекст(КонтекстЯдра, Путь);
	КонецЕсли;
	
	Возврат Контекст;
КонецФункции
// } Loader interface

&НаКлиенте
Функция ПолучитьКлиентскийКонтекст(КонтекстЯдра, Путь)
	ИдентификаторКонтекста = ПолучитьИдентификаторКонтекстаПоПутиНаСервере(Сред(Путь, СтрДлина(ПрефиксПутейСФормами()) + 1));
	ОписаниеКонтекста = ПолучитьФорму(""Обработка."" + ИдентификаторКонтекста + "".Форма"", , ЭтаФорма, Новый УникальныйИдентификатор);
	КонтекстЯдра.ПолучитьОписаниеКонтекстаВыполнения(ИдентификаторКонтекста, Истина);
	
	Возврат ОписаниеКонтекста;
КонецФункции

&НаКлиенте
Функция ПолучитьСерверныйКонтекст(КонтекстЯдра, Путь)
	ИдентификаторКонтекста = ПолучитьИдентификаторКонтекстаПоПутиНаСервере(Путь);
	ОписаниеКонтекста = КонтекстЯдра.ПолучитьОписаниеКонтекстаВыполнения(ИдентификаторКонтекста, Истина);
	
	Возврат ОписаниеКонтекста;
КонецФункции

&НаСервере
Функция СтруктураМетаданныхПоПереданномуПути(Путь)
	ОбъектМетаданных = ЭтотОбъектНаСервере().ПолучитьОбъектМетаданныхПоПути(Путь);
	Если ЭтоПодсистема(ОбъектМетаданных.ПолноеИмя()) Тогда
		СтруктураМетаданных = СтруктураМетаданныхПодсистемы(ОбъектМетаданных);
	Иначе
		СтруктураМетаданных = СтрокаДереваМетаданных(ОбъектМетаданных);
	КонецЕсли;
	Возврат СтруктураМетаданных;
КонецФункции

&НаСервере
Функция СтруктураМетаданныхПодсистемы(Подсистема)
	СтруктураМетаданных = СтрокаДереваМетаданных(Подсистема);
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		СтруктураМетаданных.Строки.Добавить(СтруктураМетаданныхПодсистемы(ПодчиненнаяПодсистема));
	КонецЦикла;
	
	Для Каждого ДочернееМетаданное Из Подсистема.Состав цикл
		Если Метаданные.Обработки.Найти(ДочернееМетаданное.Имя) <> Неопределено Тогда
			СтруктураМетаданныхОбработки = СтрокаДереваМетаданных(ДочернееМетаданное);
			СтруктураМетаданных.Строки.Добавить(СтруктураМетаданныхОбработки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураМетаданных;
КонецФункции

&НаСервере
Функция СтрокаДереваМетаданных(ОбъектМетаданных)
	СтрокаДерева = Новый Структура();
	СтрокаДерева.Вставить(""Имя"", ОбъектМетаданных.Имя);
	СтрокаДерева.Вставить(""ПолноеИмя"", ОбъектМетаданных.ПолноеИмя());
	СтрокаДерева.Вставить(""Строки"", Новый Массив);
	
	Возврат СтрокаДерева;
КонецФункции

&НаКлиенте
Функция ОбработатьОбъектМетаданных(СтруктураМетаданных, ДеревоТестов)
	Если ЭтоПодсистема(СтруктураМетаданных.ПолноеИмя) Тогда
		Контейнер = ЗагрузитьПодсистему(СтруктураМетаданных, ДеревоТестов);
	Иначе
		Контейнер = ЗагрузитьОбработку(СтруктураМетаданных, ДеревоТестов);
	КонецЕсли;
	
	Возврат Контейнер;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПодсистема(ПолноеИмяОбъектаМетаданных)
	Возврат (Найти(НРег(ПолноеИмяОбъектаМетаданных), НРег(""Подсистема"")) > 0);
КонецФункции

&НаКлиенте
Функция ЗагрузитьПодсистему(СтруктураМетаданных, ДеревоТестов)

	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(СтруктураМетаданных.Имя, ПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.Подсистема);
	Для Каждого ПодчиненноеМетаданное Из СтруктураМетаданных.Строки Цикл
		Если ЭтоПодсистема(ПодчиненноеМетаданное.ПолноеИмя) Тогда
			ЗагрузитьПодсистему(ПодчиненноеМетаданное, Контейнер);
		Иначе
			ЗагрузитьОбработку(ПодчиненноеМетаданное, Контейнер);
		КонецЕсли;
	КонецЦикла;
	
	Если ДеревоТестов = Неопределено Тогда
		ДеревоТестов = Контейнер;
	ИначеЕсли Контейнер.Строки.Количество() > 0 Тогда
		ДеревоТестов.Строки.Добавить(Контейнер);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьОбработку(СтруктураМетаданных, ДеревоТестов)
	ЗагружаемыйПуть = СтрЗаменить(""Метаданные."" + СтруктураМетаданных.ПолноеИмя, "".Обработка."", "".Обработки."");
	Контейнер = ЗагрузитьОбработкуНаСервере(ЗагружаемыйПуть);
	КонтейнерСКлиентскимиТестамиОбработки = ЗагрузитьОбработкуНаКлиенте(СтруктураМетаданных);
	Если КонтейнерСКлиентскимиТестамиОбработки.Строки.Количество() > 0 Тогда
		Контейнер.Строки.Добавить(КонтейнерСКлиентскимиТестамиОбработки);
	КонецЕсли;
	Если ДеревоТестов = Неопределено Тогда
		ДеревоТестов = Контейнер;
	ИначеЕсли Контейнер.Строки.Количество() > 0 Тогда
		ДеревоТестов.Строки.Добавить(Контейнер);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗагрузитьОбработкуНаСервере(Путь)
	ПостроительДереваТестов = ВнешниеОбработки.Создать(""ПостроительДереваТестов"");
	ЗагрузчикФайла = ВнешниеОбработки.Создать(""ЗагрузчикФайла"");
	ДеревоТестов = ЭтотОбъектНаСервере().ЗагрузитьПуть(Путь, ПостроительДереваТестов, ЗагрузчикФайла);
	
	Возврат ДеревоТестов;
КонецФункции

&НаКлиенте
Функция ЗагрузитьОбработкуНаКлиенте(СтруктураМетаданных)
	ФормаОбработки = ПолучитьФорму(СтруктураМетаданных.ПолноеИмя + "".Форма"");
	Попытка
		Контейнер = ЗагрузитьТестыВНовомФормате_НаКлиенте(ФормаОбработки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ЭтоНовыйФорматОбработки(ТекстОшибки) Тогда
			ВызватьИсключение;
		Иначе
			Контейнер = ЗагрузитьТестыВСтаромФормате_НаКлиенте(ФормаОбработки);
		КонецЕсли;
	КонецПопытки;
	Возврат Контейнер;
КонецФункции

&НаКлиенте
Функция ЭтоНовыйФорматОбработки(Знач ТекстОшибки)
	ЭтоНовыйФорматОбработки = Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ""ЗаполнитьНаборТестов"");
	
	Возврат ЭтоНовыйФорматОбработки;
КонецФункции

&НаКлиенте
Функция ЗагрузитьТестыВНовомФормате_НаКлиенте(ФормаОбработки)
	КонтейнерТестов = ПостроительДереваТестов.СоздатьКонтейнер(ПрефиксПутейСФормами() + СтрЗаменить(ЗагружаемыйПуть, ""Метаданные.Обработки."", """"), ПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.Форма);
	ФормаОбработки.ЗаполнитьНаборТестов(ЭтаФорма);
	Результат = КонтейнерТестов;
	КонтейнерТестов = Неопределено;
	ТекущаяГруппа = Неопределено;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЗагрузитьТестыВСтаромФормате_НаКлиенте(ФормаОбработки)
	Попытка
		СписокТестов = ФормаОбработки.ПолучитьСписокТестов();
	Исключение
		Описание = ОписаниеОшибки();
		Если Найти(Описание, ""Недостаточно фактических параметров"") > 0 Тогда
			ВызватьИсключение ""Старый формат тестов в обработке тестов <""+ЗагружаемыйПуть+"">.""+Символы.ПС+
				""Метод ПолучитьСписокТестов сейчас не принимает параметров"";
		КонецЕсли;
		
		Если Найти(Описание, ""Метод объекта не обнаружен (ПолучитьСписокТестов)"") = 0 Тогда
			ВызватьИсключение Описание;
		КонецЕсли;
	КонецПопытки;
	СлучайныйПорядокВыполнения = Истина;
	Попытка
		СлучайныйПорядокВыполнения = ФормаОбработки.РазрешенСлучайныйПорядокВыполненияТестов();
	Исключение
	КонецПопытки;
	
	Контейнер = ПолучитьКонтейнерДереваТестовПоСпискуТестовНаСервере(СписокТестов, ПрефиксПутейСФормами() + СтрЗаменить(ЗагружаемыйПуть, ""Обработка."", """"), ПрефиксПутейСФормами() + ЗагружаемыйПуть, СлучайныйПорядокВыполнения);
	Контейнер.ИконкаУзла = ПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.Форма;
	
	Возврат Контейнер;
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторКонтекстаПоПутиНаСервере(Путь)
	ОбъектМетаданных = ЭтотОбъектНаСервере().ПолучитьОбъектМетаданныхПоПути(Путь);
	
	Возврат ОбъектМетаданных.Имя;
КонецФункции

&НаСервере
Функция ПолучитьКонтейнерДереваТестовПоСпискуТестовНаСервере(СписокТестов, ИмяКонтейнера, Путь, СлучайныйПорядокВыполнения = Истина)
	ПостроительДереваТестов = ВнешниеОбработки.Создать(""ПостроительДереваТестов"", Ложь);
	ЗагрузчикФайла = ВнешниеОбработки.Создать(""ЗагрузчикФайла"", Ложь);
	Контейнер = ЭтотОбъектНаСервере().ПолучитьКонтейнерДереваТестовПоСпискуТестов(ПостроительДереваТестов, ЗагрузчикФайла, СписокТестов, ИмяКонтейнера, Путь, СлучайныйПорядокВыполнения);
	
	Возврат Контейнер;
КонецФункции

&НаКлиенте
Функция ЭтоПутьККлиентскомуКонтексту(Путь)
	ПрефиксПутейСФормами = ПрефиксПутейСФормами();
	Результат = (Найти(Путь, ПрефиксПутейСФормами) = 1);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПрефиксПутейСФормами()
	Возврат ""УпрФорма # "";
КонецФункции

// { API нового формата
&НаКлиенте
Процедура СлучайныйПорядокВыполнения() Экспорт
	Если ЗначениеЗаполнено(КонтейнерТестов) Тогда
		КонтейнерТестов.СлучайныйПорядокВыполнения = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрогийПорядокВыполнения() Экспорт
	Если ЗначениеЗаполнено(КонтейнерТестов) Тогда
		КонтейнерТестов.СлучайныйПорядокВыполнения = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьГруппу(Знач ИмяГруппы, Знач СтрогийПорядокВыполнения = Ложь) Экспорт
	ТекущаяГруппа = ПостроительДереваТестов.СоздатьКонтейнер(ИмяГруппы, ПостроительДереваТестов.Объект.ИконкиУзловДереваТестов.Группа);
	ТекущаяГруппа.СлучайныйПорядокВыполнения = Не СтрогийПорядокВыполнения;
	КонтейнерТестов.Строки.Добавить(ТекущаяГруппа);
КонецПроцедуры

&НаКлиенте
Функция Добавить(Знач ИмяМетода, Знач Параметры = Неопределено, Знач Представление = """") Экспорт
	Элемент = ПостроительДереваТестов.СоздатьЭлемент(ПрефиксПутейСФормами() + ЗагружаемыйПуть, ИмяМетода, Представление);
	Если ЗначениеЗаполнено(Параметры) И ТипЗнч(Параметры) = Тип(""Массив"") Тогда
		Элемент.Параметры = Параметры;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяГруппа) Тогда
		ТекущаяГруппа.Строки.Добавить(Элемент);
	Иначе
		КонтейнерТестов.Строки.Добавить(Элемент);
	КонецЕсли;
	
	Возврат Элемент;
КонецФункции

&НаКлиенте
Функция ПараметрыТеста(Знач Парам1, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено, Знач Парам6 = Неопределено, Знач Парам7 = Неопределено, Знач Парам8 = Неопределено, Знач Парам9 = Неопределено) Экспорт
	ВсеПараметры = Новый Массив;
	ВсеПараметры.Добавить(Парам1);
	ВсеПараметры.Добавить(Парам2);
	ВсеПараметры.Добавить(Парам3);
	ВсеПараметры.Добавить(Парам4);
	ВсеПараметры.Добавить(Парам5);
	ВсеПараметры.Добавить(Парам6);
	ВсеПараметры.Добавить(Парам7);
	ВсеПараметры.Добавить(Парам8);
	ВсеПараметры.Добавить(Парам9);
	
	ИндексСПоследнимПараметром = 0;
	Для Сч = 0 По ВсеПараметры.ВГраница() Цикл
		Индекс = ВсеПараметры.ВГраница() - Сч;
		Если ВсеПараметры[Индекс] <> Неопределено Тогда
			ИндексСПоследнимПараметром = Индекс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыТеста = Новый Массив;
	Для Сч = 0 По ИндексСПоследнимПараметром Цикл
		ПараметрыТеста.Добавить(ВсеПараметры[Сч]);
	КонецЦикла;
	
	Возврат ПараметрыТеста;
КонецФункции
// } API нового формата

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

&НаКлиенте
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(Знач ТекстОшибки, Знач ИмяМетода)
	Результат = Ложь;
	Если Найти(текстОшибки, ""Метод объекта не обнаружен ("" + ИмяМетода + "")"") > 0 
		Или Найти(текстОшибки, ""Object method not found ("" + ИмяМетода + "")"") > 0  Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
// } Helpers
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",5cce5f28-d8c9-48d6-9f87-928be46d5662}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}