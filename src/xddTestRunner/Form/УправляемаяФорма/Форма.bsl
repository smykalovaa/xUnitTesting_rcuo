&НаКлиентеПерем КэшФормПлагинов;&НаКлиентеПерем ПодключенныеВнешниеОбработки;// { События формы&НаСервереПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();	ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;		ОбновитьКомандыИсторииЗагрузкиТестов();КонецПроцедуры&НаКлиентеПроцедура ПриОткрытии()	ЗагрузитьПлагины();	КэшироватьПеречисленияПлагинов();	СброситьПодключенныеВнешниеОбработки();		ЭтоПакетныйЗапуск = ЗначениеЗаполнено(ПараметрЗапуска);	Если ЭтоПакетныйЗапуск Тогда		ВыполнитьПакетныйЗапуск(ПараметрЗапуска);	Иначе		ПерезагрузитьПоследниеТестыПоИстории();	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура ПриЗакрытии()	ПриЗакрытииНаСервере();КонецПроцедуры&НаСервереПроцедура ПриЗакрытииНаСервере()	ЭтотОбъектНаСервере().СохранитьНастройки();КонецПроцедуры&НаКлиентеПроцедура ОбработатьСобытиеВыполненияТестов(Знач ИмяСобытия, Знач Параметр) Экспорт     Если ИмяСобытия = Объект.ВозможныеСобытия.ВыполненТестовыйМетод Тогда		 Если Параметр.Состояние = Объект.СостоянияТестов.НеРеализован Тогда			 Если Элементы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда				 Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;			 КонецЕсли;		 ИначеЕсли Параметр.Состояние = Объект.СостоянияТестов.Сломан Тогда			 Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;		 КонецЕсли;		 ИндикаторВыполнения = ИндикаторВыполнения + 1;	 КонецЕсли;	 ОбновитьОтображениеДанных();КонецПроцедуры// } События формы// { Управляющие воздействия пользователя&НаКлиентеПроцедура ЗагрузитьТестыПоУмолчанию(Команда)	ЗагрузчикПоУмолчанию = ЗагрузчикПоУмолчанию();	ИдентификаторЗагрузчикаПоУмолчанию = ЗагрузчикПоУмолчанию.ОписаниеПлагина(Объект.ТипыПлагинов).Идентификатор;	Подключаемый_ИнтерактивныйВызовЗагрузчика(Новый Структура("Имя", ИдентификаторЗагрузчикаПоУмолчанию));КонецПроцедуры&НаКлиентеПроцедура КомандаВыполнитьВсеТесты(Команда)	ВыполнитьТестыНаКлиенте();КонецПроцедуры&НаКлиентеПроцедура ВыполнитьТестыНаКлиенте(Знач Фильтр = Неопределено)	Если ЗначениеЗаполнено(ЭтаФорма.ДеревоОтЗагрузчика) Тогда		ОчиститьСообщения();				КоличествоТестовыхМетодов = ПолучитьКоличествоТестовыхМетодов(ЭтаФорма.ДеревоОтЗагрузчика, Фильтр);		ИнициализироватьИндикаторВыполнения(КоличествоТестовыхМетодов);				СброситьПодключенныеВнешниеОбработки();		РезультатыТестирования = ВыполнитьТесты(Плагин(ИдентификаторЗагрузчика), ЭтаФорма.ДеревоОтЗагрузчика, Фильтр, ЭтаФорма);				ОбновитьДеревоТестовНаОснованииРезультатовТестирования(ДеревоТестов.ПолучитьЭлементы()[0], РезультатыТестирования);				ГенераторОтчетаMXL = Плагин("ГенераторОтчетаMXL");		Отчет = ГенераторОтчетаMXL.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);		ГенераторОтчетаMXL.Показать(Отчет);	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура КомандаВыполнитьВыделенныеТесты(Команда)	Фильтр = Новый Массив;	ВыделенныеСтроки = Элементы.ДеревоТестов.ВыделенныеСтроки;	Для каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл		ВыделеннаяСтрока = ДеревоТестов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);		Фильтр.Добавить(Новый УникальныйИдентификатор(ВыделеннаяСтрока.Ключ));	КонецЦикла;	Если Фильтр.Количество() > 0 Тогда		ВыполнитьТестыНаКлиенте(Фильтр);	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура КомандаПерезагрузитьФорму(Команда)	Закрыть();		АдресХранилища = "";	ПоместитьФайл(АдресХранилища, ЭтаФорма.ИспользуемоеИмяФайла, , Ложь);	ПодключитьФайлОбработкиНаСервере(АдресХранилища, Неопределено);		НоваяФорма = ПолучитьФорму(ЭтаФорма.ИмяФормы,,,Истина);	НоваяФорма.ИспользуемоеИмяФайла = ЭтаФорма.ИспользуемоеИмяФайла;	НоваяФорма.Открыть();КонецПроцедуры&НаКлиентеПроцедура ПерезагрузитьПоследниеТестыПоИстории(Команда = Неопределено)	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;	Если ИсторияЗагрузкиТестов.Количество() > 0 Тогда		ЭлементИстории = ИсторияЗагрузкиТестов[0];		Попытка			ЗагрузитьТесты(ЭлементИстории.ИдентификаторЗагрузчика, ЭлементИстории.Путь);		Исключение			// TODO			Сообщить("Не удалось загрузить тесты из истории <" + ЭлементИстории.ИдентификаторЗагрузчика + ": " + ЭлементИстории.Путь + ">" + Символы.ПС + ОписаниеОшибки());		КонецПопытки;	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура ГенераторМакетовДанных(Команда)	ОткрытьИнструмент("СериализаторMXL", ПолучитьПутьКПлагинам());КонецПроцедуры&НаКлиентеПроцедура ПоказатьГУИД(Команда)	ОткрытьИнструмент("xddGuidShow");КонецПроцедуры&НаКлиентеПроцедура КонвертерТестов(Команда)	ОткрытьИнструмент("xddTestsConvertIntoRebornFormat");КонецПроцедуры&НаКлиентеПроцедура ПреобразоватьЖурналДействийПользователяВТест(Команда)	ОткрытьИнструмент("UILogToScript");КонецПроцедуры// } Управляющие воздействия пользователя// { Плагины&НаКлиентеПроцедура ЗагрузитьПлагины()	Объект.Плагины = Новый Структура;	КэшФормПлагинов = Новый Структура;		КаталогПлагинов = ПолучитьПутьКПлагинам();	НайденныеФайлы = НайтиФайлы(КаталогПлагинов, "*.epf", Ложь);	ПомещаемыеФайлы = Новый Массив;	ИдентификаторыПлагинов = Новый Соответствие;	Для каждого ФайлОбработки Из НайденныеФайлы Цикл				ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ФайлОбработки.ПолноеИмя);		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);				ИмяПлагина = ФайлОбработки.ИмяБезРасширения;		ИдентификаторыПлагинов.Вставить(ФайлОбработки.ПолноеИмя, ИмяПлагина);			КонецЦикла;		ЗагруженныеФайлы = Новый Массив;	Если ПомещаемыеФайлы.Количество() Тогда		ПоместитьФайлы(ПомещаемыеФайлы, ЗагруженныеФайлы,,Ложь, ЭтаФорма.УникальныйИдентификатор);	КонецЕсли;		ОписанияПлагинов = ПодключитьПлагиныНаСервере(ЗагруженныеФайлы);		Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл		ИмяПлагина = ИдентификаторыПлагинов[ЗагруженныйФайл.Имя];				ОписаниеПлагина = ОписанияПлагинов[ЗагруженныйФайл.Имя];		Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);		КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, Истина);			КонецЦикла;		ДобавитьКомандыЗагрузчиковНаФорме();	КонецПроцедуры&НаСервереФункция ПодключитьПлагиныНаСервере(Знач ЗагружаемыеФайлы)	ОписанияПлагинов = Новый Соответствие;		Для Каждого ОписаниеФайла Из ЗагружаемыеФайлы Цикл		ФайлОбъект = Новый Файл(ОписаниеФайла.Имя);		ИмяПлагина = ФайлОбъект.ИмяБезРасширения;		ПодключитьФайлОбработкиНаСервере(ОписаниеФайла.Хранение, ИмяПлагина);				Попытка			ОбъектОбработки = ВнешниеОбработки.Создать(ИмяПлагина, Ложь);			ОбъектОбработки.Инициализация(ЭтотОбъектНаСервере());			ОписанияПлагинов.Вставить(ОписаниеФайла.Имя, ОбъектОбработки.ОписаниеПлагина(Объект.ТипыПлагинов));		Исключение			Ошибка = "Возникла ошибка при загрузке плагина: "+ОписаниеФайла.Имя + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());			Сообщить(Ошибка);			Продолжить;		КонецПопытки;			КонецЦикла;		Возврат Новый ФиксированноеСоответствие(ОписанияПлагинов);КонецФункции // ПодключитьПлагиныНаСервере()&НаКлиентеПроцедура КэшироватьПеречисленияПлагинов()	Объект.ТипыУзловДереваТестов = Плагин("ПостроительДереваТестов").Объект.ТипыУзловДереваТестов;КонецПроцедуры&НаКлиентеФункция Плагин(Знач Идентификатор) Экспорт		ОбъектПлагин = КэшФормПлагинов[Идентификатор];	Если ОбъектПлагин = Неопределено Тогда		ВызватьИсключение НСтр("ru = 'Неизвестный идентификатор плагина: <"+Идентификатор+">'");	ИначеЕсли ОбъектПлагин = Истина Тогда		// загрузка клиентского плагина "По требованию"		ИмяПлагина = Объект.Плагины[Идентификатор];		Попытка			ОбъектПлагин = ПолучитьФорму("ВнешняяОбработка." + ИмяПлагина + ".Форма", , ЭтаФорма);			КэшФормПлагинов.Вставить(Идентификатор, ОбъектПлагин);		Исключение			// TODO добавить поведение при отсутствии управляемой формы у плагина			ВызватьИсключение;		КонецПопытки;	КонецЕсли;		Возврат ОбъектПлагин;КонецФункции&НаСервереПроцедура ДобавитьКомандыЗагрузчиковНаФорме()	ОписанияЗагрузчиков = ПолучитьОписанияЗагрузчиковНаСервере();	Для каждого Описание Из ОписанияЗагрузчиков Цикл		Команда = ЭтаФорма.Команды.Добавить(Описание.Идентификатор);		Команда.Действие = "Подключаемый_ИнтерактивныйВызовЗагрузчика";		ПунктМеню = ЭтаФорма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПлагиныЗагрузчики);		ПунктМеню.Заголовок = Описание.Представление;		ПунктМеню.ИмяКоманды = Команда.Имя;	КонецЦикла;КонецПроцедуры&НаКлиентеФункция ПолучитьОписанияПлагиновПоТипу(Знач ТипПлагина) Экспорт	Результат = ПолучитьОписанияПлагиновПоТипуНаСервере(ТипПлагина);		Возврат Результат;КонецФункции&НаСервереФункция ПолучитьОписанияПлагиновПоТипуНаСервере(Знач ТипПлагина)	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");	Результат = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ТипПлагина);		Возврат Результат;КонецФункции&НаСервереФункция ПолучитьОписанияЗагрузчиковНаСервере()	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");	ОписанияЗагрузчиков = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ОбъектНаСервере.ТипыПлагинов.Загрузчик);		Возврат ОписанияЗагрузчиков;КонецФункции&НаКлиентеФункция ЗагрузчикПоУмолчанию() Экспорт	Возврат Плагин("ЗагрузчикКаталога");КонецФункции// } Плагины// { Работа с деревом тестов&НаКлиентеПроцедура Подключаемый_ИнтерактивныйВызовЗагрузчика(Команда)	ИдентификаторВыбранногоЗагрузчика = Команда.Имя;	Путь = Плагин(ИдентификаторВыбранногоЗагрузчика).ВыбратьПутьИнтерактивно();	Если ЗначениеЗаполнено(Путь) Тогда		ЗагрузитьТесты(ИдентификаторВыбранногоЗагрузчика, Путь);	КонецЕсли;КонецПроцедуры &НаКлиентеПроцедура ЗагрузитьТесты(Знач ИдентификаторВыбранногоЗагрузчика, Знач Путь)	ИнициализироватьИндикаторВыполнения();		ЭтаФорма.ИдентификаторЗагрузчика = ИдентификаторВыбранногоЗагрузчика;	ФормаЗагрузчика = Плагин(ИдентификаторВыбранногоЗагрузчика);		Попытка		ЭтаФорма.ДеревоОтЗагрузчика = ФормаЗагрузчика.Загрузить(ЭтаФорма, Путь);	Исключение		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		Возврат;	КонецПопытки;		ЭлементыДереваТестов = ЭтаФорма.ДеревоТестов.ПолучитьЭлементы();	ЭлементыДереваТестов.Очистить();	ЗаполнитьДеревоТестов(ЭтаФорма.ДеревоТестов, ДеревоОтЗагрузчика);		КоличествоТестовыхСлучаев = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ЭтаФорма.ДеревоТестов);	РазвернутьСтрокиДерева(КоличествоТестовыхСлучаев < 30);		СохранитьВИсториюЗагрузкиТестовНаСервере(ИдентификаторВыбранногоЗагрузчика, Путь);	ОбновитьКомандыИсторииЗагрузкиТестов();КонецПроцедуры&НаКлиентеПроцедура ЗаполнитьДеревоТестов(РодительскаяСтрокаДереваТестов, Знач КонтейнерДереваТестовЗагрузчика)	СтрокаКонтейнера = РодительскаяСтрокаДереваТестов.ПолучитьЭлементы().Добавить();	СтрокаКонтейнера.Имя = КонтейнерДереваТестовЗагрузчика.Имя;	СтрокаКонтейнера.ИконкаУзла = КонтейнерДереваТестовЗагрузчика.ИконкаУзла;	СтрокаКонтейнера.Ключ = КонтейнерДереваТестовЗагрузчика.Ключ;		Для каждого ЭлементКоллекции Из КонтейнерДереваТестовЗагрузчика.Строки Цикл		Если ЭлементКоллекции.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда			ЗаполнитьДеревоТестов(СтрокаКонтейнера, ЭлементКоллекции);		ИначеЕсли ЭлементКоллекции.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда			СтрокаЭлемента = СтрокаКонтейнера.ПолучитьЭлементы().Добавить();			СтрокаЭлемента.Имя = ЭлементКоллекции.Представление;			СтрокаЭлемента.Путь = ЭлементКоллекции.Путь;			СтрокаЭлемента.ИконкаУзла = ЭлементКоллекции.ИконкаУзла;			СтрокаЭлемента.Ключ = ЭлементКоллекции.Ключ;		КонецЕсли;	КонецЦикла;КонецПроцедуры&НаКлиентеФункция ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)	КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();	Если КоллекцияСтрок.Количество() = 0 Тогда		Возврат 1;	КонецЕсли;	ОбщееКоличествоТестов = 0;	Для каждого СтрокаДерева из КоллекцияСтрок Цикл		КоличествоТестовВСтроке = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);		СтрокаДерева.КоличествоТестов = КоличествоТестовВСтроке;		ОбщееКоличествоТестов = ОбщееКоличествоТестов + КоличествоТестовВСтроке;	КонецЦикла;		Возврат ОбщееКоличествоТестов;КонецФункции&НаКлиентеПроцедура РазвернутьСтрокиДерева(Знач ВключаяПодчиненные = Ложь)	Для каждого СтрокаДерева из ДеревоТестов.ПолучитьЭлементы() Цикл		Идентификатор = СтрокаДерева.ПолучитьИдентификатор();		Элементы.ДеревоТестов.Развернуть(Идентификатор, ВключаяПодчиненные);	КонецЦикла;КонецПроцедуры&НаКлиентеПроцедура ОбновитьДеревоТестовНаОснованииРезультатовТестирования(УзелДереваТестов, Знач РезультатТестирования)	УзелДереваТестов.Состояние = РезультатТестирования.Состояние;	УзелДереваТестов.ВремяВыполнения = РезультатТестирования.ВремяВыполнения;	Если РезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда		Для каждого ДочернийРезультатТестирования Из РезультатТестирования.Строки Цикл			ДочернийУзелДереваТестов = НайтиСтрокуВДеревеТестовПоКлючу(УзелДереваТестов, ДочернийРезультатТестирования.Ключ);			ОбновитьДеревоТестовНаОснованииРезультатовТестирования(ДочернийУзелДереваТестов, ДочернийРезультатТестирования);		КонецЦикла;	ИначеЕсли РезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда		Если РезультатТестирования.Свойство("Сообщение") И ЗначениеЗаполнено(РезультатТестирования.Сообщение) Тогда			Сообщить(РезультатТестирования.Сообщение, СтатусСообщения.ОченьВажное);		КонецЕсли;	КонецЕсли;КонецПроцедуры&НаКлиентеФункция НайтиСтрокуВДеревеТестовПоКлючу(УзелДереваТестов, Знач Ключ)	Результат = Неопределено;	Для каждого ЭлементКоллекции Из УзелДереваТестов.ПолучитьЭлементы() Цикл		Если ЭлементКоллекции.Ключ = Ключ Тогда			Результат = ЭлементКоллекции;			Прервать;		КонецЕсли;	КонецЦикла;		Возврат Результат;КонецФункции// } Работа с деревом тестов// { Выполнение тестов&НаКлиентеФункция ПолучитьКоличествоТестовыхМетодов(Знач КонтейнерДереваТестов, Знач Фильтр = Неопределено) Экспорт	Возврат ПолучитьКоличествоТестовыхМетодовНаСервере(КонтейнерДереваТестов, Фильтр);КонецФункции&НаСервереФункция ПолучитьКоличествоТестовыхМетодовНаСервере(Знач КонтейнерДереваТестов, Знач Фильтр)	Возврат ЭтотОбъектНаСервере().ПолучитьКоличествоТестовыхМетодов(КонтейнерДереваТестов, Фильтр);КонецФункции&НаКлиентеФункция ВыполнитьТесты(Знач Загрузчик, Знач КонтейнерДереваТестов, Знач Фильтр = Неопределено, Знач Подписчик = Неопределено) Экспорт	РезультатТестирования = СоздатьКонтейнерРезультатовТестирования(КонтейнерДереваТестов);	ФильтрДляДочернихУзлов = Неопределено;	Если Не УзелДереваТестовУдовлетворяетФильтру(КонтейнерДереваТестов, Фильтр) Тогда		ФильтрДляДочернихУзлов = Фильтр;	КонецЕсли;		Если КонтейнерДереваТестов.СлучайныйПорядокВыполнения Тогда		СтрокиКонтейнера = ПеремешатьМассив(КонтейнерДереваТестов.Строки);	Иначе		СтрокиКонтейнера = КонтейнерДереваТестов.Строки;	КонецЕсли;		Для каждого ДочернийУзел Из СтрокиКонтейнера Цикл		ДочернийРезультатТестирования = Неопределено;		Если ДочернийУзел.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда			ДочернийРезультатТестирования = ВыполнитьТесты(Загрузчик, ДочернийУзел, ФильтрДляДочернихУзлов, Подписчик);		ИначеЕсли ДочернийУзел.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда			Если УзелДереваТестовУдовлетворяетФильтру(ДочернийУзел, ФильтрДляДочернихУзлов) Тогда				КонтекстВыполнения = ПолучитьКонтекстВыполненияПоПути(Загрузчик, ДочернийУзел.Путь);				Объект.ТекущийКонтейнер = КонтейнерДереваТестов;				ДочернийРезультатТестирования = ВыполнитьТестовыйМетод(КонтекстВыполнения, ДочернийУзел);				КонтейнерДереваТестов.Контекст = Объект.ТекущийКонтейнер.Контекст;								Если Подписчик <> Неопределено Тогда					ОповеститьОСобытии(Подписчик, Объект.ВозможныеСобытия.ВыполненТестовыйМетод, ДочернийРезультатТестирования);				КонецЕсли;			КонецЕсли;		КонецЕсли;		Если ДочернийРезультатТестирования <> Неопределено Тогда			РезультатТестирования.Строки.Добавить(ДочернийРезультатТестирования);			РезультатТестирования.Состояние = ВыбратьХудшееСостояниеВыполненияТестов(РезультатТестирования.Состояние, ДочернийРезультатТестирования.Состояние);			ЗаполнитьДанныеСтатистики(РезультатТестирования, ДочернийРезультатТестирования);			Если Не КонтейнерДереваТестов.СлучайныйПорядокВыполнения И ДочернийРезультатТестирования.Состояние <> Объект.СостоянияТестов.Пройден Тогда				Прервать;			КонецЕсли;		КонецЕсли;	КонецЦикла;	Если РезультатТестирования.Строки.Количество() = 0 Тогда		РезультатТестирования = Неопределено;	КонецЕсли;		Возврат РезультатТестирования;КонецФункции&НаКлиентеФункция УзелДереваТестовУдовлетворяетФильтру(Знач УзелДереваТестов, Знач Фильтр)	Возврат (Фильтр = Неопределено) Или (Фильтр.Найти(УзелДереваТестов.Ключ) <> Неопределено);КонецФункции&НаКлиентеФункция ПолучитьКонтекстВыполненияПоПути(Знач Загрузчик, Знач Путь)	КонтекстВыполнения = Загрузчик.ПолучитьКонтекстПоПути(ЭтаФорма, Путь);		Возврат КонтекстВыполнения;КонецФункции&НаКлиентеФункция ЭтоСерверныйКонтекстВыполнения(Знач КонтекстВыполнения)	Результат = ТипЗнч(КонтекстВыполнения) = Тип("ФиксированнаяСтруктура");		Возврат Результат;КонецФункции&НаКлиентеПроцедура ЗаполнитьДанныеСтатистики(РезультатТестирования, Знач ДочернийРезультатТестирования)	Если ДочернийРезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда		РезультатТестирования.КоличествоТестов = РезультатТестирования.КоличествоТестов + ДочернийРезультатТестирования.КоличествоТестов;		РезультатТестирования.КоличествоСломанныхТестов = РезультатТестирования.КоличествоСломанныхТестов + ДочернийРезультатТестирования.КоличествоСломанныхТестов;		РезультатТестирования.КоличествоНеРеализованныхТестов = РезультатТестирования.КоличествоНеРеализованныхТестов + ДочернийРезультатТестирования.КоличествоНеРеализованныхТестов;		РезультатТестирования.КоличествоОшибочныхТестов = РезультатТестирования.КоличествоОшибочныхТестов + ДочернийРезультатТестирования.КоличествоОшибочныхТестов;			ИначеЕсли ДочернийРезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда		РезультатТестирования.КоличествоТестов = РезультатТестирования.КоличествоТестов + 1;		Если ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан Тогда			РезультатТестирования.КоличествоСломанныхТестов = РезультатТестирования.КоличествоСломанныхТестов + 1;		ИначеЕсли ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован Тогда			РезультатТестирования.КоличествоНеРеализованныхТестов = РезультатТестирования.КоличествоНеРеализованныхТестов + 1;		ИначеЕсли ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка Тогда			РезультатТестирования.КоличествоОшибочныхТестов = РезультатТестирования.КоличествоОшибочныхТестов + 1;		КонецЕсли;	КонецЕсли;	РезультатТестирования.ВремяВыполнения = РезультатТестирования.ВремяВыполнения + ДочернийРезультатТестирования.ВремяВыполнения;КонецПроцедуры&НаКлиентеФункция ВыбратьХудшееСостояниеВыполненияТестов(Знач Состояние1, Знач Состояние2)	Возврат Макс(Состояние1, Состояние2);КонецФункции&НаКлиентеФункция ВыполнитьТестовыйМетод(Знач КонтекстВыполнения, Знач ЭлементДереваТестов)	Перем РезультатТестирования;		Если ЭтоСерверныйКонтекстВыполнения(КонтекстВыполнения) Тогда		РезультатТестирования = ВыделитьТестовыйМетодНаСервереСОбработкойОшибокПередачиМеждуНаКлиентомИСервером(КонтекстВыполнения, ЭлементДереваТестов);	Иначе		РезультатТестирования = ВыполнитьТестовыйМетодНаКлиенте(КонтекстВыполнения, ЭлементДереваТестов);	КонецЕсли;		Возврат РезультатТестирования;КонецФункции&НаКлиентеФункция ВыполнитьТестовыйМетодНаКлиенте(Знач КонтекстВыполнения, Знач ЭлементДереваТестов) Экспорт		РезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();		Если ВыполнитьИнициализациюКонтекста(КонтекстВыполнения, РезультатТестирования) Тогда			Попытка			ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(КонтекстВыполнения, ЭлементДереваТестов.ПередЗапускомТеста);			ВыполнитьПроцедуруКонтекста(КонтекстВыполнения, ЭлементДереваТестов.ИмяМетода, ЭлементДереваТестов.Параметры);						РезультатТестирования.Состояние = Объект.СостоянияТестов.Пройден;		Исключение			ИнформацияОбОшибке = ИнформацияОбОшибке();			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);			КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);			Если ЕстьОшибка_МетодОбъектаНеОбнаружен(КраткийТекстОшибки, ЭлементДереваТестов.ИмяМетода) Тогда				РезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован;				Сообщение = НСтр("ru = 'Отсутствует реализация тестового метода (%1).'");				РезультатТестирования.Сообщение = СтрЗаменить(Сообщение, "%1", ЭлементДереваТестов.ИмяМетода);			Иначе				РезультатТестирования.Сообщение = ТекстОшибки;				Если ЭтоОшибкаПроверки(КраткийТекстОшибки) Тогда					РезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан;				ИначеЕсли ЭтоПропущенныйТест(КраткийТекстОшибки) Тогда					РезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован;				Иначе					РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;				КонецЕсли;			КонецЕсли;		КонецПопытки;		Попытка			ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(КонтекстВыполнения, ЭлементДереваТестов.ПослеЗапускаТеста);		Исключение			ИнформацияОбОшибке = ИнформацияОбОшибке();			РезультатТестирования.Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);						КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);			Если ЭтоОшибкаПроверки(КраткийТекстОшибки) Тогда				РезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан;			Иначе				РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;			КонецЕсли;					КонецПопытки;	КонецЕсли;		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();	РезультатТестирования.ВремяВыполнения = (ОкончаниеВыполнения - НачалоВыполнения) / 1000;		Возврат РезультатТестирования;КонецФункции&НаКлиентеФункция ВыполнитьИнициализациюКонтекста(КонтекстВыполнения, РезультатТестирования)	Попытка		КонтекстВыполнения.Инициализация(ЭтаФорма);		Возврат Истина;	Исключение		РезультатТестирования.Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;	КонецПопытки;	Возврат Ложь;КонецФункции&НаКлиентеФункция ВыделитьТестовыйМетодНаСервереСОбработкойОшибокПередачиМеждуНаКлиентомИСервером(Знач КонтекстВыполнения, Знач ЭлементДереваТестов)		Перем ПолныйТекстОшибки, РезультатТестирования;		Попытка		РезультатТестирования = ВыполнитьТестовыйМетодНаСервере(КонтекстВыполнения, ЭлементДереваТестов);	Исключение		ПолныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		РезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);		РезультатТестирования.Сообщение = ПолныйТекстОшибки;		РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;	КонецПопытки;	Возврат РезультатТестирования;КонецФункции&НаСервереФункция ВыполнитьТестовыйМетодНаСервере(Знач ОписаниеКонтекста, Знач ЭлементДереваТестов)	ОбъектНаСервере = ЭтотОбъектНаСервере();		Если ОписаниеКонтекста.ЭтоВнутренняяОбработка Тогда		КонтекстВыполнения = Обработки[ОписаниеКонтекста.Идентификатор].Создать();	Иначе		КонтекстВыполнения = ВнешниеОбработки.Создать(ОписаниеКонтекста.Идентификатор, Ложь);	КонецЕсли;	КонтекстВыполнения.Инициализация(ОбъектНаСервере);		РезультатТестирования = ОбъектНаСервере.ВыполнитьТестовыйМетод(КонтекстВыполнения, ЭлементДереваТестов);		Возврат РезультатТестирования;КонецФункции&НаКлиентеПроцедура ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Знач КонтекстВыполнения, Знач ИмяПроцедуры)	Попытка		ВыполнитьПроцедуруКонтекста(КонтекстВыполнения, ИмяПроцедуры);	Исключение		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяПроцедуры) Тогда			ВызватьИсключение;		КонецЕсли;	КонецПопытки;КонецПроцедуры&НаКлиентеПроцедура ВыполнитьПроцедуруКонтекста(Знач КонтекстВыполнения, Знач ПроцедураКонтекста, Знач Параметры = Неопределено)	СтрокаПараметров = СформироватьСтрокуПараметров(Параметры);	ИcполняемыйКод = "КонтекстВыполнения." + ПроцедураКонтекста + "(" + СтрокаПараметров + ");";	Выполнить(ИcполняемыйКод);КонецПроцедуры&НаКлиентеФункция СформироватьСтрокуПараметров(Знач Параметры)	СтрокаПараметров = "";	Если ТипЗнч(Параметры) = Тип("Массив") Тогда		Для Сч = 0 По Параметры.Количество() - 1 Цикл			СтрокаПараметров = СтрокаПараметров + ",Параметры[" + Формат(Сч, "ЧН=0; ЧГ=") + "]";		КонецЦикла;	КонецЕсли;		Возврат Сред(СтрокаПараметров, 2);КонецФункции&НаКлиентеФункция ЕстьОшибка_МетодОбъектаНеОбнаружен(Знач ТекстОшибки, Знач ИмяМетода)	Результат = Ложь;	Если Найти(ТекстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0 		ИЛИ Найти(ТекстОшибки, "Object method not found (" + ИмяМетода + ")") > 0  Тогда		Результат = Истина;	КонецЕсли;		Возврат Результат;КонецФункцииФункция ЭтоОшибкаПроверки(ТекстОшибки)		Возврат Найти(ТекстОшибки, "["+ Объект.СтатусыРезультатаТестирования.ОшибкаПроверки + "]") = 1;	КонецФункцииФункция ЭтоПропущенныйТест(ТекстОшибки)		Возврат Найти(ТекстОшибки, "["+ Объект.СтатусыРезультатаТестирования.ТестПропущен + "]") > 0;	КонецФункции// } Выполнение тестов// { Генерация результатов тестирования&НаКлиентеФункция СоздатьКонтейнерРезультатовТестирования(Знач КонтейнерДереваТестов)	ГруппаРезультатовТестирования = Новый Структура;	ГруппаРезультатовТестирования.Вставить("Ключ", КонтейнерДереваТестов.Ключ);	ГруппаРезультатовТестирования.Вставить("Тип", КонтейнерДереваТестов.Тип);	ГруппаРезультатовТестирования.Вставить("Имя", КонтейнерДереваТестов.Имя);	ГруппаРезультатовТестирования.Вставить("Состояние", Объект.СостоянияТестов.НеВыполнен);	ГруппаРезультатовТестирования.Вставить("КоличествоТестов", 0);	ГруппаРезультатовТестирования.Вставить("КоличествоСломанныхТестов", 0);	ГруппаРезультатовТестирования.Вставить("КоличествоОшибочныхТестов", 0);	ГруппаРезультатовТестирования.Вставить("КоличествоНеРеализованныхТестов", 0);	ГруппаРезультатовТестирования.Вставить("ВремяВыполнения", 0);	ГруппаРезультатовТестирования.Вставить("Строки", Новый Массив);		Возврат ГруппаРезультатовТестирования;КонецФункции&НаКлиентеФункция СоздатьЭлементРезультатовТестирования(Знач ЭлементДереваТестов)	РезультатТестирования = Новый Структура;	РезультатТестирования.Вставить("Ключ", ЭлементДереваТестов.Ключ);	РезультатТестирования.Вставить("Тип", ЭлементДереваТестов.Тип);	РезультатТестирования.Вставить("Путь", ЭлементДереваТестов.Путь);	РезультатТестирования.Вставить("ИмяМетода", ЭлементДереваТестов.ИмяМетода);	РезультатТестирования.Вставить("Представление", ЭлементДереваТестов.Представление);	РезультатТестирования.Вставить("Параметры", ЭлементДереваТестов.Параметры);	РезультатТестирования.Вставить("Состояние", Объект.СостоянияТестов.НеВыполнен);	РезультатТестирования.Вставить("ВремяВыполнения", 0);	РезультатТестирования.Вставить("Сообщение", "");		Возврат РезультатТестирования;КонецФункции// } Генерация результатов тестирования// { История загрузки тестов&НаСервереПроцедура СохранитьВИсториюЗагрузкиТестовНаСервере(Знач ИдентификаторЗагрузчика, Знач Путь)	ЭтотОбъектНаСервере = ЭтотОбъектНаСервере();	ЭтотОбъектНаСервере.СохранитьВИсториюЗагрузкиТестов(ИдентификаторЗагрузчика, Путь);	ЗначениеВРеквизитФормы(ЭтотОбъектНаСервере, "Объект");КонецПроцедуры&НаСервереПроцедура ОбновитьКомандыИсторииЗагрузкиТестов()	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;	ПодменюИсторияЗагрузкиТестов = Элементы.ПодменюИсторияЗагрузкиТестов;	Для Сч = 0 По ИсторияЗагрузкиТестов.Количество() - 1 Цикл		ИмяКоманды = "История_" + Сч;		НайденнаяКоманда = Команды.Найти(ИмяКоманды);		Если НайденнаяКоманда = Неопределено Тогда			НоваяКоманда = Команды.Добавить(ИмяКоманды);			НоваяКоманда.Действие = "Подключаемый_ЗагрузитьТестыИзИстории";			ПунктМеню = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ПодменюИсторияЗагрузкиТестов);			ПунктМеню.ИмяКоманды = НоваяКоманда.Имя;		Иначе			ПунктМеню = Элементы.Найти(ИмяКоманды);		КонецЕсли;		ЭлементИстории = ИсторияЗагрузкиТестов[Сч];		ПунктМеню.Заголовок = ЭлементИстории.ИдентификаторЗагрузчика + ": " + ЭлементИстории.Путь;	КонецЦикла;КонецПроцедуры&НаКлиентеПроцедура Подключаемый_ЗагрузитьТестыИзИстории(Команда)	ИндексИстории = Число(Сред(Команда.Имя, Найти(Команда.Имя, "_") + 1));	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;	ЭлементИстории = ИсторияЗагрузкиТестов[ИндексИстории];	ЗагрузитьТесты(ЭлементИстории.ИдентификаторЗагрузчика, ЭлементИстории.Путь);КонецПроцедуры// } История загрузки тестов// { Пакетный запуск&НаКлиентеПроцедура ВыполнитьПакетныйЗапуск(Знач ПараметрЗапуска)	Перем РезультатыТестирования;		ПарсерКоманднойСтроки = ЭтаФорма.Плагин("ПарсерКоманднойСтроки");	ПараметрыЗапуска = ПарсерКоманднойСтроки.Разобрать(ПараметрЗапуска);		Параметры_xddRun = Неопределено;	Если ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddRun, Параметры_xddRun) Тогда		РезультатыТестирования = ЗагрузитьИВыполнитьТесты_ПакетныйРежим(Параметры_xddRun);	КонецЕсли;		Параметры_xddReport = Неопределено;	Если ЗначениеЗаполнено(РезультатыТестирования) И ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddReport, Параметры_xddReport) Тогда		СформироватьОтчетОТестированииИЭкспортировать_ПакетныйРежим(Параметры_xddReport, РезультатыТестирования);	КонецЕсли;		Если ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddShutdown) Тогда		ЗавершитьРаботуСистемы(Ложь);	КонецЕсли;КонецПроцедуры&НаКлиентеФункция ЗагрузитьИВыполнитьТесты_ПакетныйРежим(Знач Параметры_xddRun)	Попытка		ИдентификаторЗагрузчика = Параметры_xddRun[0];		Загрузчик = ЭтаФорма.Плагин(ИдентификаторЗагрузчика);				ПутьКТестам = Параметры_xddRun[1];		ДеревоТестовОтЗагрузчика = Загрузчик.Загрузить(ЭтаФорма, ПутьКТестам);				РезультатыТестирования = ЭтаФорма.ВыполнитьТесты(Загрузчик, ДеревоТестовОтЗагрузчика);	Исключение		ОписаниеОшибки = "Ошибка загрузки и выполнения тестов в пакетном режиме		|" + ОписаниеОшибки();		ЗафиксироватьОшибкуВЖурналеРегистрации(ОписаниеОшибки);	КонецПопытки;		Возврат РезультатыТестирования;КонецФункции&НаКлиентеПроцедура СформироватьОтчетОТестированииИЭкспортировать_ПакетныйРежим(Знач Параметры_xddReport, Знач РезультатыТестирования)	Попытка		ИдентификаторГенератораОтчета = Параметры_xddReport[0];		ГенераторОтчета = ЭтаФорма.Плагин(ИдентификаторГенератораОтчета);				Отчет = ГенераторОтчета.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);				ПутьКОтчету = Параметры_xddReport[1];		ГенераторОтчета.Экспортировать(Отчет, ПутьКОтчету);	Исключение		ОписаниеОшибки = "Ошибка формирования и экспорта отчета о тестировании в пакетном режиме		|" + ОписаниеОшибки();		ЗафиксироватьОшибкуВЖурналеРегистрации(ОписаниеОшибки);	КонецПопытки;КонецПроцедуры&НаСервереПроцедура ЗафиксироватьОшибкуВЖурналеРегистрации(Знач ОписаниеОшибки)	ЗаписьЖурналаРегистрации(ЭтотОбъектНаСервере().Метаданные().Имя, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);КонецПроцедуры// } Пакетный запуск// { Контекст&НаКлиентеПроцедура СохранитьКонтекст(Знач Контекст) Экспорт	Если Объект.ТекущийКонтейнер.СлучайныйПорядокВыполнения Тогда		ВызватьИсключение Объект.ВозможныеИсключения.СохранятьКонтекстТолькоВСтрогомРежиме;	КонецЕсли;	Объект.ТекущийКонтейнер.Контекст = Контекст;КонецПроцедуры&НаКлиентеФункция ПолучитьКонтекст() Экспорт	Если Объект.ТекущийКонтейнер.СлучайныйПорядокВыполнения Тогда		ВызватьИсключение Объект.ВозможныеИсключения.ПолучатьКонтекстТолькоВСтрогомРежиме;	КонецЕсли;		Возврат Объект.ТекущийКонтейнер.Контекст;КонецФункции// } КонтекстПроцедура ВызватьОшибкуПроверки(СообщениеОшибки = "") Экспорт		Префикс = "["+ Объект.СтатусыРезультатаТестирования.ОшибкаПроверки + "]";	ВызватьИсключение Префикс + " " + СообщениеОшибки;	КонецПроцедурыПроцедура ПропуститьТест(Знач Сообщение = "") Экспорт		Префикс = "[" + Объект.СтатусыРезультатаТестирования.ТестПропущен + "]";	Если ПустаяСтрока(Сообщение) Тогда		Сообщение = НСтр("ru = 'Тест пропущен'");	КонецЕсли;	ВызватьИсключение Префикс + " " + Сообщение;	КонецПроцедуры// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().// Функция ВывестиСообщение(ТекстСообщения, Статус=Неопределено) Экспорт			Сообщить(ТекстСообщения, Статус);	КонецФункции// { Внешние интерфейсные инструменты&НаКлиентеПроцедура ОткрытьИнструмент(Знач ИмяИнструмента, Знач ПутьИнструмента = "", Знач ИмяФормы = "Форма")	Если Не ПустаяСтрока(ПутьИнструмента) Тогда		ПутьКВнешнимИнструментам = ПутьИнструмента + "\";	Иначе		ПутьКВнешнимИнструментам = ПолучитьПутьКВнешнимИнструментам();	КонецЕсли;	ПутьИнструмента = ПутьКВнешнимИнструментам + ИмяИнструмента + ".epf";	ФайлИнструмента = Новый Файл(ПутьИнструмента);	Если Не ФайлИнструмента.Существует() Тогда		Сообщить("Инструмент <" + ИмяИнструмента + "> не найден в каталоге <" + ФайлИнструмента.Путь + ">");		Возврат;	КонецЕсли;	АдресХранилища = "";	ПоместитьФайл(АдресХранилища, ФайлИнструмента.ПолноеИмя, , Ложь);	ПодключитьФайлОбработкиНаСервере(АдресХранилища, ИмяИнструмента);		ФормаИнструмента = ПолучитьФорму("ВнешняяОбработка." + ИмяИнструмента + "." + ИмяФормы);	Если ФормаИнструмента = Неопределено Тогда		Сообщить("Инструмент <" + ИмяИнструмента + ">: не удалось получить основную форму!");		Возврат;	КонецЕсли;	ФормаИнструмента.Открыть();	ФормаИнструмента = Неопределено;КонецПроцедуры&НаКлиентеФункция ПолучитьПутьКПлагинам()	ФайлЯдра = Новый Файл(ЭтаФорма.ИспользуемоеИмяФайла);	Результат = ФайлЯдра.Путь + "Plugins\";		Возврат Результат;КонецФункции&НаКлиентеФункция ПолучитьПутьКВнешнимИнструментам()	ФайлЯдра = Новый Файл(ЭтаФорма.ИспользуемоеИмяФайла);	Результат = ФайлЯдра.Путь + "Utils\";		Возврат Результат;КонецФункции// } Внешние интерфейстные инструменты// { Helpers&НаКлиентеПроцедура ПодключитьВнешнююОбработку(ФайлОбработки) Экспорт	Если ПодключенныеВнешниеОбработки.Получить(ФайлОбработки.ИмяБезРасширения) = Неопределено Тогда		АдресХранилища = "";		ПоместитьФайл(АдресХранилища, ФайлОбработки.ПолноеИмя, , Ложь, ЭтаФорма.УникальныйИдентификатор);				ПодключитьФайлОбработкиНаСервере(АдресХранилища, ФайлОбработки.ИмяБезРасширения);				ПодключенныеВнешниеОбработки.Вставить(ФайлОбработки.ИмяБезРасширения, Истина);	КонецЕсли;КонецПроцедуры&НаСервереБезКонтекстаПроцедура ПодключитьФайлОбработкиНаСервере(Знач АдресХранилища, Знач ИдентификаторОбработки)	ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь);КонецПроцедуры&НаКлиентеФункция ПолучитьОписаниеКонтекстаВыполнения(Знач Идентификатор, Знач ЭтоВнутренняяОбработка = Ложь) Экспорт	ОписаниеКонтекстаВыполнения = Новый Структура("Идентификатор, ЭтоВнутренняяОбработка", Идентификатор, ЭтоВнутренняяОбработка);		Возврат Новый ФиксированнаяСтруктура(ОписаниеКонтекстаВыполнения);КонецФункции&НаСервереФункция ЭтотОбъектНаСервере()	Возврат РеквизитФормыВЗначение("Объект");КонецФункции&НаКлиентеПроцедура ИнициализироватьИндикаторВыполнения(Знач КоличествоТестовыхМетодов = 0)	Элементы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхМетодов;	ИндикаторВыполнения = 0;	Элементы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // ЗеленыйКонецПроцедуры&НаКлиентеПроцедура ОповеститьОСобытии(Знач Подписчик, Знач Событие, Знач ПараметрыСобытия)	Выполнить("Подписчик.ОбработатьСобытиеВыполненияТестов(Событие, ПараметрыСобытия);");КонецПроцедуры&НаКлиентеФункция ПеремешатьМассив(Знач ИсходныйМассив) Экспорт	Результат = Новый Массив;	Для Каждого Элемент Из ИсходныйМассив Цикл		Результат.Добавить(Элемент);	КонецЦикла;		// алгоритм перемешивания взят из книги Кнута "Искусство программирования" т.2	ГСЧ = Новый ГенераторСлучайныхЧисел();	ПоследнийИндекс = Результат.ВГраница();	Для Индекс = 1 По ПоследнийИндекс Цикл		ТекущийИндекс = ПоследнийИндекс - Индекс + 1;		НовыйИндекс = ГСЧ.СлучайноеЧисло(0, ТекущийИндекс);		Если НовыйИндекс <> ТекущийИндекс Тогда			Значение = Результат[НовыйИндекс];			Результат[НовыйИндекс] = Результат[ТекущийИндекс];			Результат[ТекущийИндекс] = Значение;		КонецЕсли;	КонецЦикла;		Возврат Результат;КонецФункции&НаКлиентеФункция НайтиРезультатТестированияПоИдентификатору(Знач КонтейнерРезультатовТестирования, Знач ИдентификаторТеста, Знач ВключатьПодчиненные = Ложь) Экспорт	Результат = НайтиРезультатТестированияПоИдентификатору_НаСервере(КонтейнерРезультатовТестирования, ИдентификаторТеста, ВключатьПодчиненные);		Возврат Результат;КонецФункции&НаСервереФункция НайтиРезультатТестированияПоИдентификатору_НаСервере(Знач КонтейнерРезультатовТестирования, Знач ИдентификаторТеста, Знач ВключатьПодчиненные) Экспорт	Результат = ЭтотОбъектНаСервере().НайтиРезультатТестированияПоИдентификатору(КонтейнерРезультатовТестирования, ИдентификаторТеста, ВключатьПодчиненные);		Возврат Результат;КонецФункции&НаКлиентеПроцедура СброситьПодключенныеВнешниеОбработки()	ПодключенныеВнешниеОбработки = Новый Соответствие;КонецПроцедуры&НаКлиентеФункция ПараметрыМетода(Знач Парам1, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено, Знач Парам6 = Неопределено, Знач Парам7 = Неопределено, Знач Парам8 = Неопределено, Знач Парам9 = Неопределено) Экспорт	ВсеПараметры = Новый Массив;	ВсеПараметры.Добавить(Парам1);	ВсеПараметры.Добавить(Парам2);	ВсеПараметры.Добавить(Парам3);	ВсеПараметры.Добавить(Парам4);	ВсеПараметры.Добавить(Парам5);	ВсеПараметры.Добавить(Парам6);	ВсеПараметры.Добавить(Парам7);	ВсеПараметры.Добавить(Парам8);	ВсеПараметры.Добавить(Парам9);		ИндексСПоследнимПараметром = 0;	Для Сч = 0 По ВсеПараметры.ВГраница() Цикл		Индекс = ВсеПараметры.ВГраница() - Сч;		Если ВсеПараметры[Индекс] <> Неопределено Тогда			ИндексСПоследнимПараметром = Индекс;			Прервать;		КонецЕсли;	КонецЦикла;		ПараметрыМетода = Новый Массив;	Для Сч = 0 По ИндексСПоследнимПараметром Цикл		ПараметрыМетода.Добавить(ВсеПараметры[Сч]);	КонецЦикла;		Возврат ПараметрыМетода;КонецФункции// } Helpers