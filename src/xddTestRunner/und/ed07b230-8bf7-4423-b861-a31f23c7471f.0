{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,0},0,0,1,1,1,0,1,0,
{3,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",ca21cd18-35b2-4281-b5c8-016ecc8da8ac,"ПриЗакрытии"},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,0},8,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{423,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаЗагрузитьТестыПоУмолчанию",
{1,1,
{"ru","Загрузить тесты"}
},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAABIAAAASABGyWs+AAAEtUlEQVRIx6WUy48UVRTGf+fe6p6e
7ume6aCMEXygIgmgISaSGI0ZSYfEpRt2/gUmxrhwYVy410R36pawksBKNCajji9C
lEgCBGGAGZkB5kU/pt9dVfceF9XdM82486RqUfXdOud85ztfyec/984/+4h9Ze+U
IZsWANqhcrfmWSjHv6mK/T94AARnf7nOjYVlNutNACYLExx4Zi8v7H8y7VXtmZ8W
mb+zwma9tQ1/giMH9weo2jM/XWF+cZl6o4VKMIILwPsnr+vxQ3l6sWIEljYa/H5t
jfXvP34U8C++/UX5+OHCEF9+0OT8fJ3Vbz6wwNTBE5+Wjx0sQDCONTLET713VAKA
fC7Da4emcVgCcfxwscmYUYA0sJafGB/iaQsXbmxw6Z82wGNAKpexHHvpadSktvA7
XQAM/TAieO+oVat47xExAGuzs3NugAMI4L3HdRsAKSBKZScJrB3igyiVZmRYQNB+
cocxBpvJM0gOYE3yqaqj1aih6gEiYE3EDHEZVFAFyAT9J9qtFs45xsYsufwUSJeH
w3tHdXMnw99PHOKFxZM82LXI0bEZvrr/GWdvneN1jiSnfByheKy1FItFjDHsjGR8
zu1kKEZB4JPND7nausR3N8+BJp0PM6UDy1SxiO3PcnuoehqbNZxzBMGA4VYTIvCI
3U0QQKqVxiIDMbrDU7lcDmN2Ji+VZuy7c4dx8+eZun2K3VLmlYvv8NGFI1uHJBE+
3QlQ71CjxDZmdnYuYWCC1H+OpVSascC0MwHWGoq3v8RUbxBfPjtyzojQqjexAiYw
xNmoP6HhmsqO5CRbMg2kbGAo5nOY7DhYAzYYaSLVSSXCZzy5qSza12TEB6PbMrrn
xTGfMBzPgrEQBCMMBTDGoMUIsTLSrgE4eX6Zucsr/FVRVpsxX/+5yulf54d7bmz/
k/FxMAasxSdppoGUArnCBIrSv0YLDEp+u+S4tlRh7noNTV4mTh7ok8mCGLxY6i49
ZBhlIowxuFiS5JrcI06OnNKrV3DOoVhCyW45WQR8CJkMXj21OI1LGoiANY/S0w4u
FFQV1eGYMqa/6KxstoiimFpoiFMTgxFsRW8NL5bq2hIOwSa9JgwV7sZLuFBYCe8j
TghckHgQQF3MessROksmX8TpTu198x7VWg/nHRalYMMhQ1W4E97ChYKLFdsJHnKy
Kq1IiFNT9JzBK/htSnkH1coDXKeH9SFTQYjZJqV6oRJVibuGWnkTYjPqZKdC3Wfp
xkKl7XEONPkbUirN2GpocO0yNuxSDFoYHz+01rDRXYdymkq3ivOMOjnGstFWuqHn
QVtxXlHd5mTnsd0NiraDaW+Ac6Pzc8JqeQ3fM5SjCmE6HnWyj2I6kdANlYWKJ5e2
WNna83oPiqaN6bahfBNJT9DydsgwXcnSCyNiBwt6h3yqgInHthVoN6oblQaPjkGt
rUjUJp+Oa0AING5FxfVmrQqpaWiWacYB83bveqk0Y4DJsZXna5vVgD2TT1ELG6Tr
j5PtHKhuWezNU4XJglxxcbQHBBHu7apcfPk5c6UBdN+K53LT+/b9KBq+KKqE3l69
v7z6xrfBqzEgfxeqE7XJ4h8a1/aCgEzcbXeuH+b0RvNf+XOfI5UewfYAAAAldEVY
dGRhdGU6Y3JlYXRlADIwMTMtMDUtMjlUMDk6NDc6NDItMDU6MDBTDo/DAAAAJXRF
WHRkYXRlOm1vZGlmeQAyMDEzLTA1LTI4VDA2OjE3OjMwLTA1OjAwR0bHqQAAAABJ
RU5ErkJggg==}
},0},1,
{"Pattern"},"",2},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{17,
{131,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ПодменюЗагрузитьТесты",
{1,1,
{"ru","Загрузить ..."}
},
{1,1,
{"ru","Подменю загрузить тесты"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{6,
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAABIAAAASABGyWs+AAAEtUlEQVRIx6WUy48UVRTGf+fe6p6e
7ume6aCMEXygIgmgISaSGI0ZSYfEpRt2/gUmxrhwYVy410R36pawksBKNCajji9C
lEgCBGGAGZkB5kU/pt9dVfceF9XdM82486RqUfXdOud85ztfyec/984/+4h9Ze+U
IZsWANqhcrfmWSjHv6mK/T94AARnf7nOjYVlNutNACYLExx4Zi8v7H8y7VXtmZ8W
mb+zwma9tQ1/giMH9weo2jM/XWF+cZl6o4VKMIILwPsnr+vxQ3l6sWIEljYa/H5t
jfXvP34U8C++/UX5+OHCEF9+0OT8fJ3Vbz6wwNTBE5+Wjx0sQDCONTLET713VAKA
fC7Da4emcVgCcfxwscmYUYA0sJafGB/iaQsXbmxw6Z82wGNAKpexHHvpadSktvA7
XQAM/TAieO+oVat47xExAGuzs3NugAMI4L3HdRsAKSBKZScJrB3igyiVZmRYQNB+
cocxBpvJM0gOYE3yqaqj1aih6gEiYE3EDHEZVFAFyAT9J9qtFs45xsYsufwUSJeH
w3tHdXMnw99PHOKFxZM82LXI0bEZvrr/GWdvneN1jiSnfByheKy1FItFjDHsjGR8
zu1kKEZB4JPND7nausR3N8+BJp0PM6UDy1SxiO3PcnuoehqbNZxzBMGA4VYTIvCI
3U0QQKqVxiIDMbrDU7lcDmN2Ji+VZuy7c4dx8+eZun2K3VLmlYvv8NGFI1uHJBE+
3QlQ71CjxDZmdnYuYWCC1H+OpVSascC0MwHWGoq3v8RUbxBfPjtyzojQqjexAiYw
xNmoP6HhmsqO5CRbMg2kbGAo5nOY7DhYAzYYaSLVSSXCZzy5qSza12TEB6PbMrrn
xTGfMBzPgrEQBCMMBTDGoMUIsTLSrgE4eX6Zucsr/FVRVpsxX/+5yulf54d7bmz/
k/FxMAasxSdppoGUArnCBIrSv0YLDEp+u+S4tlRh7noNTV4mTh7ok8mCGLxY6i49
ZBhlIowxuFiS5JrcI06OnNKrV3DOoVhCyW45WQR8CJkMXj21OI1LGoiANY/S0w4u
FFQV1eGYMqa/6KxstoiimFpoiFMTgxFsRW8NL5bq2hIOwSa9JgwV7sZLuFBYCe8j
TghckHgQQF3MessROksmX8TpTu198x7VWg/nHRalYMMhQ1W4E97ChYKLFdsJHnKy
Kq1IiFNT9JzBK/htSnkH1coDXKeH9SFTQYjZJqV6oRJVibuGWnkTYjPqZKdC3Wfp
xkKl7XEONPkbUirN2GpocO0yNuxSDFoYHz+01rDRXYdymkq3ivOMOjnGstFWuqHn
QVtxXlHd5mTnsd0NiraDaW+Ac6Pzc8JqeQ3fM5SjCmE6HnWyj2I6kdANlYWKJ5e2
WNna83oPiqaN6bahfBNJT9DydsgwXcnSCyNiBwt6h3yqgInHthVoN6oblQaPjkGt
rUjUJp+Oa0AING5FxfVmrQqpaWiWacYB83bveqk0Y4DJsZXna5vVgD2TT1ELG6Tr
j5PtHKhuWezNU4XJglxxcbQHBBHu7apcfPk5c6UBdN+K53LT+/b9KBq+KKqE3l69
v7z6xrfBqzEgfxeqE7XJ4h8a1/aCgEzcbXeuH+b0RvNf+XOfI5UewfYAAAAldEVY
dGRhdGU6Y3JlYXRlADIwMTMtMDUtMjlUMDk6NDc6NDItMDU6MDBTDo/DAAAAJXRF
WHRkYXRlOm1vZGlmeQAyMDEzLTA1LTI4VDA2OjE3OjMwLTA1OjAwR0bHqQAAAABJ
RU5ErkJggg==}
},0},
{0},2,3},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{17,
{425,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ПлагиныЗагрузчики",
{1,1,
{"ru","Плагины загрузчики"}
},
{1,1,
{"ru","Плагины загрузчики"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{1,
{0},2},0,1},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{17,
{429,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ПодменюИсторияЗагрузкиТестов",
{1,1,
{"ru","Подменю история загрузки тестов"}
},
{1,1,
{"ru","История загрузки тестов"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{6,
{3,0,
{0},"",-1,-1,1,0},
{0},2,3},0,1},1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаПерезагрузитьТесты",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAlFJREFUeNqkk11Ik2EUx3/Pu3duc35NRefSTMlNM52l
IZIZgaUWtaAPDPGiiygiKoIKUsEu7CLEQJCIPq68ihK6KrsxSoz8QAJFA800rEQt
bbqW27unC7NGjrzw3J0D/8M5/3N+QkrJuiK4gTUPso9CWROU3QKHCwBjxXUemOJJ
DKVVggsBDbxe8CwR5XYTHZNNtNHOJrst+eS+anN9qAHU4EQfIewlu3OuObdZD/j8
Y3qhkxwqliIrIYfS4skzP/yDPG/xnCeAb0UjpJQIRWBJ12XVNJe3FzgDKe6fw/jk
NEKRIMA9r2E0KXT3mWcbq6cz0Pi2soIKYEog8fAF283cgqmU/vFeXr9k9F03Pd7v
LGoS8/GLVOpg7n6N5zQac6oBAv4gI2LSOVjXHicfLxhk1W3GUNgStFmy6wbvEzKp
VFRI3Qu7rkL85mWtkFISHityU/I5FRZO1PxnXn3s4d7Gnegn3+DT/BiAZGC05AoV
tqy4Qs+019N5Z/Hh7Ij8wD9/IACStlJ0oln/Vo3EYC0ASxpEOjCfbdk+PDRRK+ta
M2RkGq4/HgSfNtbOjtqmwjYlkGodqXrWsMGB2/1JmLKd1lKXs8gxNH2XvoGpF0vz
DP69ghDLch1Rl1utw3sKLEn+pQjCw8PQ/BKhghLQ+Ood4Wnn7OyjBo65J+hYPYHE
1/9qpisz78uRmRmYGMer6kAI8AfQBrro7H1C48IkHSFf+XfEll+i7VwbEiP70ZGP
jkJU8oGYVRiEhElgSyumXlGxrMnRf2g0Abq1Goj14vxrAEGh9iL0BPs8AAAAAElF
TkSuQmCC}
},0},1,
{"Pattern"},"",2},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{30,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаВыполнитьВсеТесты",
{1,0},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAhJJREFUeNrUk01rE1EYhc+duZOZSYNtPqgVqmkVpNJF
UQlqNtlpRdBuhIKgC/fiX/AnKCrVjQs34kLQahe1wYUJNUpqWkpUMLa2dtKkmXx0
ksxkPu51IdiKdZWV5wc8vOe85xDOObqRgC7VNYACQDwx1j94rDW+tUFW9FX//Ei8
PVndJGulQk9KIJRRiQPkb6vZbPYXwB9qnbp0NXw70ntQmXm1ODs8IiWiBw6r8+n1
Zx+SjQeVVTUlwOfuBaIAwDj3O64rRwf6levXzl5c3yyh3jBwJj48GTttX84taLOZ
ZP1uuaDOEc9nixQgAt8F8ATesT1umFtwbA8DoX2IBMMo61U0am1x7Hj0/MkYObfw
ce3t+2T9XqUQeMkZNX+H6DHAtjlcl8N2PRimDtPSEOmjGD0yBAgWimVNmBiPJW7e
Ovr0xIQ+RXus/TsXMALDtKC3dHRsFxwAFUTIbgcNQ8OPUg0BVcJ3/QvynyvljU9q
2rOkxi4LBJbN0HYseIxDkRQYTYZ8sQgwhmCfH1rJLD1/Un2o5QJTxOnVRMp2MvAY
iONyIssUhsGwXNDhOC5CQQWVilNNz+mPtCX1PjPC30QJIBL78wuckbbVgb20vO29
mam9GBrFhUODvdLr6e3HWk6+w5qhvEgBKvO9i8RNJZOZbt2wavZXrx5516k1ryzW
3BW3GkyJIgH1sX82kfz/Y/o5APw/CNRIkXZ3AAAAAElFTkSuQmCC}
},0},1,
{"Pattern"},"",2},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{245,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКомандаВыполнитьВыделенныеТесты",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{17,
{126,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ГруппаВнешниеИнструменты",
{1,1,
{"ru","Внешние инструменты"}
},
{1,1,
{"ru","Внешние инструменты"}
},1,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{6,
{3,0,
{0},"",-1,-1,1,0},
{0},2,3},4,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{71,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаГенераторМакетовДанных",
{1,0},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{73,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаПоказатьГУИД",
{1,0},1,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{430,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКонвертерТестов",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{431,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаПреобразоватьЖурналДействийПользователяВТест",
{1,0},1,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2},1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{137,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКомандаПерезагрузитьФорму",
{1,0},1,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{356,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаИзменитьФорму",
{1,0},1,
{0,198ea630-fda2-4cda-8a23-f999f4c67ee6},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2},1},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{17,
{124,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаДеревоТестов",
{1,1,
{"ru","Дерево тестов"}
},
{1,1,
{"ru","Дерево тестов"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{12,0,0,0,0,
{0},
{1,0},
{"Pattern"},""},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{42,
{404,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоТестов",0,0,1,
{1,0},
{1,0},
{1,
{2}
},0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,2,2,1,1,0,0,0,1,2,2,0,1,1,
{1,
{6}
},
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAAHAAAAAQCAYAAADOFPsRAAAACXBIWXMAAA7EAAAO
xAGVKw4bAAAAB3RJTUUH3wkIDgYGUr9hfQAAAAd0RVh0QXV0aG9yAKmuzEgAAAAM
dEVYdERlc2NyaXB0aW9uABMJISMAAAAKdEVYdENvcHlyaWdodACsD8w6AAAADnRF
WHRDcmVhdGlvbiB0aW1lADX3DwkAAAAJdEVYdFNvZnR3YXJlAF1w/zoAAAALdEVY
dERpc2NsYWltZXIAt8C0jwAAAAh0RVh0V2FybmluZwDAG+aHAAAAB3RFWHRTb3Vy
Y2UA9f+D6wAAAAh0RVh0Q29tbWVudAD2zJa/AAAABnRFWHRUaXRsZQCo7tInAAAI
zUlEQVRYhe2Yf1BVZRrHP++558pBsCCoxRW3IdEk0rqU/WBHiUJzGq9ZrmlqjEZr
aq6zme0sTrobVvxhbtaqoWnZFmntbpk40+IUVow46ySIRjpo4g8MkptcucI93HvO
efePy0XuBS7hyuw/+8y8c87zPuf7vuec73me9/seIaVkoC3fmT7qwTnzikqLty0s
LKmpHah5ass/lXUHSmlqOo/nUgstbg93Tckle9YiMVBz/q9NHegJ8p3poyY9nlt0
38OZ2S1NtUX5zvQBI/FExW4emPEkFy80cbH5J5oazlH6901kz1oUEbfhnQ9k8ZFm
9PaAr9k0dFPvjPfkT3fAc/PzxNXAv7mrvN9ZtGjqeAGgHtmUs9MyfA9LywRAKDaE
TT0ydmHZ2P4OGm75zvRRObNmFmU/cmuW1V7HlJmpWdfE2weMxGHp97Bnx1t8f/IU
3rZW9HYf46c/1SfuaH0DKQL0KB1NaOjSjWbX0GXvfl1j3FXDHzvVyOtLZ2BaVp/3
alMUHl28gkVTxwOgWobv4dsWvgN+o+MKG5XrZ4+peiNTChFeeQRCUVDUQcfGPP15
WqSJ8p3po3Jmziy6f9q4LLP1OyEvHbZk9E1iwuTrshDjeySxtXSn9OcvASCusr7f
Za81OZOSSi+bt7wtFhSsl/OmPkDm7Wl9jpOZ4WD2Q/f3a64XXl171fBBW/z21/zY
EsjUaLtK8TN9j6lKywJ/O77aNUgpsA+bTsbC90HpeG4hAg1AAKpK9cbc0d9unnTH
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
WhMgEG/VAAAAAElFTkSuQmCC}
},0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,0,
{0},
{0},1,
{17,
{405,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{1,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{19,
{427,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовКонтекстноеМенюКомандаВыполнитьВыделенныеТесты",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,
{3,0,
{0},"",-1,-1,1,0},1,
{"Pattern"},"",2},1},1,
{17,
{406,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоТестовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,0},0,1},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{30,
{411,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ДеревоТестовСостояние",0,0,
{1,0},
{1,0},
{2,
{2},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{6,3,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{7,0,0,1,1,
{3,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAAFAAAAAQCAYAAACBSfjBAAAABGdBTUEAALGPC/xh
BQAAAAlwSFlzAAALEwAACxMBAJqcGAAABCRpVFh0WE1MOmNvbS5hZG9iZS54bXAA
AAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9
IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8v
d3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJk
ZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlm
Zj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHht
bG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAg
ICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8i
CiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAv
MS4wLyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVz
b2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6
Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjcyPC90aWZm
OlhSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZm
Ok9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlm
ZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjgw
PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFj
ZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWURpbWVu
c2lvbj4xNjwvZXhpZjpQaXhlbFlEaW1lbnNpb24+CiAgICAgICAgIDxkYzpzdWJq
ZWN0PgogICAgICAgICAgICA8cmRmOkJhZy8+CiAgICAgICAgIDwvZGM6c3ViamVj
dD4KICAgICAgICAgPHhtcDpNb2RpZnlEYXRlPjIwMTU6MTI6MDkgMTc6MTI6Njk8
L3htcDpNb2RpZnlEYXRlPgogICAgICAgICA8eG1wOkNyZWF0b3JUb29sPlBpeGVs
bWF0b3IgMy40LjE8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgPC9yZGY6RGVzY3Jp
cHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CqWJ7IkAAAP8SURBVFgJ
7VZtaFtVGH5PbpKb5mPNGiNttU3ZJOvG3KQy5hRZOxFtnGNSOmT7N9DdbsiYlDnm
b//IqCDMloF//OGPaUGGRodoN9msblWodm0XV+lW0u7DuSQ3N7n33OTenXPqHUm8
yW4iioMcuDzneXOe97zn4T2HANRH3YG6A3UH/h8O4COv7lV2b40rwvaoWUWK0BtV
dj8bx0d27TX7vRY9MktEY7FYbBh0XdDJnC1CaCQcDg+UW18ajxyDYU0DQSMJbCSB
zQYj0UGwrNfPrif75wWAvypA3AjaOlVRn3utN64/1nleuzTZBW53jB/5PGLURc2D
TDbsWBX6WZ2+8gx/8vwjxm8G1qK3GeJCpOaRMwturxc8Ph9QJMcQmKmFC8vMqXkt
Ab9wcOcgvNV/FChSTuNlJEVh/eyGYXAEBXj0DYC2QWBoDwosXrSymOQ5bhLNz3Wh
9RvHQVGbU/v7WScqh/ZEKbevCo2rsd+7oGnFZLFymdWiN+3AWOyy7vH6IC1JpAl1
QAiB1+MBKS1COLzGVFNYUO+7oB/Y+TrE/vgKcF4GJ+eC8EMvwvHPTsCXh5cbunB9
6Vw/s06HtgMAiZ8ANEza1wngfxJg4Tig7umK++cO9UeRqjbrHasvZmfnNtndWgvS
+CV7qG0Cz8xEOKT9wn94+l5nlu5drd60A2lSVc2x24PoeUn7MV66WxlOPIe4NAZJ
fA0y6k2GlNO45YHnyduRBuCIgRQptzDs730SwZr9Op69sol/fM0M1x76Dvv9U9Kl
y9uxd+VCJfNo+mr1ZQ2kyXiXC3ieZ0i51UHfvIT8G3hccO+jnMatDbIQiQDuAPma
lpHy+zcvS9/wwaeR5J1kS3bpFpZupLCalR0ZUUL+9z/eYmX/avSmBsbji6P5nApO
h4MZSJFyGrdSgJKE0V+nAJzk5pGbz5ByGreiv3ozPwrJaQCXb9k8ioSzuIUEs91b
hrU8v5S6neDE2wk7yLkFWdL+vLrn5Y8syKEafbmeaB8bGxtqbW3tMzZcXFwc7enp
eZPwa0asArY/9zYM8Y3QR68teUKZed+8A5b18yc7h0IPc33s3pME1LyOXbP31dPD
43Rms7ej+XtFTD6tpDItOI+W5EAjBFSFFxPyuacmJveVq71afTkDaf528gULNrpF
5lbMMyT/uX5ic9cJDivbgHOcyqpqt9vt+/GJ8R8GmCkpqSOT06ZEOftKMBD8msaN
Qg2sRV/JQCPvA4MX1q6+bmvwnJIVdZt3RWORSdTEbDL1fFpWv81g/NILc/N/+x9Y
i970DXxgHCspVG9wDoliaofL23C6tMM6z4wPIN79BQ/5HU0rfcdKpIz+U71Zznqs
7sC/68BdS71tH9LcEKQAAAAASUVORK5CYII=}
},0},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0}
},
{0},1,
{17,
{412,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовСостояниеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{1,1},0,1},1,
{"Pattern"},
{"Pattern"},"","",
{0},0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{30,
{414,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовИмя",1,0,
{1,0},
{1,0},
{2,
{2},
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{6,3,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{26,
{1,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},1,
{3,0,0},0},
{0},1,
{17,
{415,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{1,1},0,1},1,
{"Pattern"},
{"Pattern"},"","",
{0},0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{30,
{408,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовКоличествоТестов",1,0,
{1,1,
{"ru","Кол-во"}
},
{1,0},
{2,
{2},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{6,3,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{26,
{1,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},1,
{3,0,0},0},
{0},1,
{17,
{409,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовКоличествоТестовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{1,1},0,1},1,
{"Pattern"},
{"Pattern"},"","",
{0},0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{30,
{417,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовВремяВыполнения",1,0,
{1,0},
{1,0},
{2,
{2},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{6,3,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{26,
{1,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},1,
{3,0,0},0},
{0},1,
{17,
{418,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовВремяВыполненияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{1,1},0,1},1,
{"Pattern"},
{"Pattern"},"","",
{0},0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{30,
{420,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовПуть",1,0,
{1,0},
{1,0},
{2,
{2},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{6,3,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{26,
{1,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{3,0,
{0},"",-1,-1,1,0},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},1,
{3,0,0},0},
{0},1,
{17,
{421,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовПутьКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{1,1},0,1},1,
{"Pattern"},
{"Pattern"},"","",
{0},0},2,2,1,0,
{"Pattern"},"","",2,2},1},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{30,
{129,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ИндикаторВыполнения",0,0,
{1,0},
{1,0},
{1,
{16}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{3,0,
{0},"",-1,-1,1,0},
{3,0,
{0},"",-1,-1,1,0},
{3,4,
{0}
},
{6,3,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{3,32,1,1,0,0,100,0,0,1,
{3,4,
{0}
}
},
{0},1,
{17,
{130,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ИндикаторВыполненияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{1,1},0,1},1,
{"Pattern"},
{"Pattern"},"","",
{0},0},"","",1,
{17,
{0},0,0,1,
{0,
{0,
{"B",1},0}
},7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем КэшФормПлагинов;
&НаКлиенте
Перем ПодключенныеВнешниеОбработки;

// { События формы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	
	ОбновитьКомандыИсторииЗагрузкиТестов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	ЗагрузитьПлагины();
	КэшироватьПеречисленияПлагинов();
	СброситьПодключенныеВнешниеОбработки();
	
	ЭтоПакетныйЗапуск = ЗначениеЗаполнено(ПараметрЗапуска);
	Если ЭтоПакетныйЗапуск Тогда
		ВыполнитьПакетныйЗапуск(ПараметрЗапуска);
	Иначе
		ПерезагрузитьПоследниеТестыПоИстории();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	ЭтотОбъектНаСервере().СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеВыполненияТестов(Знач ИмяСобытия, Знач Параметр) Экспорт
     Если ИмяСобытия = Объект.ВозможныеСобытия.ВыполненТестовыйМетод Тогда
		 Если Параметр.Состояние = Объект.СостоянияТестов.НеРеализован Тогда
			 Если Элементы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
				 Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
			 КонецЕсли;
		 ИначеЕсли Параметр.Состояние = Объект.СостоянияТестов.Сломан Тогда
			 Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		 КонецЕсли;
		 ИндикаторВыполнения = ИндикаторВыполнения + 1;
	 КонецЕсли;
	 ОбновитьОтображениеДанных();
КонецПроцедуры
// } События формы

// { Управляющие воздействия пользователя
&НаКлиенте
Процедура ЗагрузитьТестыПоУмолчанию(Команда)
	ЗагрузчикПоУмолчанию = ЗагрузчикПоУмолчанию();
	ИдентификаторЗагрузчикаПоУмолчанию = ЗагрузчикПоУмолчанию.ОписаниеПлагина(Объект.ТипыПлагинов).Идентификатор;
	Подключаемый_ИнтерактивныйВызовЗагрузчика(Новый Структура(""Имя"", ИдентификаторЗагрузчикаПоУмолчанию));
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)
	ВыполнитьТестыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестыНаКлиенте(Знач Фильтр = Неопределено)
	Если ЗначениеЗаполнено(ЭтаФорма.ДеревоОтЗагрузчика) Тогда
		ОчиститьСообщения();
		
		КоличествоТестовыхМетодов = ПолучитьКоличествоТестовыхМетодов(ЭтаФорма.ДеревоОтЗагрузчика, Фильтр);
		ИнициализироватьИндикаторВыполнения(КоличествоТестовыхМетодов);
		
		СброситьПодключенныеВнешниеОбработки();
		РезультатыТестирования = ВыполнитьТесты(Плагин(ИдентификаторЗагрузчика), ЭтаФорма.ДеревоОтЗагрузчика, Фильтр, ЭтаФорма);
		
		ОбновитьДеревоТестовНаОснованииРезультатовТестирования(ДеревоТестов.ПолучитьЭлементы()[0], РезультатыТестирования);
		
		ГенераторОтчетаMXL = Плагин(""ГенераторОтчетаMXL"");
		Отчет = ГенераторОтчетаMXL.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);
		ГенераторОтчетаMXL.Показать(Отчет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТесты(Команда)
	Фильтр = Новый Массив;
	ВыделенныеСтроки = Элементы.ДеревоТестов.ВыделенныеСтроки;
	Для каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = ДеревоТестов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Фильтр.Добавить(Новый УникальныйИдентификатор(ВыделеннаяСтрока.Ключ));
	КонецЦикла;
	Если Фильтр.Количество() > 0 Тогда
		ВыполнитьТестыНаКлиенте(Фильтр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьФорму(Команда)
	Закрыть();
	
	АдресХранилища = """";
	ПоместитьФайл(АдресХранилища, ЭтаФорма.ИспользуемоеИмяФайла, , Ложь);
	ПодключитьФайлОбработкиНаСервере(АдресХранилища, Неопределено);
	
	НоваяФорма = ПолучитьФорму(ЭтаФорма.ИмяФормы,,,Истина);
	НоваяФорма.ИспользуемоеИмяФайла = ЭтаФорма.ИспользуемоеИмяФайла;
	НоваяФорма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьПоследниеТестыПоИстории(Команда = Неопределено)
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	Если ИсторияЗагрузкиТестов.Количество() > 0 Тогда
		ЭлементИстории = ИсторияЗагрузкиТестов[0];
		Попытка
			ЗагрузитьТесты(ЭлементИстории.ИдентификаторЗагрузчика, ЭлементИстории.Путь);
		Исключение
			// TODO
			Сообщить(""Не удалось загрузить тесты из истории <"" + ЭлементИстории.ИдентификаторЗагрузчика + "": "" + ЭлементИстории.Путь + "">"" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГенераторМакетовДанных(Команда)
	ОткрытьИнструмент(""СериализаторMXL"", ПолучитьПутьКПлагинам());
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГУИД(Команда)
	ОткрытьИнструмент(""xddGuidShow"");
КонецПроцедуры

&НаКлиенте
Процедура КонвертерТестов(Команда)
	ОткрытьИнструмент(""xddTestsConvertIntoRebornFormat"");
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьЖурналДействийПользователяВТест(Команда)
	ОткрытьИнструмент(""UILogToScript"");
КонецПроцедуры
// } Управляющие воздействия пользователя

// { Плагины
&НаКлиенте
Процедура ЗагрузитьПлагины()
	Объект.Плагины = Новый Структура;
	КэшФормПлагинов = Новый Структура;
	
	КаталогПлагинов = ПолучитьПутьКПлагинам();
	НайденныеФайлы = НайтиФайлы(КаталогПлагинов, ""*.epf"", Ложь);
	ПомещаемыеФайлы = Новый Массив;
	ИдентификаторыПлагинов = Новый Соответствие;
	Для каждого ФайлОбработки Из НайденныеФайлы Цикл
		
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ФайлОбработки.ПолноеИмя);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
		ИдентификаторыПлагинов.Вставить(ФайлОбработки.ПолноеИмя, ИмяПлагина);
		
	КонецЦикла;
	
	ЗагруженныеФайлы = Новый Массив;
	Если ПомещаемыеФайлы.Количество() Тогда
		ПоместитьФайлы(ПомещаемыеФайлы, ЗагруженныеФайлы,,Ложь, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	ОписанияПлагинов = ПодключитьПлагиныНаСервере(ЗагруженныеФайлы);
	
	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		ИмяПлагина = ИдентификаторыПлагинов[ЗагруженныйФайл.Имя];
		
		ОписаниеПлагина = ОписанияПлагинов[ЗагруженныйФайл.Имя];
		Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);
		КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, Истина);
		
	КонецЦикла;
	
	ДобавитьКомандыЗагрузчиковНаФорме();
	
КонецПроцедуры

&НаСервере
Функция ПодключитьПлагиныНаСервере(Знач ЗагружаемыеФайлы)

	ОписанияПлагинов = Новый Соответствие;
	
	Для Каждого ОписаниеФайла Из ЗагружаемыеФайлы Цикл
		ФайлОбъект = Новый Файл(ОписаниеФайла.Имя);
		ИмяПлагина = ФайлОбъект.ИмяБезРасширения;
		ПодключитьФайлОбработкиНаСервере(ОписаниеФайла.Хранение, ИмяПлагина);
		
		Попытка
			ОбъектОбработки = ВнешниеОбработки.Создать(ИмяПлагина, Ложь);
			ОбъектОбработки.Инициализация(ЭтотОбъектНаСервере());
			ОписанияПлагинов.Вставить(ОписаниеФайла.Имя, ОбъектОбработки.ОписаниеПлагина(Объект.ТипыПлагинов));
		Исключение
			Ошибка = ""Возникла ошибка при загрузке плагина: ""+ОписаниеФайла.Имя + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщить(Ошибка);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ОписанияПлагинов);

КонецФункции // ПодключитьПлагиныНаСервере()

&НаКлиенте
Процедура КэшироватьПеречисленияПлагинов()
	Объект.ТипыУзловДереваТестов = Плагин(""ПостроительДереваТестов"").Объект.ТипыУзловДереваТестов;
КонецПроцедуры

&НаКлиенте
Функция Плагин(Знач Идентификатор) Экспорт
	
	ОбъектПлагин = КэшФормПлагинов[Идентификатор];
	Если ОбъектПлагин = Неопределено Тогда
		ВызватьИсключение НСтр(""ru = 'Неизвестный идентификатор плагина: <""+Идентификатор+"">'"");
	ИначеЕсли ОбъектПлагин = Истина Тогда
		// загрузка клиентского плагина ""По требованию""
		ИмяПлагина = Объект.Плагины[Идентификатор];
		Попытка
			ОбъектПлагин = ПолучитьФорму(""ВнешняяОбработка."" + ИмяПлагина + "".Форма"", , ЭтаФорма);
			КэшФормПлагинов.Вставить(Идентификатор, ОбъектПлагин);
		Исключение
			// TODO добавить поведение при отсутствии управляемой формы у плагина
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;
	
	Возврат ОбъектПлагин;
КонецФункции

&НаСервере
Процедура ДобавитьКомандыЗагрузчиковНаФорме()
	ОписанияЗагрузчиков = ПолучитьОписанияЗагрузчиковНаСервере();
	Для каждого Описание Из ОписанияЗагрузчиков Цикл
		Команда = ЭтаФорма.Команды.Добавить(Описание.Идентификатор);
		Команда.Действие = ""Подключаемый_ИнтерактивныйВызовЗагрузчика"";
		ПунктМеню = ЭтаФорма.Элементы.Добавить(Команда.Имя, Тип(""КнопкаФормы""), ЭтаФорма.Элементы.ПлагиныЗагрузчики);
		ПунктМеню.Заголовок = Описание.Представление;
		ПунктМеню.ИмяКоманды = Команда.Имя;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписанияПлагиновПоТипу(Знач ТипПлагина) Экспорт
	Результат = ПолучитьОписанияПлагиновПоТипуНаСервере(ТипПлагина);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьОписанияПлагиновПоТипуНаСервере(Знач ТипПлагина)
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	Результат = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ТипПлагина);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьОписанияЗагрузчиковНаСервере()
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	ОписанияЗагрузчиков = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ОбъектНаСервере.ТипыПлагинов.Загрузчик);
	
	Возврат ОписанияЗагрузчиков;
КонецФункции

&НаКлиенте
Функция ЗагрузчикПоУмолчанию() Экспорт
	Возврат Плагин(""ЗагрузчикКаталога"");
КонецФункции
// } Плагины

// { Работа с деревом тестов
&НаКлиенте
Процедура Подключаемый_ИнтерактивныйВызовЗагрузчика(Команда)
	ИдентификаторВыбранногоЗагрузчика = Команда.Имя;
	Путь = Плагин(ИдентификаторВыбранногоЗагрузчика).ВыбратьПутьИнтерактивно();
	Если ЗначениеЗаполнено(Путь) Тогда
		ЗагрузитьТесты(ИдентификаторВыбранногоЗагрузчика, Путь);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьТесты(Знач ИдентификаторВыбранногоЗагрузчика, Знач Путь)
	ИнициализироватьИндикаторВыполнения();
	
	ЭтаФорма.ИдентификаторЗагрузчика = ИдентификаторВыбранногоЗагрузчика;
	ФормаЗагрузчика = Плагин(ИдентификаторВыбранногоЗагрузчика);
	
	Попытка
		ЭтаФорма.ДеревоОтЗагрузчика = ФормаЗагрузчика.Загрузить(ЭтаФорма, Путь);
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ЭлементыДереваТестов = ЭтаФорма.ДеревоТестов.ПолучитьЭлементы();
	ЭлементыДереваТестов.Очистить();
	ЗаполнитьДеревоТестов(ЭтаФорма.ДеревоТестов, ДеревоОтЗагрузчика);
	
	КоличествоТестовыхСлучаев = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ЭтаФорма.ДеревоТестов);
	РазвернутьСтрокиДерева(КоличествоТестовыхСлучаев < 30);
	
	СохранитьВИсториюЗагрузкиТестовНаСервере(ИдентификаторВыбранногоЗагрузчика, Путь);
	ОбновитьКомандыИсторииЗагрузкиТестов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоТестов(РодительскаяСтрокаДереваТестов, Знач КонтейнерДереваТестовЗагрузчика)
	СтрокаКонтейнера = РодительскаяСтрокаДереваТестов.ПолучитьЭлементы().Добавить();
	СтрокаКонтейнера.Имя = КонтейнерДереваТестовЗагрузчика.Имя;
	СтрокаКонтейнера.ИконкаУзла = КонтейнерДереваТестовЗагрузчика.ИконкаУзла;
	СтрокаКонтейнера.Ключ = КонтейнерДереваТестовЗагрузчика.Ключ;
	
	Для каждого ЭлементКоллекции Из КонтейнерДереваТестовЗагрузчика.Строки Цикл
		Если ЭлементКоллекции.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
			ЗаполнитьДеревоТестов(СтрокаКонтейнера, ЭлементКоллекции);
		ИначеЕсли ЭлементКоллекции.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
			СтрокаЭлемента = СтрокаКонтейнера.ПолучитьЭлементы().Добавить();
			СтрокаЭлемента.Имя = ЭлементКоллекции.Представление;
			СтрокаЭлемента.Путь = ЭлементКоллекции.Путь;
			СтрокаЭлемента.ИконкаУзла = ЭлементКоллекции.ИконкаУзла;
			СтрокаЭлемента.Ключ = ЭлементКоллекции.Ключ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если КоллекцияСтрок.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	ОбщееКоличествоТестов = 0;
	Для каждого СтрокаДерева из КоллекцияСтрок Цикл
		КоличествоТестовВСтроке = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = КоличествоТестовВСтроке;
		ОбщееКоличествоТестов = ОбщееКоличествоТестов + КоличествоТестовВСтроке;
	КонецЦикла;
	
	Возврат ОбщееКоличествоТестов;
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокиДерева(Знач ВключаяПодчиненные = Ложь)
	Для каждого СтрокаДерева из ДеревоТестов.ПолучитьЭлементы() Цикл
		Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоТестов.Развернуть(Идентификатор, ВключаяПодчиненные);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоТестовНаОснованииРезультатовТестирования(УзелДереваТестов, Знач РезультатТестирования)
	УзелДереваТестов.Состояние = РезультатТестирования.Состояние;
	УзелДереваТестов.ВремяВыполнения = РезультатТестирования.ВремяВыполнения;
	Если РезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
		Для каждого ДочернийРезультатТестирования Из РезультатТестирования.Строки Цикл
			ДочернийУзелДереваТестов = НайтиСтрокуВДеревеТестовПоКлючу(УзелДереваТестов, ДочернийРезультатТестирования.Ключ);
			ОбновитьДеревоТестовНаОснованииРезультатовТестирования(ДочернийУзелДереваТестов, ДочернийРезультатТестирования);
		КонецЦикла;
	ИначеЕсли РезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
		Если РезультатТестирования.Свойство(""Сообщение"") И ЗначениеЗаполнено(РезультатТестирования.Сообщение) Тогда
			Сообщить(РезультатТестирования.Сообщение, СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуВДеревеТестовПоКлючу(УзелДереваТестов, Знач Ключ)
	Результат = Неопределено;
	Для каждого ЭлементКоллекции Из УзелДереваТестов.ПолучитьЭлементы() Цикл
		Если ЭлементКоллекции.Ключ = Ключ Тогда
			Результат = ЭлементКоллекции;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
// } Работа с деревом тестов

// { Выполнение тестов
&НаКлиенте
Функция ПолучитьКоличествоТестовыхМетодов(Знач КонтейнерДереваТестов, Знач Фильтр = Неопределено) Экспорт
	Возврат ПолучитьКоличествоТестовыхМетодовНаСервере(КонтейнерДереваТестов, Фильтр);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоТестовыхМетодовНаСервере(Знач КонтейнерДереваТестов, Знач Фильтр)
	Возврат ЭтотОбъектНаСервере().ПолучитьКоличествоТестовыхМетодов(КонтейнерДереваТестов, Фильтр);
КонецФункции

&НаКлиенте
Функция ВыполнитьТесты(Знач Загрузчик, Знач КонтейнерДереваТестов, Знач Фильтр = Неопределено, Знач Подписчик = Неопределено) Экспорт
	РезультатТестирования = СоздатьКонтейнерРезультатовТестирования(КонтейнерДереваТестов);
	ФильтрДляДочернихУзлов = Неопределено;
	Если Не УзелДереваТестовУдовлетворяетФильтру(КонтейнерДереваТестов, Фильтр) Тогда
		ФильтрДляДочернихУзлов = Фильтр;
	КонецЕсли;
	
	Если КонтейнерДереваТестов.СлучайныйПорядокВыполнения Тогда
		СтрокиКонтейнера = ПеремешатьМассив(КонтейнерДереваТестов.Строки);
	Иначе
		СтрокиКонтейнера = КонтейнерДереваТестов.Строки;
	КонецЕсли;
	
	Для каждого ДочернийУзел Из СтрокиКонтейнера Цикл
		ДочернийРезультатТестирования = Неопределено;
		Если ДочернийУзел.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
			ДочернийРезультатТестирования = ВыполнитьТесты(Загрузчик, ДочернийУзел, ФильтрДляДочернихУзлов, Подписчик);
		ИначеЕсли ДочернийУзел.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
			Если УзелДереваТестовУдовлетворяетФильтру(ДочернийУзел, ФильтрДляДочернихУзлов) Тогда
				КонтекстВыполнения = ПолучитьКонтекстВыполненияПоПути(Загрузчик, ДочернийУзел.Путь);
				Объект.ТекущийКонтейнер = КонтейнерДереваТестов;
				ДочернийРезультатТестирования = ВыполнитьТестовыйМетод(КонтекстВыполнения, ДочернийУзел);
				КонтейнерДереваТестов.Контекст = Объект.ТекущийКонтейнер.Контекст;
				
				Если Подписчик <> Неопределено Тогда
					ОповеститьОСобытии(Подписчик, Объект.ВозможныеСобытия.ВыполненТестовыйМетод, ДочернийРезультатТестирования);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ДочернийРезультатТестирования <> Неопределено Тогда
			РезультатТестирования.Строки.Добавить(ДочернийРезультатТестирования);
			РезультатТестирования.Состояние = ВыбратьХудшееСостояниеВыполненияТестов(РезультатТестирования.Состояние, ДочернийРезультатТестирования.Состояние);
			ЗаполнитьДанныеСтатистики(РезультатТестирования, ДочернийРезультатТестирования);
			Если Не КонтейнерДереваТестов.СлучайныйПорядокВыполнения И ДочернийРезультатТестирования.Состояние <> Объект.СостоянияТестов.Пройден Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если РезультатТестирования.Строки.Количество() = 0 Тогда
		РезультатТестирования = Неопределено;
	КонецЕсли;
	
	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Функция УзелДереваТестовУдовлетворяетФильтру(Знач УзелДереваТестов, Знач Фильтр)
	Возврат (Фильтр = Неопределено) Или (Фильтр.Найти(УзелДереваТестов.Ключ) <> Неопределено);
КонецФункции

&НаКлиенте
Функция ПолучитьКонтекстВыполненияПоПути(Знач Загрузчик, Знач Путь)
	КонтекстВыполнения = Загрузчик.ПолучитьКонтекстПоПути(ЭтаФорма, Путь);
	
	Возврат КонтекстВыполнения;
КонецФункции

&НаКлиенте
Функция ЭтоСерверныйКонтекстВыполнения(Знач КонтекстВыполнения)
	Результат = ТипЗнч(КонтекстВыполнения) = Тип(""ФиксированнаяСтруктура"");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеСтатистики(РезультатТестирования, Знач ДочернийРезультатТестирования)
	Если ДочернийРезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
		РезультатТестирования.КоличествоТестов = РезультатТестирования.КоличествоТестов + ДочернийРезультатТестирования.КоличествоТестов;
		РезультатТестирования.КоличествоСломанныхТестов = РезультатТестирования.КоличествоСломанныхТестов + ДочернийРезультатТестирования.КоличествоСломанныхТестов;
		РезультатТестирования.КоличествоНеРеализованныхТестов = РезультатТестирования.КоличествоНеРеализованныхТестов + ДочернийРезультатТестирования.КоличествоНеРеализованныхТестов;
		РезультатТестирования.КоличествоОшибочныхТестов = РезультатТестирования.КоличествоОшибочныхТестов + ДочернийРезультатТестирования.КоличествоОшибочныхТестов;
		
	ИначеЕсли ДочернийРезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
		РезультатТестирования.КоличествоТестов = РезультатТестирования.КоличествоТестов + 1;
		Если ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан Тогда
			РезультатТестирования.КоличествоСломанныхТестов = РезультатТестирования.КоличествоСломанныхТестов + 1;
		ИначеЕсли ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован Тогда
			РезультатТестирования.КоличествоНеРеализованныхТестов = РезультатТестирования.КоличествоНеРеализованныхТестов + 1;
		ИначеЕсли ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка Тогда
			РезультатТестирования.КоличествоОшибочныхТестов = РезультатТестирования.КоличествоОшибочныхТестов + 1;
		КонецЕсли;
	КонецЕсли;
	РезультатТестирования.ВремяВыполнения = РезультатТестирования.ВремяВыполнения + ДочернийРезультатТестирования.ВремяВыполнения;
КонецПроцедуры

&НаКлиенте
Функция ВыбратьХудшееСостояниеВыполненияТестов(Знач Состояние1, Знач Состояние2)
	Возврат Макс(Состояние1, Состояние2);
КонецФункции

&НаКлиенте
Функция ВыполнитьТестовыйМетод(Знач КонтекстВыполнения, Знач ЭлементДереваТестов)
	Перем РезультатТестирования;
	
	Если ЭтоСерверныйКонтекстВыполнения(КонтекстВыполнения) Тогда
		РезультатТестирования = ВыделитьТестовыйМетодНаСервереСОбработкойОшибокПередачиМеждуНаКлиентомИСервером(КонтекстВыполнения, ЭлементДереваТестов);
	Иначе
		РезультатТестирования = ВыполнитьТестовыйМетодНаКлиенте(КонтекстВыполнения, ЭлементДереваТестов);
	КонецЕсли;
	
	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Функция ВыполнитьТестовыйМетодНаКлиенте(Знач КонтекстВыполнения, Знач ЭлементДереваТестов) Экспорт
	
	РезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);
	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ВыполнитьИнициализациюКонтекста(КонтекстВыполнения, РезультатТестирования) Тогда
	
		Попытка
			ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(КонтекстВыполнения, ЭлементДереваТестов.ПередЗапускомТеста);
			ВыполнитьПроцедуруКонтекста(КонтекстВыполнения, ЭлементДереваТестов.ИмяМетода, ЭлементДереваТестов.Параметры);
			
			РезультатТестирования.Состояние = Объект.СостоянияТестов.Пройден;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Если ЕстьОшибка_МетодОбъектаНеОбнаружен(КраткийТекстОшибки, ЭлементДереваТестов.ИмяМетода) Тогда
				РезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован;
				Сообщение = НСтр(""ru = 'Отсутствует реализация тестового метода (%1).'"");
				РезультатТестирования.Сообщение = СтрЗаменить(Сообщение, ""%1"", ЭлементДереваТестов.ИмяМетода);
			Иначе
				РезультатТестирования.Сообщение = ТекстОшибки;
				Если ЭтоОшибкаПроверки(КраткийТекстОшибки) Тогда
					РезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан;
				ИначеЕсли ЭтоПропущенныйТест(КраткийТекстОшибки) Тогда
					РезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован;
				Иначе
					РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
				КонецЕсли;
			КонецЕсли;
		КонецПопытки;
		Попытка
			ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(КонтекстВыполнения, ЭлементДереваТестов.ПослеЗапускаТеста);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			РезультатТестирования.Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Если ЭтоОшибкаПроверки(КраткийТекстОшибки) Тогда
				РезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан;
			Иначе
				РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;
	
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатТестирования.ВремяВыполнения = (ОкончаниеВыполнения - НачалоВыполнения) / 1000;
	
	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Функция ВыполнитьИнициализациюКонтекста(КонтекстВыполнения, РезультатТестирования)
	Попытка
		КонтекстВыполнения.Инициализация(ЭтаФорма);
		Возврат Истина;
	Исключение
		РезультатТестирования.Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
	КонецПопытки;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ВыделитьТестовыйМетодНаСервереСОбработкойОшибокПередачиМеждуНаКлиентомИСервером(Знач КонтекстВыполнения, Знач ЭлементДереваТестов)
	
	Перем ПолныйТекстОшибки, РезультатТестирования;
	
	Попытка
		РезультатТестирования = ВыполнитьТестовыйМетодНаСервере(КонтекстВыполнения, ЭлементДереваТестов);
	Исключение
		ПолныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);
		РезультатТестирования.Сообщение = ПолныйТекстОшибки;
		РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
	КонецПопытки;

	Возврат РезультатТестирования;
КонецФункции

&НаСервере
Функция ВыполнитьТестовыйМетодНаСервере(Знач ОписаниеКонтекста, Знач ЭлементДереваТестов)
	ОбъектНаСервере = ЭтотОбъектНаСервере();
	
	Если ОписаниеКонтекста.ЭтоВнутренняяОбработка Тогда
		КонтекстВыполнения = Обработки[ОписаниеКонтекста.Идентификатор].Создать();
	Иначе
		КонтекстВыполнения = ВнешниеОбработки.Создать(ОписаниеКонтекста.Идентификатор, Ложь);
	КонецЕсли;
	КонтекстВыполнения.Инициализация(ОбъектНаСервере);
	
	РезультатТестирования = ОбъектНаСервере.ВыполнитьТестовыйМетод(КонтекстВыполнения, ЭлементДереваТестов);
	
	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Процедура ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Знач КонтекстВыполнения, Знач ИмяПроцедуры)
	Попытка
		ВыполнитьПроцедуруКонтекста(КонтекстВыполнения, ИмяПроцедуры);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяПроцедуры) Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруКонтекста(Знач КонтекстВыполнения, Знач ПроцедураКонтекста, Знач Параметры = Неопределено)
	СтрокаПараметров = СформироватьСтрокуПараметров(Параметры);
	ИcполняемыйКод = ""КонтекстВыполнения."" + ПроцедураКонтекста + ""("" + СтрокаПараметров + "");"";
	Выполнить(ИcполняемыйКод);
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтрокуПараметров(Знач Параметры)
	СтрокаПараметров = """";
	Если ТипЗнч(Параметры) = Тип(""Массив"") Тогда
		Для Сч = 0 По Параметры.Количество() - 1 Цикл
			СтрокаПараметров = СтрокаПараметров + "",Параметры["" + Формат(Сч, ""ЧН=0; ЧГ="") + ""]"";
		КонецЦикла;
	КонецЕсли;
	
	Возврат Сред(СтрокаПараметров, 2);
КонецФункции

&НаКлиенте
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(Знач ТекстОшибки, Знач ИмяМетода)
	Результат = Ложь;
	Если Найти(ТекстОшибки, ""Метод объекта не обнаружен ("" + ИмяМетода + "")"") > 0 
		ИЛИ Найти(ТекстОшибки, ""Object method not found ("" + ИмяМетода + "")"") > 0  Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЭтоОшибкаПроверки(ТекстОшибки)
	
	Возврат Найти(ТекстОшибки, ""[""+ Объект.СтатусыРезультатаТестирования.ОшибкаПроверки + ""]"") = 1;
	
КонецФункции

Функция ЭтоПропущенныйТест(ТекстОшибки)
	
	Возврат Найти(ТекстОшибки, ""[""+ Объект.СтатусыРезультатаТестирования.ТестПропущен + ""]"") > 0;
	
КонецФункции

// } Выполнение тестов

// { Генерация результатов тестирования
&НаКлиенте
Функция СоздатьКонтейнерРезультатовТестирования(Знач КонтейнерДереваТестов)
	ГруппаРезультатовТестирования = Новый Структура;
	ГруппаРезультатовТестирования.Вставить(""Ключ"", КонтейнерДереваТестов.Ключ);
	ГруппаРезультатовТестирования.Вставить(""Тип"", КонтейнерДереваТестов.Тип);
	ГруппаРезультатовТестирования.Вставить(""Имя"", КонтейнерДереваТестов.Имя);
	ГруппаРезультатовТестирования.Вставить(""Состояние"", Объект.СостоянияТестов.НеВыполнен);
	ГруппаРезультатовТестирования.Вставить(""КоличествоТестов"", 0);
	ГруппаРезультатовТестирования.Вставить(""КоличествоСломанныхТестов"", 0);
	ГруппаРезультатовТестирования.Вставить(""КоличествоОшибочныхТестов"", 0);
	ГруппаРезультатовТестирования.Вставить(""КоличествоНеРеализованныхТестов"", 0);
	ГруппаРезультатовТестирования.Вставить(""ВремяВыполнения"", 0);
	ГруппаРезультатовТестирования.Вставить(""Строки"", Новый Массив);
	
	Возврат ГруппаРезультатовТестирования;
КонецФункции

&НаКлиенте
Функция СоздатьЭлементРезультатовТестирования(Знач ЭлементДереваТестов)
	РезультатТестирования = Новый Структура;
	РезультатТестирования.Вставить(""Ключ"", ЭлементДереваТестов.Ключ);
	РезультатТестирования.Вставить(""Тип"", ЭлементДереваТестов.Тип);
	РезультатТестирования.Вставить(""Путь"", ЭлементДереваТестов.Путь);
	РезультатТестирования.Вставить(""ИмяМетода"", ЭлементДереваТестов.ИмяМетода);
	РезультатТестирования.Вставить(""Представление"", ЭлементДереваТестов.Представление);
	РезультатТестирования.Вставить(""Параметры"", ЭлементДереваТестов.Параметры);
	РезультатТестирования.Вставить(""Состояние"", Объект.СостоянияТестов.НеВыполнен);
	РезультатТестирования.Вставить(""ВремяВыполнения"", 0);
	РезультатТестирования.Вставить(""Сообщение"", """");
	
	Возврат РезультатТестирования;
КонецФункции
// } Генерация результатов тестирования

// { История загрузки тестов
&НаСервере
Процедура СохранитьВИсториюЗагрузкиТестовНаСервере(Знач ИдентификаторЗагрузчика, Знач Путь)
	ЭтотОбъектНаСервере = ЭтотОбъектНаСервере();
	ЭтотОбъектНаСервере.СохранитьВИсториюЗагрузкиТестов(ИдентификаторЗагрузчика, Путь);
	ЗначениеВРеквизитФормы(ЭтотОбъектНаСервере, ""Объект"");
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыИсторииЗагрузкиТестов()
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	ПодменюИсторияЗагрузкиТестов = Элементы.ПодменюИсторияЗагрузкиТестов;
	Для Сч = 0 По ИсторияЗагрузкиТестов.Количество() - 1 Цикл
		ИмяКоманды = ""История_"" + Сч;
		НайденнаяКоманда = Команды.Найти(ИмяКоманды);
		Если НайденнаяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = ""Подключаемый_ЗагрузитьТестыИзИстории"";
			ПунктМеню = Элементы.Добавить(НоваяКоманда.Имя, Тип(""КнопкаФормы""), ПодменюИсторияЗагрузкиТестов);
			ПунктМеню.ИмяКоманды = НоваяКоманда.Имя;
		Иначе
			ПунктМеню = Элементы.Найти(ИмяКоманды);
		КонецЕсли;
		ЭлементИстории = ИсторияЗагрузкиТестов[Сч];
		ПунктМеню.Заголовок = ЭлементИстории.ИдентификаторЗагрузчика + "": "" + ЭлементИстории.Путь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьТестыИзИстории(Команда)
	ИндексИстории = Число(Сред(Команда.Имя, Найти(Команда.Имя, ""_"") + 1));
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	ЭлементИстории = ИсторияЗагрузкиТестов[ИндексИстории];
	ЗагрузитьТесты(ЭлементИстории.ИдентификаторЗагрузчика, ЭлементИстории.Путь);
КонецПроцедуры
// } История загрузки тестов

// { Пакетный запуск
&НаКлиенте
Процедура ВыполнитьПакетныйЗапуск(Знач ПараметрЗапуска)
	Перем РезультатыТестирования;
	
	ПарсерКоманднойСтроки = ЭтаФорма.Плагин(""ПарсерКоманднойСтроки"");
	ПараметрыЗапуска = ПарсерКоманднойСтроки.Разобрать(ПараметрЗапуска);
	
	Параметры_xddRun = Неопределено;
	Если ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddRun, Параметры_xddRun) Тогда
		РезультатыТестирования = ЗагрузитьИВыполнитьТесты_ПакетныйРежим(Параметры_xddRun);
	КонецЕсли;
	
	Параметры_xddReport = Неопределено;
	Если ЗначениеЗаполнено(РезультатыТестирования) И ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddReport, Параметры_xddReport) Тогда
		СформироватьОтчетОТестированииИЭкспортировать_ПакетныйРежим(Параметры_xddReport, РезультатыТестирования);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddShutdown) Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьИВыполнитьТесты_ПакетныйРежим(Знач Параметры_xddRun)
	Попытка
		ИдентификаторЗагрузчика = Параметры_xddRun[0];
		Загрузчик = ЭтаФорма.Плагин(ИдентификаторЗагрузчика);
		
		ПутьКТестам = Параметры_xddRun[1];
		ДеревоТестовОтЗагрузчика = Загрузчик.Загрузить(ЭтаФорма, ПутьКТестам);
		
		РезультатыТестирования = ЭтаФорма.ВыполнитьТесты(Загрузчик, ДеревоТестовОтЗагрузчика);
	Исключение
		ОписаниеОшибки = ""Ошибка загрузки и выполнения тестов в пакетном режиме
		|"" + ОписаниеОшибки();
		ЗафиксироватьОшибкуВЖурналеРегистрации(ОписаниеОшибки);
	КонецПопытки;
	
	Возврат РезультатыТестирования;
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетОТестированииИЭкспортировать_ПакетныйРежим(Знач Параметры_xddReport, Знач РезультатыТестирования)
	Попытка
		ИдентификаторГенератораОтчета = Параметры_xddReport[0];
		ГенераторОтчета = ЭтаФорма.Плагин(ИдентификаторГенератораОтчета);
		
		Отчет = ГенераторОтчета.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);
		
		ПутьКОтчету = Параметры_xddReport[1];
		ГенераторОтчета.Экспортировать(Отчет, ПутьКОтчету);
	Исключение
		ОписаниеОшибки = ""Ошибка формирования и экспорта отчета о тестировании в пакетном режиме
		|"" + ОписаниеОшибки();
		ЗафиксироватьОшибкуВЖурналеРегистрации(ОписаниеОшибки);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьОшибкуВЖурналеРегистрации(Знач ОписаниеОшибки)
	ЗаписьЖурналаРегистрации(ЭтотОбъектНаСервере().Метаданные().Имя, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
КонецПроцедуры
// } Пакетный запуск

// { Контекст
&НаКлиенте
Процедура СохранитьКонтекст(Знач Контекст) Экспорт
	Если Объект.ТекущийКонтейнер.СлучайныйПорядокВыполнения Тогда
		ВызватьИсключение Объект.ВозможныеИсключения.СохранятьКонтекстТолькоВСтрогомРежиме;
	КонецЕсли;
	Объект.ТекущийКонтейнер.Контекст = Контекст;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКонтекст() Экспорт
	Если Объект.ТекущийКонтейнер.СлучайныйПорядокВыполнения Тогда
		ВызватьИсключение Объект.ВозможныеИсключения.ПолучатьКонтекстТолькоВСтрогомРежиме;
	КонецЕсли;
	
	Возврат Объект.ТекущийКонтейнер.Контекст;
КонецФункции
// } Контекст

Процедура ВызватьОшибкуПроверки(СообщениеОшибки = """") Экспорт
	
	Префикс = ""[""+ Объект.СтатусыРезультатаТестирования.ОшибкаПроверки + ""]"";
	ВызватьИсключение Префикс + "" "" + СообщениеОшибки;
	
КонецПроцедуры

Процедура ПропуститьТест(Знач Сообщение = """") Экспорт
	
	Префикс = ""["" + Объект.СтатусыРезультатаТестирования.ТестПропущен + ""]"";
	Если ПустаяСтрока(Сообщение) Тогда
		Сообщение = НСтр(""ru = 'Тест пропущен'"");
	КонецЕсли;
	ВызватьИсключение Префикс + "" "" + Сообщение;
	
КонецПроцедуры

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
// 
Функция ВывестиСообщение(ТекстСообщения, Статус=Неопределено) Экспорт	
	
	Сообщить(ТекстСообщения, Статус);
	
КонецФункции

// { Внешние интерфейсные инструменты
&НаКлиенте
Процедура ОткрытьИнструмент(Знач ИмяИнструмента, Знач ПутьИнструмента = """", Знач ИмяФормы = ""Форма"")
	Если Не ПустаяСтрока(ПутьИнструмента) Тогда
		ПутьКВнешнимИнструментам = ПутьИнструмента + ""\"";
	Иначе
		ПутьКВнешнимИнструментам = ПолучитьПутьКВнешнимИнструментам();
	КонецЕсли;
	ПутьИнструмента = ПутьКВнешнимИнструментам + ИмяИнструмента + "".epf"";
	ФайлИнструмента = Новый Файл(ПутьИнструмента);
	Если Не ФайлИнструмента.Существует() Тогда
		Сообщить(""Инструмент <"" + ИмяИнструмента + ""> не найден в каталоге <"" + ФайлИнструмента.Путь + "">"");
		Возврат;
	КонецЕсли;
	АдресХранилища = """";
	ПоместитьФайл(АдресХранилища, ФайлИнструмента.ПолноеИмя, , Ложь);
	ПодключитьФайлОбработкиНаСервере(АдресХранилища, ИмяИнструмента);
	
	ФормаИнструмента = ПолучитьФорму(""ВнешняяОбработка."" + ИмяИнструмента + ""."" + ИмяФормы);
	Если ФормаИнструмента = Неопределено Тогда
		Сообщить(""Инструмент <"" + ИмяИнструмента + "">: не удалось получить основную форму!"");
		Возврат;
	КонецЕсли;
	ФормаИнструмента.Открыть();
	ФормаИнструмента = Неопределено;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьКПлагинам()
	ФайлЯдра = Новый Файл(ЭтаФорма.ИспользуемоеИмяФайла);
	Результат = ФайлЯдра.Путь + ""Plugins\"";
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКВнешнимИнструментам()
	ФайлЯдра = Новый Файл(ЭтаФорма.ИспользуемоеИмяФайла);
	Результат = ФайлЯдра.Путь + ""Utils\"";
	
	Возврат Результат;
КонецФункции
// } Внешние интерфейстные инструменты

// { Helpers
&НаКлиенте
Процедура ПодключитьВнешнююОбработку(ФайлОбработки) Экспорт
	Если ПодключенныеВнешниеОбработки.Получить(ФайлОбработки.ИмяБезРасширения) = Неопределено Тогда
		АдресХранилища = """";
		ПоместитьФайл(АдресХранилища, ФайлОбработки.ПолноеИмя, , Ложь, ЭтаФорма.УникальныйИдентификатор);
		
		ПодключитьФайлОбработкиНаСервере(АдресХранилища, ФайлОбработки.ИмяБезРасширения);
		
		ПодключенныеВнешниеОбработки.Вставить(ФайлОбработки.ИмяБезРасширения, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодключитьФайлОбработкиНаСервере(Знач АдресХранилища, Знач ИдентификаторОбработки)
	ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеКонтекстаВыполнения(Знач Идентификатор, Знач ЭтоВнутренняяОбработка = Ложь) Экспорт
	ОписаниеКонтекстаВыполнения = Новый Структура(""Идентификатор, ЭтоВнутренняяОбработка"", Идентификатор, ЭтоВнутренняяОбработка);
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеКонтекстаВыполнения);
КонецФункции

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

&НаКлиенте
Процедура ИнициализироватьИндикаторВыполнения(Знач КоличествоТестовыхМетодов = 0)
	Элементы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхМетодов;
	ИндикаторВыполнения = 0;
	Элементы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОСобытии(Знач Подписчик, Знач Событие, Знач ПараметрыСобытия)
	Выполнить(""Подписчик.ОбработатьСобытиеВыполненияТестов(Событие, ПараметрыСобытия);"");
КонецПроцедуры

&НаКлиенте
Функция ПеремешатьМассив(Знач ИсходныйМассив) Экспорт
	Результат = Новый Массив;
	Для Каждого Элемент Из ИсходныйМассив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// алгоритм перемешивания взят из книги Кнута ""Искусство программирования"" т.2
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ПоследнийИндекс = Результат.ВГраница();
	Для Индекс = 1 По ПоследнийИндекс Цикл
		ТекущийИндекс = ПоследнийИндекс - Индекс + 1;
		НовыйИндекс = ГСЧ.СлучайноеЧисло(0, ТекущийИндекс);
		Если НовыйИндекс <> ТекущийИндекс Тогда
			Значение = Результат[НовыйИндекс];
			Результат[НовыйИндекс] = Результат[ТекущийИндекс];
			Результат[ТекущийИндекс] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НайтиРезультатТестированияПоИдентификатору(Знач КонтейнерРезультатовТестирования, Знач ИдентификаторТеста, Знач ВключатьПодчиненные = Ложь) Экспорт
	Результат = НайтиРезультатТестированияПоИдентификатору_НаСервере(КонтейнерРезультатовТестирования, ИдентификаторТеста, ВключатьПодчиненные);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиРезультатТестированияПоИдентификатору_НаСервере(Знач КонтейнерРезультатовТестирования, Знач ИдентификаторТеста, Знач ВключатьПодчиненные) Экспорт
	Результат = ЭтотОбъектНаСервере().НайтиРезультатТестированияПоИдентификатору(КонтейнерРезультатовТестирования, ИдентификаторТеста, ВключатьПодчиненные);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СброситьПодключенныеВнешниеОбработки()
	ПодключенныеВнешниеОбработки = Новый Соответствие;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыМетода(Знач Парам1, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено, Знач Парам6 = Неопределено, Знач Парам7 = Неопределено, Знач Парам8 = Неопределено, Знач Парам9 = Неопределено) Экспорт
	ВсеПараметры = Новый Массив;
	ВсеПараметры.Добавить(Парам1);
	ВсеПараметры.Добавить(Парам2);
	ВсеПараметры.Добавить(Парам3);
	ВсеПараметры.Добавить(Парам4);
	ВсеПараметры.Добавить(Парам5);
	ВсеПараметры.Добавить(Парам6);
	ВсеПараметры.Добавить(Парам7);
	ВсеПараметры.Добавить(Парам8);
	ВсеПараметры.Добавить(Парам9);
	
	ИндексСПоследнимПараметром = 0;
	Для Сч = 0 По ВсеПараметры.ВГраница() Цикл
		Индекс = ВсеПараметры.ВГраница() - Сч;
		Если ВсеПараметры[Индекс] <> Неопределено Тогда
			ИндексСПоследнимПараметром = Индекс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыМетода = Новый Массив;
	Для Сч = 0 По ИндексСПоследнимПараметром Цикл
		ПараметрыМетода.Добавить(ВсеПараметры[Сч]);
	КонецЦикла;
	
	Возврат ПараметрыМетода;
КонецФункции

// } Helpers
",
{4,6,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",9176d5a2-441b-4c0a-b8b7-bf86d41bf1d9}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,4,
{1,
{0,07f739b4-709b-41bf-8096-032bddefd0f9}
},
{1,
{0,092b3fc1-7ced-4d20-8a28-79b535f8a9c4}
},
{1,
{0,a2724854-2f5c-4048-b7b2-02cbb9cb7fa3}
},
{1,
{0,e46a4b91-3cc7-4188-b6f0-96c31aa42e19}
}
},1,0,0,0,
{0,0},
{0,0}
},
{9,
{16},0,"ИндикаторВыполнения",
{1,1,
{"ru","Индикатор выполнения"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ДеревоТестов",
{1,1,
{"ru","Дерево тестов"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,7,
{5,1,0,"КоличествоТестов",
{1,1,
{"ru","Количество тестов"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Состояние",
{1,1,
{"ru","Состояние"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ВремяВыполнения",
{1,1,
{"ru","Время выполнения"}
},
{"Pattern",
{"N",10,3,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"Путь",
{1,1,
{"ru","Путь"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ИконкаУзла",
{1,1,
{"ru","Иконка узла"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Ключ",
{1,1,
{"ru","Ключ"}
},
{"Pattern",
{"#",fc01b5df-97fe-449b-83d4-218a090e681e}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{3},0,"ИспользуемоеИмяФайла",
{1,1,
{"ru","Используемое имя файла"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ИдентификаторЗагрузчика",
{1,1,
{"ru","Идентификатор загрузчика"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ДеревоОтЗагрузчика",
{1,1,
{"ru","Дерево от загрузчика"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,1,
{0,"Пути",
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},0}
},
{0,10,
{6,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнитьВсеТесты",
{1,1,
{"ru","Выполнить все тесты (F7)"}
},
{1,1,
{"ru","Команда выполнить все тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,118,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаВыполнитьВсеТесты",2,0,0,
{0,0}
},
{6,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаПерезагрузитьВсеТесты",
{1,1,
{"ru","Перезагрузить"}
},
{1,1,
{"ru","Команда перезагрузить все тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,82,8},
{3,0,
{0},"",-1,-1,1,0},"ПерезагрузитьПоследниеТестыПоИстории",2,0,0,
{0,0}
},
{6,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнитьВыделенныеТесты",
{1,1,
{"ru","Выполнить выделенные (Ctrl+Enter)"}
},
{1,1,
{"ru","Команда выполнить выделенные тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,1,
{0,0ce78048-0196-4f80-a781-9829cdb7f43e},"",-1,-1,1,0},"КомандаВыполнитьВыделенныеТесты",2,0,0,
{0,0}
},
{6,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ГенераторМакетовДанных",
{1,1,
{"ru","Генератор макетов данных"}
},
{1,1,
{"ru","Генератор макетов данных на базе реальных данных"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"ГенераторМакетовДанных",3,0,0,
{0,0}
},
{6,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьГУИД",
{1,1,
{"ru","Показать ГУИД"}
},
{1,1,
{"ru","Показать ГУИД"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"ПоказатьГУИД",3,0,0,
{0,0}
},
{6,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗагрузитьТолькоВыделенныеТесты",
{1,1,
{"ru","Загрузить только выделенные тесты"}
},
{1,1,
{"ru","Команда загрузить только выделенные тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаЗагрузитьТолькоВыделенныеТесты",3,0,0,
{0,0}
},
{6,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаПерезагрузитьФорму",
{1,1,
{"ru","Перезагрузить браузер тестирования"}
},
{1,1,
{"ru","Команда перезагрузить форму"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КомандаПерезагрузитьФорму",3,0,0,
{0,0}
},
{6,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьТестыПоУмолчанию",
{1,1,
{"ru","Загрузить тесты по умолчанию"}
},
{1,1,
{"ru","Загрузить тесты по умолчанию"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"ЗагрузитьТестыПоУмолчанию",3,0,0,
{0,0}
},
{6,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КонвертерТестов",
{1,1,
{"ru","Конвертер тестов в формат 4-й версии"}
},
{1,1,
{"ru","Конвертер тестов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"КонвертерТестов",3,0,0,
{0,0}
},
{6,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПреобразоватьЖурналДействийПользователяВТест",
{1,1,
{"ru","Преобразовать журнал действий пользователя в тест"}
},
{1,1,
{"ru","Преобразовать журнал действий пользователя в тест"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{3,0,
{0},"",-1,-1,1,0},"ПреобразоватьЖурналДействийПользователяВТест",3,0,0,
{0,0}
}
},
{0,0},
{0,0}
}