{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;

&НаКлиенте
Перем ТестируемаяФорма;

// { интерфейс тестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин(""БазовыеУтверждения"");
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	ОписанияТестов = Новый Массив;
	
	НужноИсключениеЕслиНеНайденоДокументов = Ложь;

	СоздатьИменаОсновныхФорм();
	
	ТолькоУправляемыеФормы = Истина;
	//#Если ТонкийКлиент или ВебКлиент Тогда
	#Если ТолстыйКлиентОбычноеПриложение или ТолстыйКлиентУправляемоеПриложение  Тогда
		ТолькоУправляемыеФормы = Ложь;
	#КонецЕсли
	
	Если Не ИспользоватьОбычныеФормыВТолстомКлиентеВУправляемомРежимеСервер() Тогда
		ТолькоУправляемыеФормы = Истина;
	КонецЕсли;
		
	Объект.ВыводитьСообщенияВЖурналРегистрации = Истина;
	
	ИменаОсновныхФорм_Объекты_Сервер = ИменаОсновныхФорм_Объекты_Сервер();
	мИменаОсновныхФорм_Списки_Сервер = мИменаОсновныхФорм_Списки_Сервер();
	
	ДобавитьТестыДляСправочниковСервер(ОписанияТестов, ТолькоУправляемыеФормы, ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер);
	ДобавитьТестыДляДокументовСервер(ОписанияТестов, ТолькоУправляемыеФормы, ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер);
	
	ДобавитьТестыДляОтчетовОбработокСервер(ОписанияТестов, ТолькоУправляемыеФормы);

	ОписанияТестов.Добавить(""ТестДолжен_ПроверитьБагПлатформыПриОткрытииУправляемойФормыПриОткрытииКоторойЕстьИсключение"");
	
	ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов);
КонецПроцедуры

// } интерфейс тестирования

//{ блок юнит-тестов - САМИ ТЕСТЫ

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	//Предупреждение(""Спец.окно для для показа сообщений из тестов. Таймаут 1 секунда"",1); // нужно для показа сообщений из теста, иначе не будут показаны
	
	ВыводитьСообщенияВЖурналРегистрации = Истина;
	Объект.ВыводитьСообщенияВЖурналРегистрации = Истина;
	
	CоздаваемыйЭлемент = Неопределено;
	
	ОбновитьПовторноИспользуемыеЗначения();

	НужноИсключениеЕслиНеНайденоДокументов = Ложь;

	СоздатьИменаОсновныхФорм();
	
	//НачатьТранзакциюСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	//ОтменитьТранзакциюСервер();
	
	ЗакрытьФорму();
	УдалитьСозданныйОбъект();
КонецПроцедуры

&НаСервере
Процедура УдалитьСозданныйОбъект()
	Если ЗначениеЗаполнено(CоздаваемыйЭлемент) Тогда
		CозданныйОбъект = CоздаваемыйЭлемент.ПолучитьОбъект();
		CозданныйОбъект.Удалить();
	КонецЕсли;
	CоздаваемыйЭлемент = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	//Если ТипЗнч(ТестируемаяФорма) <> Тип(""Форма"") и ТипЗнч(ТестируемаяФорма) <> Тип(""УправляемаяФорма"") Тогда
	Если ТипЗнч(ТестируемаяФорма) <> Тип(""УправляемаяФорма"") Тогда
		Возврат;
	КонецЕсли; 
	ТестируемаяФорма.Модифицированность = Ложь;
	Если ТестируемаяФорма.Открыта() Тогда
		ТестируемаяФорма.Модифицированность = Ложь;
		//Попытка
			ТестируемаяФорма.Закрыть();
		//Исключение
		//	Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//	ЗакрытьФормуБезусловноСОтменойТранзакции(ТестируемаяФорма);
		//	//Если ТранзакцияАктивна() Тогда
		//	//	ОтменитьТранзакцию();
		//	//КонецЕсли;
		//	//	//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
		//	//НачатьТранзакцию();
		//	//ТестируемаяФорма.УстановитьДействие(""ПередЗакрытием"", Неопределено);
		//	//ТестируемаяФорма.УстановитьДействие(""ПриЗакрытии"", Неопределено);
		//	//ТестируемаяФорма.Закрыть();
		//	ВызватьИсключение Ошибка; 			
		//КонецПопытки;
	Иначе
		Попытка
			ТестируемаяФорма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	ТестируемаяФорма = """";

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов)
	Для Каждого Описание Из ОписанияТестов Цикл
		Если ТипЗнч(Описание) = Тип(""Строка"") Тогда
			НаборТестов.Добавить(Описание);
		Иначе
			НаборТестов.Добавить(Описание.ИмяТеста, НаборТестов.ПараметрыТеста(Описание.Параметр), Описание.ПредставлениеТеста);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДобавитьТестыДляСправочниковСервер(ОписанияТестов, ТолькоУправляемыеФормы, ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер)
	ОсновнойОбъект = Объект();
	СписокИсключений_Существующие = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Существующие();
	СписокИсключений_Новые = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Новые();
	СписокИсключений_Списки = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Списки();
	
	менеджерМетаданного = Метаданные.Справочники;
	Для Каждого МетаОбъект Из менеджерМетаданного Цикл
		
		Если ПравоДоступа(""ИнтерактивноеДобавление"", МетаОбъект) Тогда
			имяТеста = ""ТестДолжен_ОткрытьФормуНовогоЭлементаСправочника"";
			ПрефиксПредставленияТеста = ""Новые"";
			СписокИсключений = СписокИсключений_Новые;
			ИменаОсновныхФорм = ИменаОсновныхФорм_Объекты_Сервер;
			
			ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);
		КонецЕсли;		
		
		имяТеста = ""ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочника"";
		ПрефиксПредставленияТеста = ""Существующие"";
		СписокИсключений = СписокИсключений_Существующие;
		ИменаОсновныхФорм = ИменаОсновныхФорм_Объекты_Сервер;
		
		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);

		имяТеста = ""ТестДолжен_ОткрытьФормуПоПолномуИмениФормы"";
		ПрефиксПредставленияТеста = ""Списки"";
		СписокИсключений = СписокИсключений_Списки;
		ИменаОсновныхФорм = мИменаОсновныхФорм_Списки_Сервер;
		
		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);
	КонецЦикла;
КонецФункции

&НаСервере
Функция ДобавитьТестыДляДокументовСервер(ОписанияТестов, ТолькоУправляемыеФормы, ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер)
	ОсновнойОбъект = Объект();
	СписокИсключений_Существующие = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Существующие();
	СписокИсключений_Новые = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Новые();
	СписокИсключений_Списки = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Списки();
	
	менеджерМетаданного = Метаданные.Документы;
	Для Каждого МетаОбъект Из менеджерМетаданного Цикл
		
		Если ПравоДоступа(""ИнтерактивноеДобавление"", МетаОбъект) Тогда
			имяТеста = ""ТестДолжен_ОткрытьФормуНовогоДокумента"";
			ПрефиксПредставленияТеста = ""Новые"";
			СписокИсключений = СписокИсключений_Новые;
			ИменаОсновныхФорм = ИменаОсновныхФорм_Объекты_Сервер;
			ПроверяемоеПравоДоступа = ""ИнтерактивноеДобавление"";
			ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);
		КонецЕсли;		
		
		имяТеста = ""ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокумента"";
		ПрефиксПредставленияТеста = ""Существующие"";
		СписокИсключений = СписокИсключений_Существующие;
		ИменаОсновныхФорм = ИменаОсновныхФорм_Объекты_Сервер;
		
		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);

		имяТеста = ""ТестДолжен_ОткрытьФормуПоПолномуИмениФормы"";
		ПрефиксПредставленияТеста = ""Списки"";
		СписокИсключений = СписокИсключений_Списки;
		ИменаОсновныхФорм = мИменаОсновныхФорм_Списки_Сервер;
		
		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);
	КонецЦикла;
КонецФункции

&НаСервере
Функция ДобавитьТестыДляОтчетовОбработокСервер(ОписанияТестов, ТолькоУправляемыеФормы)
	ОсновнойОбъект = Объект();
	
	ИменаОсновныхФорм = мИменаОсновныхФорм_Сервер();
	СписокИсключений_Отчеты = ОсновнойОбъект.ПолучитьСписокИсключений_Отчеты();
	СписокИсключений_Обработки = ОсновнойОбъект.ПолучитьСписокИсключений_Обработки();
	
	имяТеста = ""ТестДолжен_ОткрытьФормуПоПолномуИмениФормы"";
	ПрефиксПредставленияТеста = """";

	ДобавитьТестыПереданныхВидовФормДляКаждогоОбъектаМенеджераМетаданных(ОписанияТестов, ОсновнойОбъект, Метаданные.Обработки, ТолькоУправляемыеФормы, СписокИсключений_Обработки, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);
	ДобавитьТестыПереданныхВидовФормДляКаждогоОбъектаМенеджераМетаданных(ОписанияТестов, ОсновнойОбъект, Метаданные.Отчеты, ТолькоУправляемыеФормы, СписокИсключений_Отчеты, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);
КонецФункции

Процедура ДобавитьТестыПереданныхВидовФормДляКаждогоОбъектаМенеджераМетаданных(ОписанияТестов, ОсновнойОбъект, менеджерМетаданного, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста)
	Для Каждого МетаОбъект Из менеджерМетаданного Цикл
		Если ОсновнойОбъект.ЭтоУстаревшийМетаОбъектДляУдаления(МетаОбъект) Тогда
			Возврат;
		КонецЕсли;
		Если Лев(МетаОбъект.Имя, СтрДлина(""xddTestRunner"")) = ""xddTestRunner"" Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект, 
		ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста)
		
	Если ОсновнойОбъект.ЭтоУстаревшийМетаОбъектДляУдаления(МетаОбъект) Тогда
		Возврат;
	КонецЕсли;
		
	CписокИменМетаФорм = Новый СписокЗначений;
	ДобавитьИменаМетаФормДляОдногоОбъектаМетаданного(CписокИменМетаФорм, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм);
	ДобавитьТестПоПереданнымМетаФормамСсылочногоОбъектаСервер(ОписанияТестов, CписокИменМетаФорм, имяТеста, ПрефиксПредставленияТеста);
КонецПроцедуры

Процедура ДобавитьТестМетаФормыСервер(ОписанияТестов, CписокИменМетаФорм, имяТеста)
	Для каждого Элемент Из CписокИменМетаФорм  Цикл
		МетаФорма_ПолноеИмя = Элемент.Значение;
		ПредставлениеТеста = МетаФорма_ПолноеИмя;
		лПараметры = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
		ОписанияТестов.Добавить(лПараметры);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьТестПоПереданнымМетаФормамСсылочногоОбъектаСервер(ОписанияТестов, CписокИменМетаФорм, имяТеста, ПрефиксПредставленияТеста)
	Для каждого Элемент Из CписокИменМетаФорм  Цикл
		МетаФорма_ПолноеИмя = Элемент.Значение;
		ПредставлениеТеста = МетаФорма_ПолноеИмя;
		Если НЕ ПустаяСтрока(ПрефиксПредставленияТеста) Тогда
			ПредставлениеТеста = ПрефиксПредставленияТеста + "" : "" + МетаФорма_ПолноеИмя;
		КонецЕсли;
		
		//Структура = Новый Структура(""МетаФорма_ПолноеИмя"", МетаФорма_ПолноеИмя);
		////Структура = Новый Структура(""МетаИмя,МетаФорма_ПолноеИмя"", МетаОбъект.Имя, МетаФорма_ПолноеИмя);
		//лПараметры = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ПредставлениеТеста, имяТеста, Истина, Структура);
		лПараметры = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
		ОписанияТестов.Добавить(лПараметры);
	КонецЦикла;
КонецПроцедуры

Функция ИспользоватьОбычныеФормыВТолстомКлиентеВУправляемомРежимеСервер()
	Возврат Метаданные.ИспользоватьОбычныеФормыВУправляемомПриложении;
КонецФункции

&НаКлиенте
Процедура ТестироватьФорму(ПолноеИмяФормы, ПараметрыФормы) Экспорт
//Процедура ТестироватьФорму(ПолноеИмяФормы, ПараметрыФормы, Модально = Ложь) Экспорт
	Если Объект.ВыводитьСообщенияВЖурналРегистрации Тогда
		ВыполнитьЗаписьВЖурналРегистрации(ПолноеИмяФормы);
	КонецЕсли;
	
	КлючВременнойФормы = ""908насмь9ыв3245"";
	//Если Модально Тогда
	//	ТестируемаяФорма = ОткрытьФормуМодально(ПолноеИмяФормы, ПараметрыФормы);
	//Иначе
		//ошибка ="""";
		//Попытка
		
		// К сожалению здесь исключения не ловятся https://github.com/xDrivenDevelopment/xUnitFor1C/issues/154
		ТестируемаяФорма = ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы,, КлючВременнойФормы);
		
		//Исключение
		//	ошибка = ОписаниеОшибки();
		//	Предупреждение("" поймали исключение 20"" + ошибка);
		//КонецПопытки;
	//КонецЕсли;
	Если ТестируемаяФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ТестируемаяФорма.Открыть(); // К сожалению здесь исключения не ловятся http://partners.v8.1c.ru/forum/thread.jsp?id=1080350#1080350
		Утверждения.Проверить(ТестируемаяФорма.Открыта(), ""ТестируемаяФорма """"""+ПолноеИмяФормы+"""""" не открылась, а должна была открыться"");
		
	Если ТипЗнч(ТестируемаяФорма) = Тип(""УправляемаяФорма"") Тогда
		ТестируемаяФорма.ОбновитьОтображениеДанных();
	Иначе
			//Если ЭтоОбычнаяФорма(ТестируемаяФорма) Тогда
		ТестируемаяФорма.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СсылочныйОбъект)
	ПараметрыФормы = Новый Структура(""Ключ"", СсылочныйОбъект);
	ТестироватьФорму(Мета_ПолноеИмя, ПараметрыФормы);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаписьВЖурналРегистрации(ПолноеИмяФормы)
	ЗаписьЖурналаРегистрации(Объект().Метаданные().Синоним, УровеньЖурналаРегистрации.Информация, , , ""Операция: "" + ПолноеИмяФормы);
КонецПроцедуры

Процедура СоздатьИменаОсновныхФорм()
	ОсновнойОбъект = Объект();
	ОсновнойОбъект.СоздатьИменаОсновныхФорм();
	ЗначениеВРеквизитФормы(ОсновнойОбъект, ""Объект"");
КонецПроцедуры

&НаСервере
Функция ИменаОсновныхФорм_Объекты_Сервер()
	Возврат Объект().мИменаОсновныхФорм_Объекты;
КонецФункции

&НаСервере
Функция мИменаОсновныхФорм_Списки_Сервер()
	Возврат Объект().мИменаОсновныхФорм_Списки;
КонецФункции

&НаСервере
Функция мИменаОсновныхФорм_Сервер()
	Возврат Объект().мИменаОсновныхФорм;
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьИменаМетаФормДляОдногоОбъектаМетаданного(CписокИменМетаФорм, ОсновнойОбъект, МетаОбъект, ТолькоУправляемыеФормы, списокИсключений, ИменаОсновныхФорм)
	Если списокИсключений.НайтиПоЗначению(МетаОбъект.Имя) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПравоДоступа(""Просмотр"", МетаОбъект) Тогда
		МетаФормы = ОсновнойОбъект.ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, ИменаОсновныхФорм);

		Для каждого МетаФорма Из МетаФормы Цикл
			МетаФорма_ПолноеИмя = МетаФорма.ПолноеИмя();
			//Сообщить(""МетаФорма_ПолноеИмя <""+МетаФорма_ПолноеИмя+""> "");
			
			Если ТолькоУправляемыеФормы Тогда
				//Сообщить(""МетаФорма.ТипФормы <""+МетаФорма.ТипФормы+""> "");
				Если Не ЭтоУправляемаяФорма(МетаФорма) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
			CписокИменМетаФорм.Добавить(МетаФорма_ПолноеИмя);
			//ПредставлениеТеста = МетаФорма_ПолноеИмя;
			//лПараметры = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
			//ОписанияТестов.Добавить(лПараметры);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоУправляемаяФорма(МетаФорма)
	Возврат МетаФорма <> Неопределено И МетаФорма.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая;
КонецФункции

Функция Объект()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

Функция ПолучитьВидМетаданного(Мета_ПолноеИмя)
	ИД = Лев(Мета_ПолноеИмя, Найти(Мета_ПолноеИмя, "".Форма."")-1);
	ИД = Сред(ИД, Найти(ИД, ""."") + 1);
	Возврат ИД;
КонецФункции

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуПоПолномуИмениФормы(ПолноеИмяФормы) Экспорт
	ТестироватьФорму(ПолноеИмяФормы, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочника(Мета_ПолноеИмя) Экспорт
	ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочникаСервер(Мета_ПолноеИмя);
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, CоздаваемыйЭлемент);
КонецПроцедуры

&НаСервере
Процедура ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочникаСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	CоздаваемыйЭлемент = ОсновнойОбъект.СоздатьЭлементИВернутьСсылку(ИД, ""существующий"");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуНовогоЭлементаСправочника(Мета_ПолноеИмя) Экспорт
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуНовогоДокумента(Мета_ПолноеИмя) Экспорт
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокумента(Мета_ПолноеИмя) Экспорт
	Док = ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокументаСервер(Мета_ПолноеИмя);
	Если Док <> Неопределено Тогда
		ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Док);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокументаСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);
	
	ОсновнойОбъект = Объект();
	Док = ОсновнойОбъект.ПолучитьСуществующийДокументОбъектИВернутьСсылку(ИД, НужноИсключениеЕслиНеНайденоДокументов, ""ТестДолжен_ОткрытьФормуСуществующегоДокумента"");
	Возврат Док;
КонецФункции

// проверка бага https://github.com/xDrivenDevelopment/xUnitFor1C/issues/154
&НаКлиенте
Процедура ТестДолжен_ПроверитьБагПлатформыПриОткрытииУправляемойФормыПриОткрытииКоторойЕстьИсключение() Экспорт
	Мета_ПолноеИмя = ""Обработка.ТестОбработка_Форма_ИсключениеПриОткрытии.Форма.УправляемаяФорма"";
	ошибка ="""";
	Попытка
		ОткрытьФорму(Мета_ПолноеИмя);
	Исключение
		ошибка = ОписаниеОшибки();
		//Предупреждение(""поймали исключение 20""+ ошибка);
	КонецПопытки;
	Утверждения.ПроверитьЗаполненность(ошибка, ""Ошибка"");
КонецПроцедуры

//} 
",
{4,3,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",d7763d54-e3e8-4427-b006-786d44023817}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"CоздаваемыйЭлемент",
{1,1,
{"ru","Cоздаваемый элемент"}
},
{"Pattern",
{"#",280f5f0e-9c8a-49cc-bf6d-4d296cc17a63}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"НужноИсключениеЕслиНеНайденоДокументов",
{1,1,
{"ru","Нужно исключение если не найдено документов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}