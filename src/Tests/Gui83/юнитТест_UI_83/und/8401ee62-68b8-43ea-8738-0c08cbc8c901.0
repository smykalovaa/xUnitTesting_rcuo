{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"#Если Не ВебКлиент Тогда


&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем ГенераторТестовыхДанных;
&НаКлиенте
Перем ЗапросыИзБД;
&НаКлиенте
Перем УтвержденияПроверкаТаблиц;

&НаКлиенте
Перем массивТестовыхПриложений;

&НаКлиенте
Перем ЮнитТестированиеИмя;

&НаКлиенте

//Перем юТест;
//Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
//	ЮнитТестированиеИмя = ЮнитТестирование.МетаданныеИмя();
//	
//	СисИнфо = Новый СистемнаяИнформация;
//	
//	юТест = ЮнитТестирование;
//	
//	ВсеТесты = Новый Массив;
//		 
//	Если СисИнфо.ВерсияПриложения < ""8.3.0.0"" Тогда
//		Возврат ВсеТесты;
//	КонецЕсли;
//
//	ВсеТесты.Добавить(""Тест_ГУИ_83"");
//	ВсеТесты.Добавить(""Тест_ГУИ_83_ДваПриложения"");
//
//	Возврат ВсеТесты;
//	
//КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
	Утверждения = КонтекстЯдра.Плагин(""БазовыеУтверждения"");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин(""СериализаторMXL"");
	ЗапросыИзБД = КонтекстЯдра.Плагин(""ЗапросыИзБД"");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин(""УтвержденияПроверкаТаблиц"");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.Добавить(""Тест_ГУИ_83"");
	НаборТестов.Добавить(""Тест_ГУИ_83_ДваПриложения"");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ИмяПеременнойПользователь = ""Пользователь12"";
	ПользовательИмя = ""ТестИмя12"";
	ОбновитьПовторноИспользуемыеЗначения();
	
	КонтекстЯдра.ВывестиСообщение(""Перед запуском теста"");
	массивТестовыхПриложений = Новый Массив;
	
	СоздатьТестовыеДанныеСервер(ЮнитТестированиеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	КонтекстЯдра.ВывестиСообщение(""После запуска теста"");
	УдалитьТестовыеДанныеСервер(ЮнитТестированиеИмя);
	
	ЗавершитьВсеСеансыРаботыСТестовымиПриложениями();
КонецПроцедуры

&НаСервере
Процедура СоздатьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	ГенераторТестовыхДанных = ГенераторТестовыхДанных();
	
	ИмяМакета = ""СозданиеОдногоПользователяИБ"";
	//ИмяМакета = ""СозданиеОдногоПользователяИБ_УФ"";
	
	ОсновнойОбъект = Объект();
	МассивИменПользователей = МассивИменПользователейПоУмолчанию();
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		УдалитьПользователяИБ_ЕслиОнСуществует(ИмяПользователя);
	КонецЦикла;
	
	КоллекцияПараметров = Новый Структура(""ИмяПеременнойПользователь, ПользовательИмя"", ИмяПеременнойПользователь, ПользовательИмя);
	НовыйТабДок = ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров);
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить(НовыйТабДок);
	
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
	
	ТестовыеДанныеУФ.Очистить();

	ТестовыеДанныеДляУФ = Новый ТаблицаЗначений;
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить(""Ключ"");
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить(""Значение"");
	
	Для каждого ключЗначение Из ТестовыеДанные Цикл
		СписокВрем = Новый СписокЗначений;
		Строка = ТестовыеДанныеДляУФ.Добавить();
		Если ТипЗнч(ключЗначение.Значение) = Тип(""ПользовательИнформационнойБазы"") Тогда
			СписокВрем.Добавить(ключЗначение.Значение.Имя, ключЗначение.Ключ);
			Строка.Ключ = ""ПользовательИнформационнойБазы"";
		Иначе
			Строка.Ключ = ключЗначение.Ключ;
			СписокВрем.Добавить(ключЗначение.Значение);
		КонецЕсли;
		Строка.Значение = СписокВрем;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТестовыеДанныеДляУФ, ТестовыеДанныеУФ);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	Если ТестовыеДанныеУФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГенераторТестовыхДанных = ГенераторТестовыхДанных();
	
	ТестовыеДанные = Новый Структура;
	Для каждого Строка Из ТестовыеДанныеУФ Цикл
		Если Строка.Ключ = ""ПользовательИнформационнойБазы"" Тогда
			ЭлементСпискаЗначений = Строка.Значение[0];
			лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(ЭлементСпискаЗначений.Значение));
			ТестовыеДанные.Вставить(ЭлементСпискаЗначений.Представление, лПользователь);
		Иначе
			ТестовыеДанные.Вставить(Строка.Ключ, Строка.Значение[0].Значение);
		КонецЕсли;
	КонецЦикла;
	
	ГенераторТестовыхДанных.УдалитьСозданныеДанные(ТестовыеДанные);
	
	ТестовыеДанныеУФ.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГенераторТестовыхДанных()
	Возврат ВнешниеОбработки.Создать(""СериализаторMXL"");
КонецФункции

Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить(ПользовательИмя);
	Возврат Рез;
КонецФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

Функция ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров) Экспорт

	Макет = Объект().ПолучитьМакет(ИмяМакета);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, КоллекцияПараметров);
	
	НовыйТабДок = Новый ТабличныйДокумент;
	НовыйТабДок.Вывести(Макет);

	Возврат НовыйТабДок;
КонецФункции

Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя) Экспорт

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Тест_ГУИ_83() Экспорт
	имяПользователя = ПользовательИмя;
	Пароль = """";
	Порт = 1577;
	ТаймаутОжиданияПриложенияВСекундах = 60;
	
	тестовоеПриложение = ЗапуститьТестовоеПриложение(имяПользователя, Пароль, Порт, ТаймаутОжиданияПриложенияВСекундах);
	
	ТестовыйСценарий_25_09_2013(тестовоеПриложение);

КонецПроцедуры

&НаКлиенте
Процедура Тест_ГУИ_83_ДваПриложения() Экспорт
	имяПользователя = ПользовательИмя;
	Пароль = """";
	Порт = 1577;
	ТаймаутОжиданияПриложенияВСекундах = 20;
	
	Порт2 = Порт + 1;
	
	тестовоеПриложение = ЗапуститьТестовоеПриложение(имяПользователя, Пароль, Порт, ТаймаутОжиданияПриложенияВСекундах);
	тестовоеПриложение2 = ЗапуститьТестовоеПриложение(имяПользователя, Пароль, Порт2, ТаймаутОжиданияПриложенияВСекундах);
	
	ТестовыйСценарий_25_09_2013(тестовоеПриложение);
	ТестовыйСценарий_25_09_2013(тестовоеПриложение2);
	
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьТестовоеПриложение(ИмяПользователя, Пароль, Порт, ТаймаутОжиданияПриложенияВСекундах)
	Перем тестовоеПриложение;
	строкаЗапуска = ПолучитьСтрокуЗапуска(ИмяПользователя, Пароль, Порт);

	ЗапуститьПриложение(строкаЗапуска);
	тестовоеПриложение = Неопределено;
	Попытка
		Выполнить(""тестовоеПриложение = Новый ТестируемоеПриложение(, XMLСтрока(Порт));"");
	Исключение
		тестовоеПриложение = Неопределено;
	КонецПопытки;
	Если тестовоеПриложение = Неопределено Тогда
		ВызватьИсключение ""Не удалось создать объект ТестируемоеПриложение.""+Символы.ПС+
			""Возможно, что 1С:Предприятие 8 не было запущено в режиме Менеджера тестирования (ключ командной строки /TESTMANAGER)""+Символы.ПС+
			""При запуске Предприятия через Конфигуратор можно включить этот режим в параметрах конфигуратора Сервис -> Параметры -> Запуск 1С:Предприятия -> Дополнительные -> Автоматизированное тестирование -> пункт """"Запускать как менеджер тестирования""""."";
	КонецЕсли;
	
	Подключен = Ложь;
	ВремяОкончанияОжидания = ТекущаяДата() + ТаймаутОжиданияПриложенияВСекундах; //60;
	ОписаниеОшибкиСоединения = """";
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			тестовоеПриложение.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;

	сообщениеОшибки = ""Не смогли установить соединение с тестовым приложением для пользователя ""+ИмяПользователя+"" !"" + Символы.ПС + ОписаниеОшибкиСоединения; 
	Если Не Подключен Тогда 
    	тестовоеПриложение = Неопределено;
		ВызватьИсключение сообщениеОшибки;
	КонецЕсли;
	
	массивТестовыхПриложений.Добавить(тестовоеПриложение);

	Возврат тестовоеПриложение;
КонецФункции

&НаКлиенте
Процедура ЗавершитьВсеСеансыРаботыСТестовымиПриложениями()
	Если массивТестовыхПриложений.Количество() <> 0 Тогда
		Для Каждого Подопытный Из массивТестовыхПриложений Цикл
			Подопытный.РазорватьСоединение();
		КонецЦикла;	

		ЗавершитьВсеТестовыеПриложенияПринудительно();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеТестовыеПриложенияПринудительно()
	
	Утверждения.ПроверитьЗаполненность(массивТестовыхПриложений.Количество(), ""массивТестовыхПриложений.Количество()"");
	
	Если ЭтоLinux = Ложь Тогда
		
		Scr = Новый COMОбъект(""MSScriptControl.ScriptControl"");
		Scr.Language = ""vbscript"";
		Scr.AddCode(""
			|Option Explicit
			|
			|Dim objWMIService, objProcess, colProcess
			|
			|Set objWMIService = GetObject(""""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"""") 
			|
			|Set colProcess = objWMIService.ExecQuery(""""Select * from Win32_Process Where (CommandLine Like '%/TESTCLIENT%' And ExecutablePath Like '%1cv8c%')"""")
			|
			|For Each objProcess in colProcess
			|	objProcess.Terminate()
			|Next
			|"");
	Иначе
		СтрокаЗапуска = ""kill -9 `ps aux | grep -ie TESTCLIENT | grep -ie 1cv8c | awk '{print $2}'`"";
		ЗапуститьПриложение(СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуЗапуска(ИмяПользователя = """", Пароль = """", Порт = """")
		//Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		//	ИмяПользователя = ""Администратор"";
		//КонецЕсли;	
		
	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	Если Найти(Строка(СисИнфо.ТипПлатформы), ""Linux"")>0 Тогда 
		ЭтоLinux = Истина;
	КонецЕсли;
	
	СтрокаЗапуска1с = КаталогПрограммы() + ""1cv8c"";
	Если ЭтоLinux = Ложь Тогда
		СтрокаЗапуска1с = СтрокаЗапуска1с + "".exe"";
	КонецЕсли;
	
	
	
	Результат = СтрокаЗапуска1с + "" ENTERPRISE "" +
		""/IBConnectionString"""""" + СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """""""", """""""""""") + """""""" +
		"" /N"""""" + ИмяПользователя + """""""" + ?(ПустаяСтрока(Пароль), """","" /P"""""" + Пароль + """""""") +  
		"" /TESTCLIENT -TPort"" + XMLСтрока(Порт);

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ТестовыйСценарий_25_09_2013(ТестовоеПриложение)

	ОкноПриложенияОсновноеВыполнитьКоманду(ТестовоеПриложение);
	ОкноПриложенияПоказатьГУИДЗакрыть(ТестовоеПриложение);
	ОкноПриложенияОсновноеВыполнитьКоманду1(ТестовоеПриложение);
	ОкноПриложенияПоказатьГУИДЗакрыть1(ТестовоеПриложение);
	ОкноПриложенияОсновноеФормаПростойСправочникАктивизировать(ТестовоеПриложение);

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияОсновноеВыполнитьКоманду(ТестовоеПриложение)
	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновное.ВыполнитьКоманду(""e1cib/command/Обработка.xddGuidShow.Команда.Открыть"");

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияПоказатьГУИДЗакрыть(ТестовоеПриложение)

	ОкноПриложенияПоказатьГУИД = ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), ""Показать ГУИД"", , 30);
	ОкноПриложенияПоказатьГУИД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияОсновноеВыполнитьКоманду1(ТестовоеПриложение)

	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновное.ВыполнитьКоманду(""e1cib/command/Справочник.ПростойСправочник.Команда.ОткрытьСписок"");

	ОкноПриложенияОсновное.ВыполнитьКоманду(""e1cib/command/Обработка.xddGuidShow.Команда.Открыть"");

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияПоказатьГУИДЗакрыть1(ТестовоеПриложение)

	ОкноПриложенияПоказатьГУИД = ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), ""Показать ГУИД"", , 30);
	ОкноПриложенияПоказатьГУИД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияОсновноеФормаПростойСправочникАктивизировать(ТестовоеПриложение)

	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновноеФормаПростойСправочник = ОкноПриложенияОсновное.НайтиОбъект(Тип(""ТестируемаяФорма""), ""Простой справочник"");
	ОкноПриложенияОсновноеФормаПростойСправочник.Активизировать();

КонецПроцедуры

#КонецЕсли 
",
{4,5,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",d4e55e33-fb7f-484e-bcf7-2a6d67753130}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ИмяПеременнойПользователь",
{1,1,
{"ru","Имя переменной пользователь"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ПользовательИмя",
{1,1,
{"ru","Пользователь имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ТестовыеДанныеУФ",
{1,1,
{"ru","Тестовые данные УФ"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,2,
{5,1,0,"Ключ",
{1,1,
{"ru","Ключ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{5},0,"ЭтоLinux",
{1,1,
{"ru","Это linux"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}