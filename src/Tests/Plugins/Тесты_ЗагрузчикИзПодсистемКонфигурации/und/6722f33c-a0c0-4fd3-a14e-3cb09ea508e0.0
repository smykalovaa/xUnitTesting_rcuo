{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;

&НаКлиенте
Перем ЗагрузчикИзПодсистемКонфигурации;
&НаКлиенте
Перем ТипыУзловДереваТестов;

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
	ЗагрузчикИзПодсистемКонфигурации = КонтекстЯдра.Плагин(""ЗагрузчикИзПодсистемКонфигурации"");
	ТипыУзловДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"").Объект.ТипыУзловДереваТестов;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокТестов() Экспорт
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить(""ТестДолжен_Загрузить_Подсистему_Тестовая"");
	ВсеТесты.Добавить(""ТестДолжен_ВыполнитьТесты_Подсистемы_Тестовая"");
	
	// Проверка загрузки тестовых обработок с новым API
	ВсеТесты.Добавить(""ТестДолжен_Загрузить_ОбработкуСНовымAPI"");
	ВсеТесты.Добавить(""ТестДолжен_Сформировать_ПараметрыТеста_Простые"");
	ВсеТесты.Добавить(""ТестДолжен_Сформировать_ПараметрыТеста_СНеопределеноВСередине"");
	ВсеТесты.Добавить(""ТестДолжен_Сформировать_ПараметрыТеста_СНесколькимиНеопределеноВНачале"");
	ВсеТесты.Добавить(""ТестДолжен_Сформировать_ПараметрыТеста_СЕдинственнымПараметромНеопределено"");
	
	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ТестДолжен_Загрузить_Подсистему_Тестовая() Экспорт
	ИмяПодсистемы = ""Тестовая"";
	ДеревоТестов = ЗагрузчикИзПодсистемКонфигурации.Загрузить(КонтекстЯдра, ""Метаданные.Подсистемы."" + ИмяПодсистемы);
	
	Ожидаем.Что(ДеревоТестов).ИмеетТип(""Структура"");
	Ожидаем.Что(ДеревоТестов.Имя).Равно(ИмяПодсистемы);
	Ожидаем.Что(ДеревоТестов.Тип).Равно(ТипыУзловДереваТестов.Контейнер);
	
	Ожидаем.Что(ДеревоТестов.Строки).ИмеетДлину(3);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ВыполнитьТесты_Подсистемы_Тестовая() Экспорт
	ИмяПодсистемы = ""Тестовая"";
	ДеревоТестов = ЗагрузчикИзПодсистемКонфигурации.Загрузить(КонтекстЯдра, ""Метаданные.Подсистемы."" + ИмяПодсистемы);
	
	РезультатыТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикИзПодсистемКонфигурации, ДеревоТестов);
	
	Ожидаем.Что(РезультатыТестирования.КоличествоТестов, ""КоличествоТестов"").Равно(18);
	Ожидаем.Что(РезультатыТестирования.КоличествоСломанныхТестов, ""КоличествоСломанныхТестов"").Равно(0);
	Ожидаем.Что(РезультатыТестирования.КоличествоНеРеализованныхТестов, ""КоличествоНеРеализованныхТестов"").Равно(0);
КонецПроцедуры

// { Проверка загрузки тестовых обработок с новым API
&НаКлиенте
Процедура ТестДолжен_Загрузить_ОбработкуСНовымAPI() Экспорт
	ПутьОбработкиСНовымAPI = ""Метаданные.Обработки.Тест_ЗагрузчикИзПодсистем_НовыйAPIОбъявленияТестов"";
	ДеревоТестов = ЗагрузчикИзПодсистемКонфигурации.Загрузить(КонтекстЯдра, ПутьОбработкиСНовымAPI);
	
	ТестыОбработкиСНовымAPI = ДеревоТестов;
	
	Ожидаем.Что(ТестыОбработкиСНовымAPI.СлучайныйПорядокВыполнения, ""ТестыОбработкиСНовымAPI порядок выполнения"").ЭтоИстина();
	Ожидаем.Что(ТестыОбработкиСНовымAPI.Строки, ""ТестыОбработкиСНовымAPI количество дочерних узлов"").ИмеетДлину(5);
	
	Элемент1 = ТестыОбработкиСНовымAPI.Строки[0];
	Ожидаем.Что(Элемент1.Тип, ""Элемент1.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Элемент);
	Ожидаем.Что(Элемент1.Путь, ""Элемент1.Путь"").Равно(ПутьОбработкиСНовымAPI);
	Ожидаем.Что(Элемент1.ИмяМетода, ""Элемент1.ИмяМетода"").Равно(""ТестДолжен_ПроверитьВыполнение_ПростогоТеста"");
	
	ДочернийКонтейнер1 = ТестыОбработкиСНовымAPI.Строки[1];
	Ожидаем.Что(ДочернийКонтейнер1.Тип, ""ДочернийКонтейнер1.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(ДочернийКонтейнер1.СлучайныйПорядокВыполнения, ""ДочернийКонтейнер1 порядок выполнения"").ЭтоИстина();
	Ожидаем.Что(ДочернийКонтейнер1.Имя, ""ДочернийКонтейнер1.Имя"").Равно(""Группа со случайным порядком выполнения"");
	Ожидаем.Что(ДочернийКонтейнер1.Строки, ""ДочернийКонтейнер1.Строки"").ИмеетТип(""Массив"").ИмеетДлину(2);
	
	ДочернийКонтейнер2 = ТестыОбработкиСНовымAPI.Строки[2];
	Ожидаем.Что(ДочернийКонтейнер2.Тип, ""ДочернийКонтейнер2.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(ДочернийКонтейнер2.СлучайныйПорядокВыполнения, ""ДочернийКонтейнер2 порядок выполнения"").ЭтоЛожь();
	Ожидаем.Что(ДочернийКонтейнер2.Имя, ""ДочернийКонтейнер2.Имя"").Равно(""Группа со строгим порядком выполнения"");
	Ожидаем.Что(ДочернийКонтейнер2.Строки, ""ДочернийКонтейнер2.Строки"").ИмеетТип(""Массив"").ИмеетДлину(2);
	
	ДочернийКонтейнер3 = ТестыОбработкиСНовымAPI.Строки[3];
	Ожидаем.Что(ДочернийКонтейнер3.Тип, ""ДочернийКонтейнер3.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(ДочернийКонтейнер3.СлучайныйПорядокВыполнения, ""ДочернийКонтейнер3 порядок выполнения"").ЭтоЛожь();
	Ожидаем.Что(ДочернийКонтейнер3.Имя, ""ДочернийКонтейнер3.Имя"").Равно(""Группа параметризированных тестов со строгим порядком выполнения"");
	Ожидаем.Что(ДочернийКонтейнер3.Строки, ""ДочернийКонтейнер3.Строки"").ИмеетТип(""Массив"").ИмеетДлину(2);
	
	ДочернийКонтейнер4_Форма = ТестыОбработкиСНовымAPI.Строки[4];
	Ожидаем.Что(ДочернийКонтейнер4_Форма.Тип, ""ДочернийКонтейнер4_Форма.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(ДочернийКонтейнер4_Форма.СлучайныйПорядокВыполнения, ""ДочернийКонтейнер4_Форма порядок выполнения"").ЭтоИстина();
	Ожидаем.Что(ДочернийКонтейнер4_Форма.Имя, ""ДочернийКонтейнер4_Форма.Имя"").Равно(""УпрФорма # Тест_ЗагрузчикИзПодсистем_НовыйAPIОбъявленияТестов"");
	Ожидаем.Что(ДочернийКонтейнер4_Форма.Строки, ""ДочернийКонтейнер4_Форма.Строки"").ИмеетТип(""Массив"").ИмеетДлину(4);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Сформировать_ПараметрыТеста_Простые() Экспорт
	ПараметрыТеста = ЗагрузчикИзПодсистемКонфигурации.ПараметрыТеста(1, 2, 3, 4, 5, 6, 7, 8, 9);
	Ожидаем.Что(ПараметрыТеста, ""ПараметрыТеста"").ИмеетТип(""Массив"").ИмеетДлину(9);
	Ожидаем.Что(ПараметрыТеста[0], ""ПараметрыТеста[0]"").Равно(1);
	Ожидаем.Что(ПараметрыТеста[4], ""ПараметрыТеста[0]"").Равно(5);
	Ожидаем.Что(ПараметрыТеста[8], ""ПараметрыТеста[0]"").Равно(9);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Сформировать_ПараметрыТеста_СНеопределеноВСередине() Экспорт
	ПараметрыТеста = ЗагрузчикИзПодсистемКонфигурации.ПараметрыТеста(Истина, , Ложь);
	Ожидаем.Что(ПараметрыТеста, ""ПараметрыТеста"").ИмеетДлину(3);
	Ожидаем.Что(ПараметрыТеста[0], ""ПараметрыТеста[0]"").ЭтоИстина();
	Ожидаем.Что(ПараметрыТеста[1], ""ПараметрыТеста[1]"").ЭтоНеопределено();
	Ожидаем.Что(ПараметрыТеста[2], ""ПараметрыТеста[2]"").ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Сформировать_ПараметрыТеста_СНесколькимиНеопределеноВНачале() Экспорт
	ПараметрыТеста = ЗагрузчикИзПодсистемКонфигурации.ПараметрыТеста(, , Истина, Ложь);
	Ожидаем.Что(ПараметрыТеста, ""ПараметрыТеста"").ИмеетДлину(4);
	Ожидаем.Что(ПараметрыТеста[0], ""ПараметрыТеста[0]"").ЭтоНеопределено();
	Ожидаем.Что(ПараметрыТеста[1], ""ПараметрыТеста[1]"").ЭтоНеопределено();
	Ожидаем.Что(ПараметрыТеста[2], ""ПараметрыТеста[2]"").ЭтоИстина();
	Ожидаем.Что(ПараметрыТеста[3], ""ПараметрыТеста[3]"").ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Сформировать_ПараметрыТеста_СЕдинственнымПараметромНеопределено() Экспорт
	ПараметрыТеста = ЗагрузчикИзПодсистемКонфигурации.ПараметрыТеста(Неопределено);
	Ожидаем.Что(ПараметрыТеста, ""ПараметрыТеста"").ИмеетДлину(1);
	Ожидаем.Что(ПараметрыТеста[0], ""ПараметрыТеста[0]"").ЭтоНеопределено();
КонецПроцедуры
// } Проверка загрузки тестовых обработок с новым API

",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",7784af5c-5725-445b-85cc-f9c2719ae216}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}