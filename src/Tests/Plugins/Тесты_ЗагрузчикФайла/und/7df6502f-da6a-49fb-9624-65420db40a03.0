{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем ЗагрузчикФайла;
&НаКлиенте
Перем ВременныеФайлы;
&НаКлиенте
Перем Ожидаем;

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин(""БазовыеУтверждения"");
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокТестов() Экспорт
	ВсеТесты = Новый Массив;
	// Loader interface
	ВсеТесты.Добавить(""ТестДолжен_Загрузить_ОдинФайл"");
	ВсеТесты.Добавить(""ТестДолжен_Загрузить_ДваФайла"");
	
	// Проверка работы старго интерфейса объявления параметризованных тестов
	ВсеТесты.Добавить(Новый Структура(""ИмяТеста"", ""ТестДолжен_ПроверитьОписаниеТестаЧерезСтруктуру_ЗаполненоТолькоИмяТеста""));
	ВсеТесты.Добавить(Новый Структура(""ПредставлениеТеста, ИмяТеста"", """", ""ТестДолжен_ПроверитьОписаниеТестаЧерезСтруктуру_ЗаполненоИмяИПредставлениеТеста""));
	ВсеТесты.Добавить(Новый Структура(""ПредставлениеТеста, ИмяТеста, Параметр"", ""Тест с параметрами должен сложить 7 и 5"", ""ТестСПараметрамиДолжен_ВыполнитьСложениеПереданныхЗначенийИСверитьСРезультатом"", Новый Структура(""Знач1, Знач2, Результат"", 7, 5, 12)));
	ВсеТесты.Добавить(Новый Структура(""ПредставлениеТеста, ИмяТеста, Параметр"", ""Тест с параметрами должен сложить """"А"""" и """"Б"""""", ""ТестСПараметрамиДолжен_ВыполнитьСложениеПереданныхЗначенийИСверитьСРезультатом"", Новый Структура(""Знач1, Знач2, Результат"", ""А"", ""Б"", ""АБ"")));
	
	// Проверка режимов случайного или строгого порядка выполнения тестов
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьРежим_СлучайногоПорядкаВыполнения"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьРежим_СтрогогоПорядкаВыполнения_НаСервере"");
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьРежим_СтрогогоПорядкаВыполнения_НаКлиенте"");
	
	// Проверка загрузки тестовых обработок с новым API
	ВсеТесты.Добавить(""ТестДолжен_Загрузить_ОбработкуСНовымAPI"");
	ВсеТесты.Добавить(""ТестДолжен_Сформировать_ПараметрыТеста_Простые"");
	ВсеТесты.Добавить(""ТестДолжен_Сформировать_ПараметрыТеста_СНеопределеноВСередине"");
	ВсеТесты.Добавить(""ТестДолжен_Сформировать_ПараметрыТеста_СНесколькимиНеопределеноВНачале"");
	ВсеТесты.Добавить(""ТестДолжен_Сформировать_ПараметрыТеста_СЕдинственнымПараметромНеопределено"");
	
	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ВременныеФайлы = Новый Массив;
	ЗагрузчикФайла = КонтекстЯдра.Плагин(""ЗагрузчикФайла"");
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	ЗагрузчикФайла = Неопределено;
	УдалитьВременныеФайлы();
КонецПроцедуры

// { Helpers
&НаКлиенте
Функция НовыйВременныйФайл(Расширение) Экспорт
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	ВременныеФайлы.Добавить(ВременныйФайл);
	
	Возврат ВременныйФайл;
КонецФункции

&НаКлиенте
Процедура УдалитьВременныеФайлы()
	Для каждого ВременныйФайл Из ВременныеФайлы Цикл
		Попытка
			УдалитьФайлы(ВременныйФайл.ПолноеИмя);
		Исключение
			Сообщить(""Не удален временный файл: "" + ВременныйФайл.ПолноеИмя + ""
			|-"" + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	ВременныеФайлы.Очистить();
КонецПроцедуры
// } Helpers

// { Loader interface
&НаКлиенте
Процедура ТестДолжен_Загрузить_ОдинФайл() Экспорт
	ФайлСТестами = НовыйВременныйФайл("".epf"");
	ПолучитьМакет_НаСервере(""ТестовыйНаборДляЗагрузчикаФС"").Записать(ФайлСТестами.ПолноеИмя);
	
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ФайлСТестами.ПолноеИмя);
	
	Ожидаем.Что(ДеревоТестов, ""ДеревоТестов"").ИмеетТип(""Структура"");
	Ожидаем.Что(ДеревоТестов.Строки, ""Узлы верхнего уровня"").ИмеетДлину(1);
	
	Контейнер = ДеревоТестов.Строки[0];
	ПроверитьКонтейнер(Контейнер, ФайлСТестами);
КонецПроцедуры

&НаСервере
Функция ПолучитьМакет_НаСервере(ИмяМакета)
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	Макет = ОбъектНаСервере.ПолучитьМакет(ИмяМакета);
	
	Возврат Макет;
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтейнер(Контейнер, ФайлСТестами)
	ТипыУзловДереваТестов = КонтекстЯдра.Плагин(""ПостроительДереваТестов"").Объект.ТипыУзловДереваТестов;
	
	Ожидаем.Что(Контейнер.Тип, ""Контейнер.Тип"").Равно(ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(Контейнер.Имя, ""Контейнер.Имя"").Равно(ФайлСТестами.ИмяБезРасширения);
	Ожидаем.Что(Контейнер.Строки, ""Контейнер.Строки"").ИмеетТип(""Массив"").ИмеетДлину(3);
	
	Элемент1 = Контейнер.Строки[0];
	Ожидаем.Что(Элемент1.Тип, ""Элемент1.Тип"").Равно(ТипыУзловДереваТестов.Элемент);
	Ожидаем.Что(Элемент1.Путь, ""Элемент1.Путь"").Равно(ФайлСТестами.ПолноеИмя);
	Ожидаем.Что(Элемент1.ИмяМетода, ""Элемент1.ИмяМетода"").Равно(""УспешныйТест"");
	
	Элемент2 = Контейнер.Строки[1];
	Ожидаем.Что(Элемент2.Тип, ""Элемент2.Тип"").Равно(ТипыУзловДереваТестов.Элемент);
	Ожидаем.Что(Элемент2.Путь, ""Элемент2.Путь"").Равно(ФайлСТестами.ПолноеИмя);
	Ожидаем.Что(Элемент2.ИмяМетода, ""Элемент2.ИмяМетода"").Равно(""ПроваленныйТест"");
	
	Элемент3 = Контейнер.Строки[2];
	Ожидаем.Что(Элемент3.Тип, ""Элемент3.Тип"").Равно(ТипыУзловДереваТестов.Элемент);
	Ожидаем.Что(Элемент3.Путь, ""Элемент3.Путь"").Равно(ФайлСТестами.ПолноеИмя);
	Ожидаем.Что(Элемент3.ИмяМетода, ""Элемент3.ИмяМетода"").Равно(""НесуществующийТест"");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Загрузить_ДваФайла() Экспорт
	ФайлСТестами1 = НовыйВременныйФайл("".epf"");
	ПолучитьМакет_НаСервере(""ТестовыйНаборДляЗагрузчикаФС"").Записать(ФайлСТестами1.ПолноеИмя);
	
	ФайлСТестами2 = НовыйВременныйФайл("".epf"");
	ПолучитьМакет_НаСервере(""ТестовыйНаборДляЗагрузчикаФС"").Записать(ФайлСТестами2.ПолноеИмя);
	
	ПутьКНесколькимФайлам = ФайлСТестами1.ПолноеИмя + Символы.ПС + ФайлСТестами2.ПолноеИмя;
	
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ПутьКНесколькимФайлам);
	
	Ожидаем.Что(ДеревоТестов, ""ДеревоТестов"").ИмеетТип(""Структура"");
	Ожидаем.Что(ДеревоТестов.Строки, ""Количество узлов верхнего уровня"").ИмеетДлину(2);
	
	Контейнер = ДеревоТестов.Строки[0];
	ПроверитьКонтейнер(Контейнер, ФайлСТестами1);
	
	Контейнер = ДеревоТестов.Строки[1];
	ПроверитьКонтейнер(Контейнер, ФайлСТестами2);
КонецПроцедуры
// } Loader interface

// { Проверка работы старго интерфейса объявления параметризованных тестов
&НаКлиенте
Процедура ТестДолжен_ПроверитьОписаниеТестаЧерезСтруктуру_ЗаполненоТолькоИмяТеста() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьОписаниеТестаЧерезСтруктуру_ЗаполненоИмяИПредставлениеТеста() Экспорт
	// Визуальный контроль в дереве тестов
КонецПроцедуры

&НаКлиенте
Процедура ТестСПараметрамиДолжен_ВыполнитьСложениеПереданныхЗначенийИСверитьСРезультатом(Параметр) Экспорт
	Ожидаем.Что(Параметр).ИмеетТип(""Структура"");
	Ожидаем.Что(Параметр.Знач1 + Параметр.Знач2).Равно(Параметр.Результат);
КонецПроцедуры
// } Проверка работы старго интерфейса объявления параметризованных тестов

// { Проверка режимов случайного или строгого порядка выполнения тестов
&НаКлиенте
Процедура ТестДолжен_ПроверитьРежим_СлучайногоПорядкаВыполнения() Экспорт
	ФайлСТестами = НовыйВременныйФайл("".epf"");
	ПолучитьМакет_НаСервере(""ТестовыйНаборДляЗагрузчикаФС"").Записать(ФайлСТестами.ПолноеИмя);
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ФайлСТестами.ПолноеИмя);
	Контейнер = ДеревоТестов.Строки[0];
	
	Ожидаем.Что(ДеревоТестов.СлучайныйПорядокВыполнения, ""ДеревоТестов"").ЭтоИстина();
	Ожидаем.Что(Контейнер.СлучайныйПорядокВыполнения, ""Контейнер"").ЭтоИстина();
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРежим_СтрогогоПорядкаВыполнения_НаСервере() Экспорт
	ФайлСТестами = НовыйВременныйФайл("".epf"");
	ПолучитьМакет_НаСервере(""ТестовыйНаборСоСтрогимПорядкомВыполнения"").Записать(ФайлСТестами.ПолноеИмя);
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ФайлСТестами.ПолноеИмя);
	Контейнер = ДеревоТестов.Строки[0];
	
	Ожидаем.Что(ДеревоТестов.СлучайныйПорядокВыполнения, ""ДеревоТестов"").ЭтоИстина();
	Ожидаем.Что(Контейнер.СлучайныйПорядокВыполнения, ""Контейнер"").ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРежим_СтрогогоПорядкаВыполнения_НаКлиенте() Экспорт
	ФайлСТестами = НовыйВременныйФайл("".epf"");
	ПолучитьМакет_НаСервере(""ТестовыйНаборСоСтрогимПорядкомВыполнения"").Записать(ФайлСТестами.ПолноеИмя);
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ФайлСТестами.ПолноеИмя);
	КонтейнерОбработки = ДеревоТестов.Строки[0];
	КонтейнерФормыОбработки = НайтиПервыйДочернийКонтейнер(КонтейнерОбработки);
	
	Ожидаем.Что(ДеревоТестов.СлучайныйПорядокВыполнения, ""ДеревоТестов"").ЭтоИстина();
	Ожидаем.Что(КонтейнерОбработки.СлучайныйПорядокВыполнения, ""КонтейнерОбработки"").ЭтоЛожь();
	Ожидаем.Что(КонтейнерФормыОбработки.СлучайныйПорядокВыполнения, ""КонтейнерФормыОбработки"").ЭтоЛожь();
КонецПроцедуры
// } Проверка режимов случайного или строгого порядка выполнения тестов

// { Проверка загрузки тестовых обработок с новым API
&НаКлиенте
Процедура ТестДолжен_Загрузить_ОбработкуСНовымAPI() Экспорт
	ФайлКонтекстаЯдра = Новый Файл(КонтекстЯдра.ИспользуемоеИмяФайла);
	ФайлОбработкиСНовымAPI = Новый Файл(ФайлКонтекстаЯдра.Путь + ""\Tests\Plugins\Тесты_ЗагрузчикФайла_НовыйAPIОбъявленияТестов.epf"");
	ДеревоТестов = ЗагрузчикФайла.Загрузить(КонтекстЯдра, ФайлОбработкиСНовымAPI.ПолноеИмя);
	
	ТестыОбработкиСНовымAPI = ДеревоТестов.Строки[0];
	
	Ожидаем.Что(ТестыОбработкиСНовымAPI.СлучайныйПорядокВыполнения, ""ТестыОбработкиСНовымAPI порядок выполнения"").ЭтоИстина();
	Ожидаем.Что(ТестыОбработкиСНовымAPI.Строки, ""ТестыОбработкиСНовымAPI количество дочерних узлов"").ИмеетДлину(5);
	
	Элемент1 = ТестыОбработкиСНовымAPI.Строки[0];
	Ожидаем.Что(Элемент1.Тип, ""Элемент1.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Элемент);
	Ожидаем.Что(Элемент1.Путь, ""Элемент1.Путь"").Равно(ФайлОбработкиСНовымAPI.ПолноеИмя);
	Ожидаем.Что(Элемент1.ИмяМетода, ""Элемент1.ИмяМетода"").Равно(""ТестДолжен_ПроверитьВыполнение_ПростогоТеста"");
	
	ДочернийКонтейнер1 = ТестыОбработкиСНовымAPI.Строки[1];
	Ожидаем.Что(ДочернийКонтейнер1.Тип, ""ДочернийКонтейнер1.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(ДочернийКонтейнер1.СлучайныйПорядокВыполнения, ""ДочернийКонтейнер1 порядок выполнения"").ЭтоИстина();
	Ожидаем.Что(ДочернийКонтейнер1.Имя, ""ДочернийКонтейнер1.Имя"").Равно(""Группа со случайным порядком выполнения"");
	Ожидаем.Что(ДочернийКонтейнер1.Строки, ""ДочернийКонтейнер1.Строки"").ИмеетТип(""Массив"").ИмеетДлину(2);
	
	ДочернийКонтейнер2 = ТестыОбработкиСНовымAPI.Строки[2];
	Ожидаем.Что(ДочернийКонтейнер2.Тип, ""ДочернийКонтейнер2.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(ДочернийКонтейнер2.СлучайныйПорядокВыполнения, ""ДочернийКонтейнер2 порядок выполнения"").ЭтоЛожь();
	Ожидаем.Что(ДочернийКонтейнер2.Имя, ""ДочернийКонтейнер2.Имя"").Равно(""Группа со строгим порядком выполнения"");
	Ожидаем.Что(ДочернийКонтейнер2.Строки, ""ДочернийКонтейнер2.Строки"").ИмеетТип(""Массив"").ИмеетДлину(2);
	
	ДочернийКонтейнер3 = ТестыОбработкиСНовымAPI.Строки[3];
	Ожидаем.Что(ДочернийКонтейнер3.Тип, ""ДочернийКонтейнер3.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(ДочернийКонтейнер3.СлучайныйПорядокВыполнения, ""ДочернийКонтейнер3 порядок выполнения"").ЭтоЛожь();
	Ожидаем.Что(ДочернийКонтейнер3.Имя, ""ДочернийКонтейнер3.Имя"").Равно(""Группа параметризированных тестов со строгим порядком выполнения"");
	Ожидаем.Что(ДочернийКонтейнер3.Строки, ""ДочернийКонтейнер3.Строки"").ИмеетТип(""Массив"").ИмеетДлину(2);
	
	ДочернийКонтейнер4_Форма = ТестыОбработкиСНовымAPI.Строки[4];
	Ожидаем.Что(ДочернийКонтейнер4_Форма.Тип, ""ДочернийКонтейнер4_Форма.Тип"").Равно(КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер);
	Ожидаем.Что(ДочернийКонтейнер4_Форма.СлучайныйПорядокВыполнения, ""ДочернийКонтейнер4_Форма порядок выполнения"").ЭтоИстина();
	Ожидаем.Что(ДочернийКонтейнер4_Форма.Имя, ""ДочернийКонтейнер4_Форма.Имя"").Равно(""УпрФорма # Тесты_ЗагрузчикФайла_НовыйAPIОбъявленияТестов"");
	Ожидаем.Что(ДочернийКонтейнер4_Форма.Строки, ""ДочернийКонтейнер4_Форма.Строки"").ИмеетТип(""Массив"").ИмеетДлину(4);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Сформировать_ПараметрыТеста_Простые() Экспорт
	ПараметрыТеста = ЗагрузчикФайла.ПараметрыТеста(1, 2, 3, 4, 5, 6, 7, 8, 9);
	Ожидаем.Что(ПараметрыТеста, ""ПараметрыТеста"").ИмеетТип(""Массив"").ИмеетДлину(9);
	Ожидаем.Что(ПараметрыТеста[0], ""ПараметрыТеста[0]"").Равно(1);
	Ожидаем.Что(ПараметрыТеста[4], ""ПараметрыТеста[0]"").Равно(5);
	Ожидаем.Что(ПараметрыТеста[8], ""ПараметрыТеста[0]"").Равно(9);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Сформировать_ПараметрыТеста_СНеопределеноВСередине() Экспорт
	ПараметрыТеста = ЗагрузчикФайла.ПараметрыТеста(Истина, , Ложь);
	Ожидаем.Что(ПараметрыТеста, ""ПараметрыТеста"").ИмеетДлину(3);
	Ожидаем.Что(ПараметрыТеста[0], ""ПараметрыТеста[0]"").ЭтоИстина();
	Ожидаем.Что(ПараметрыТеста[1], ""ПараметрыТеста[1]"").ЭтоНеопределено();
	Ожидаем.Что(ПараметрыТеста[2], ""ПараметрыТеста[2]"").ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Сформировать_ПараметрыТеста_СНесколькимиНеопределеноВНачале() Экспорт
	ПараметрыТеста = ЗагрузчикФайла.ПараметрыТеста(, , Истина, Ложь);
	Ожидаем.Что(ПараметрыТеста, ""ПараметрыТеста"").ИмеетДлину(4);
	Ожидаем.Что(ПараметрыТеста[0], ""ПараметрыТеста[0]"").ЭтоНеопределено();
	Ожидаем.Что(ПараметрыТеста[1], ""ПараметрыТеста[1]"").ЭтоНеопределено();
	Ожидаем.Что(ПараметрыТеста[2], ""ПараметрыТеста[2]"").ЭтоИстина();
	Ожидаем.Что(ПараметрыТеста[3], ""ПараметрыТеста[3]"").ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_Сформировать_ПараметрыТеста_СЕдинственнымПараметромНеопределено() Экспорт
	ПараметрыТеста = ЗагрузчикФайла.ПараметрыТеста(Неопределено);
	Ожидаем.Что(ПараметрыТеста, ""ПараметрыТеста"").ИмеетДлину(1);
	Ожидаем.Что(ПараметрыТеста[0], ""ПараметрыТеста[0]"").ЭтоНеопределено();
КонецПроцедуры
// } Проверка загрузки тестовых обработок с новым API

// Helpers
&НаКлиенте
Функция НайтиПервыйДочернийКонтейнер(Знач Контейнер)
	Перем ДочернийКонтейнер;
	Для каждого ДочернийЭлементКонтейнера Из Контейнер.Строки Цикл
		Если ДочернийЭлементКонтейнера.Тип = КонтекстЯдра.Объект.ТипыУзловДереваТестов.Контейнер Тогда
			ДочернийКонтейнер = ДочернийЭлементКонтейнера;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДочернийКонтейнер;
КонецФункции
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",cd570446-fb13-4855-bb0e-5695a8e88940}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}