Перем СозданныеВОкнеИФормеПеременные;
Перем Отступ;

Функция Версия() Экспорт
	Возврат "4.0.0.6";
КонецФункции

Функция ЗаголовокФормы() Экспорт
	Возврат СокрЛП(Метаданные().Синоним) + ", версия " + Версия();;
КонецФункции

Функция Преобразовать(ТекстДляПреобразования) Экспорт

	Читатель = Новый ЧтениеXML();
	Читатель.УстановитьСтроку(ТекстДляПреобразования);

	СозданныеПроцедуры = Новый Массив();
	СозданныеВОкнеИФормеПеременные = Новый Соответствие();

	Писатель = Новый ТекстовыйДокумент();

	Читатель.ПерейтиКСодержимому();
	Отступ = 0;

	// Преобразовываем файл
	Если Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента И
		Читатель.Имя = "uilog" Тогда

		ПреобразоватьВСценарий(Читатель, Писатель);

	КонецЕсли;
	
	Возврат Писатель.ПолучитьТекст();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции
Процедура ДобавитьСтроку(Писатель, СтрокаДляВывода, ДобавлятьПереход = Ложь)

	// Добавляем в начало строки необходимое количество пробелов
	Результат = "";
	Для Индекс = 1 To Отступ Цикл
		Результат = Результат + "	";
	КонецЦикла;
	Результат = Результат + СтрокаДляВывода;

	// Добавляем строку в конец
	Писатель.ДобавитьСтроку(Результат);
	Если ДобавлятьПереход Тогда
		Писатель.ДобавитьСтроку("");
	КонецЕсли;

КонецПроцедуры

Процедура ВставитьСтроку(Писатель, НомерСтроки, СтрокаДляВывода)

	// Добавляем в начало строки необходимое количество пробелов
	Результат = "";
	Для Индекс = 1 To Отступ Цикл
		Результат = Результат + "	";
	КонецЦикла;
	Результат = Результат + СтрокаДляВывода;

	// Вставляем строку в начало
	Писатель.ВставитьСтроку(НомерСтроки, Результат);

КонецПроцедуры

Функция УдвоитьКавычки(СтрокаДляВывода)

	// Для правильного вывода в файл удваиваем кавычки
	Возврат СтрЗаменить(СтрокаДляВывода, """", """""");

КонецФункции

Функция ЗначенияПоискаДляЗаголовка(Заголовок, Имя)
	
	// Поиск "по заголовку" или "по имени и заголовку"
	Если ПоискОбъектов = 0 Или ПоискОбъектов = 2 Тогда
		Если Не Заголовок = Неопределено Тогда
			Возврат """" + УдвоитьКавычки(Заголовок) + """";
		КонецЕсли;
		Если ПоискОбъектов = 2 и Имя = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'У объекта должны быть заполнены заголовок или имя'");
		КонецЕсли;
		Возврат "";
	// Поиск "по имени"
	ИначеЕсли ПоискОбъектов = 1 Тогда
		Если Имя = Неопределено Тогда
			Возврат """" + УдвоитьКавычки(Заголовок) + """";
		КонецЕсли;
		Возврат "";
	// Поиск по имени и заголовку
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип поиска объектов: '") + ПоискОбъектов;
	КонецЕсли;
	
КонецФункции

Функция ЗначенияПоискаДляИмени(Заголовок, Имя)
	
	// Поиск "по заголовку"
	Если ПоискОбъектов = 0 Тогда
		Возврат "";
	// Поиск "по имени" или "по имени и заголовку"
	ИначеЕсли ПоискОбъектов = 1 Или ПоискОбъектов = 2 Тогда
		Если Не Имя = Неопределено Тогда
			Возврат """" + Имя + """";
		КонецЕсли;
		Если ПоискОбъектов = 2 И Заголовок = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'У объекта должны быть заполнены заголовок или имя'");
		КонецЕсли;
		Возврат "";
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип поиска объектов: '") + ПоискОбъектов;
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта)

	// Имя переменной начинается с имени типа
	Если ТипОбъекта = "ClientApplicationWindow" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "ОкноПриложения", "ClientWindow");
	ИначеЕсли ТипОбъекта = "Form" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "Форма", "Form");
	ИначеЕсли ТипОбъекта = "FormField" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "Поле", "Field");
	ИначеЕсли ТипОбъекта = "FormButton" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "Кнопка", "Button");
	ИначеЕсли ТипОбъекта = "FormGroup" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "Группа", "Group");
	ИначеЕсли ТипОбъекта = "FormTable" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "Таблица", "Table");
	ИначеЕсли ТипОбъекта = "FormDecoration" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "Декорация", "Decoration");
	ИначеЕсли ТипОбъекта = "CommandInterface" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "КомандныйИнтерфейс", "CommandInterface");
	ИначеЕсли ТипОбъекта = "CommandInterfaceGroup" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "ГруппаКомандногоИнтерфейса", "CommandInterfaceGroup");
	ИначеЕсли ТипОбъекта = "CommandInterfaceButton" Тогда
		ИмяПеременной = ? (ВариантВстроенногоЯзыка = "ru", "КнопкаКомандногоИнтерфейса", "CommandInterfaceButton");
	Иначе
		ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + ТипОбъекта;
	КонецЕсли;

	// Отсекаем всё, что не является буквами и цифрами
	ПредыдущийСимволЭтоПробел = Истина;
	ДлинаСтроки = СтрДлина(ЗаголовокОбъекта);
	Для Индекс = 1 To ДлинаСтроки Цикл

		СледующийСимвол = Сред(ЗаголовокОбъекта,Индекс, 1);
		Если ЭтоБуква(СледующийСимвол) Или ЭтоЦифра(СледующийСимвол) Тогда
			ИмяПеременной = ИмяПеременной + ? (ПредыдущийСимволЭтоПробел, ВРег(СледующийСимвол), СледующийСимвол);
			ПредыдущийСимволЭтоПробел = Ложь;
		Иначе
			ПредыдущийСимволЭтоПробел = Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат ИмяПеременной;

КонецФункции

Функция ЭтоЦифра(Символ)

	Код = КодСимвола (Символ);
	Возврат Код >= 48 И Код <= 57;

КонецФункции

Функция ЭтоБуква(Символ)

	// Считаем, что для небуквенных символов коды не отличаются
	Возврат КодСимвола(НРег(Символ)) <> КодСимвола(ВРег(Символ));

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры преобразования
Процедура ПреобразоватьВСценарий(Читатель, Писатель)

	Если ГененироватьКодПодключенияККлиенту Тогда

		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "&НаКлиенте", "&AtClient"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "Процедура ", "Procedure ") + ИмяОсновнойПроцедуры + "()", Истина);

		Отступ = Отступ + 1;

		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "ТестовоеПриложение = Новый ТестируемоеПриложение();",
																	"TestedApplication = New TestedApplication();"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "ВремяОкончанияОжидания = ТекущаяДата() + 60;",
																	"WaitingTime = CurrentDate() + 60;"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "Подключен = Ложь;",
																	"Connected = Ложь;"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "ОписаниеОшибкиСоединения = """";",
																	"ConnectingErrorDescription = """";"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл",
																	"Пока Не CurrentDate() >= WaitingTime Do"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "	Попытка",
																	"	Try"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "		ТестовоеПриложение.УстановитьСоединение();",
																	"		TestedApplication.Connect();"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "		Подключен = Истина;",
																	"		Connected = Истина;"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "		Прервать;",
																	"		Break;"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "	Исключение",
																	"	Except"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "		ОписаниеОшибкиСоединения = ОписаниеОшибки();",
																	"		ConnectingErrorDescription = ErrorDescription();"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "	КонецПопытки;",
																	"	EndTry;"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "КонецЦикла;",
																	"EndDo;"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "Если Не Подключен Тогда",
																	"Если Не Connected Тогда"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "	ТестовоеПриложение = Неопределено;",
																	"	TestedApplication = Undefined;"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "	Сообщить(""Не смогли установить соединение! "" + Символы.ПС + ОписаниеОшибкиСоединения);",
																	"	Message(""Couldn't establish connection! "" + Chars.LF + ConnectingErrorDescription);"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "	Возврат;",
																	"	Возврат;"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "КонецЕсли;",
																	"КонецЕсли;"), Истина);

		Отступ = Отступ - 1;

	Иначе

		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "&НаКлиенте", "&AtClient"));
		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "Процедура ", "Procedure ") + ИмяОсновнойПроцедуры + ? (ВариантВстроенногоЯзыка = "ru", "(ТестовоеПриложение)", "(TestedApplication)"), Истина);

	КонецЕсли;

	Читатель.Прочитать();

	ЛокальныйПисатель = Писатель;
	Если РазделятьКодНаПроцедуры Тогда
		ЛокальныйПисатель = Новый ТекстовыйДокумент();
	КонецЕсли;

	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "ClientApplicationWindow" Тогда

			ЛокальноеИмяПроцедуры = "";
			ПреобразоватьОкно(Читатель, ЛокальныйПисатель, ЛокальноеИмяПроцедуры);

			Если РазделятьКодНаПроцедуры Тогда

				Отступ = Отступ + 1;
				ДобавитьСтроку(Писатель, ЛокальноеИмяПроцедуры + ? (ВариантВстроенногоЯзыка = "ru", "(ТестовоеПриложение);", "(TestedApplication);"));
				Отступ = Отступ - 1 ;

			КонецЕсли;

		ИначеЕсли Читатель.Имя = "Form" Тогда

			ДобавитьСтроку(Писатель, "");

			Отступ = Отступ + 1;

			ОбрабатываемоеОкно = "";
			СозданныеВОкнеИФормеПеременные.Вставить(ОбрабатываемоеОкно, Новый Соответствие());
			ПреобразоватьФорму(Читатель, Писатель, ? (ВариантВстроенногоЯзыка = "ru", "ТестовоеПриложение", "TestedApplication"));

			Отступ = Отступ - 1;

		Иначе

			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;

		КонецЕсли;

	КонецЦикла;

	Если РазделятьКодНаПроцедуры Тогда
		ДобавитьСтроку(Писатель, "");
	КонецЕсли;
	ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "КонецПроцедуры", "EndProcedure"));

	Если РазделятьКодНаПроцедуры Тогда
		ДобавитьСтроку(Писатель, ЛокальныйПисатель.ПолучитьТекст());
	КонецЕсли;

КонецПроцедуры

Процедура ПреобразоватьОкно(Читатель, Писатель, ЛокальноеИмяПроцедуры)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	ЭтоГлавноеОкно = Ложь;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "caption" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "isMain" Тогда
			ЭтоГлавноеОкно = Булево(Читатель.Значение);
		КонецЕсли;
	КонецЦикла;

	ИмяПеременной = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЭтоГлавноеОкно, ? (ВариантВстроенногоЯзыка = "ru", "Основное", "Main"), ЗаголовокОбъекта));

	ОбрабатываемоеОкно = ИмяПеременной;
	
	Если РазделятьКодНаПроцедуры Тогда 
		КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();
	КонецЕсли;

	Отступ = Отступ + 1;

	Если СозданныеВОкнеИФормеПеременные.Получить(ОбрабатываемоеОкно) = Неопределено Тогда

		СозданныеВОкнеИФормеПеременные.Вставить(ОбрабатываемоеОкно, Новый Соответствие());

		Если ЭтоГлавноеОкно Тогда
			ДобавитьСтроку(Писатель, "");
			ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", " = Неопределено;", " = Undefined;"));
			ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();",
																		"TestedApplicationClienWindows = TestedApplication.GetChildObjects();"));
			ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл",
																		"For Each TestedWindow In TestedApplicationClienWindows Do"));
			ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "	Если ТестируемоеОкно.Основное Тогда",
																		"	Если TestedWindow.IsMain Тогда"));
			ДобавитьСтроку(Писатель, "		" + ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", " = ТестируемоеОкно;",
																									" = TestedWindow;"));
			ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "		Прервать;", 
																		"		Break;"));
			ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "	КонецЕсли;",
																		"	КонецЕсли;"));
			ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "КонецЦикла;",
																		"EndDo;"));
		Иначе

			ДобавитьСтроку(Писатель, 
						   ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", " = ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), """, 
						   													  " = TestedApplication.FindIbject(Type(""TestedClientApplicationWindow""), """) + УдвоитьКавычки(ЗаголовокОбъекта) + """, , 30);");
		КонецЕсли;

	КонецЕсли;
	ОкноБылоЗакрыто = Ложь;

	Читатель.Прочитать();
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "Form" Тогда
			ПреобразоватьФорму(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "CommandInterface" Тогда
			ПреобразоватьКомандныйИнтерфейсОкна(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Не ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Отступ = Отступ - 1;
	Читатель.Прочитать();

	Если ОкноБылоЗакрыто Или РазделятьКодНаПроцедуры Тогда
		СозданныеВОкнеИФормеПеременные.Удалить(ОбрабатываемоеОкно);
	КонецЕсли;

	Если РазделятьКодНаПроцедуры Тогда

		КоличествоПроцедур = 0;
		Пока Истина Цикл
			ЛокальноеИмяПроцедуры = ИмяПеременной + ПоследнийОбработанныйЭлементУправления + ПоследняяОбработаннаяКоманда + ? (КоличествоПроцедур = 0, "", КоличествоПроцедур);
			Пролог = ? (ВариантВстроенногоЯзыка = "ru", "Процедура ", "Procedure ") + ЛокальноеИмяПроцедуры + ? (ВариантВстроенногоЯзыка = "ru", "(ТестовоеПриложение)", "(TestedApplication)");
			Если СозданныеПроцедуры.Find(Пролог) = Неопределено Тогда
				СозданныеПроцедуры.Add(Пролог);
				Прервать;
			КонецЕсли;
			КоличествоПроцедур = КоличествоПроцедур + 1;
		КонецЦикла;

		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой, Пролог);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой, ? (ВариантВстроенногоЯзыка = "ru", "&НаКлиенте", "&AtClient"));
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой, "");

		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "КонецПроцедуры", "EndProcedure"), Истина);

	КонецЕсли;

КонецПроцедуры

Процедура ПреобразоватьКомандныйИнтерфейсОкна(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта);
	ИмяПеременной = РодительскаяПеременная + "КомандныйИнтерфейс";

	ФормыОкна = СозданныеВОкнеИФормеПеременные.Получить(ОбрабатываемоеОкно);
	Если ФормыОкна.Получить(ОбрабатываемаяФорма) = Неопределено Тогда

		ФормыОкна.Вставить(ОбрабатываемаяФорма, Новый Массив());
	
		ДобавитьСтроку(Писатель, ИмяПеременной + " = " + РодительскаяПеременная + ? (ВариантВстроенногоЯзыка = "ru", ".ПолучитьКомандныйИнтерфейс();", ".GetCommandInterface();"));

	КонецЕсли;

	Читатель.Прочитать();

	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		Если Читатель.Имя = "CommandInterfaceButton" Тогда
			ПреобразоватьКнопкуКомандногоИнтерфейса(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "CommandInterfaceGroup" Тогда
			ПреобразоватьГруппуКомандногоИнтерфейса(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Не ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Читатель.Прочитать();

КонецПроцедуры

Процедура ПреобразоватьКнопкуКомандногоИнтерфейса(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта);
	ИмяПеременной = ? (РазделятьКодНаПроцедуры, "", РодительскаяПеременная) + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной + " = " + РодительскаяПеременная + ? (ВариантВстроенногоЯзыка = "ru", ".НайтиОбъект(Тип(""ТестируемаяКнопкаКомандногоИнтерфейса""), """, 
					   																					   ".FindObject(Type(""TestedCommandInterfaceButton""), """) + УдвоитьКавычки(ЗаголовокОбъекта) + """);");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

Процедура ПреобразоватьГруппуКомандногоИнтерфейса(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта);
	ИмяПеременной = ? (РазделятьКодНаПроцедуры, "", РодительскаяПеременная) + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "CommandInterfaceButton" Тогда
			ПреобразоватьКнопкуКомандногоИнтерфейса(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "CommandInterfaceGroup" Тогда
			ПреобразоватьГруппуКомандногоИнтерфейса(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если СтроитьПолнуюИерархию Тогда
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной + " = " + РодительскаяПеременная + ? (ВариантВстроенногоЯзыка = "ru", ".НайтиОбъект(Тип(""ТестируемаяГруппаКомандногоИнтерфейса""), """, 
					   																					   ".FindObject(Type(""TestedCommandInterfaceGroup""), """) + УдвоитьКавычки(ЗаголовокОбъекта) + """);");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

Процедура ПреобразоватьФорму(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта);
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;
	ОбрабатываемаяФорма = ИмяПеременной;

	ФормыОкна = СозданныеВОкнеИФормеПеременные.Получить(ОбрабатываемоеОкно);
	Если ФормыОкна.Получить(ОбрабатываемаяФорма) = Неопределено Тогда

		ФормыОкна.Вставить(ОбрабатываемаяФорма, Новый Массив());
	
		ДобавитьСтроку(Писатель, 
					   ИмяПеременной + " = " + РодительскаяПеременная + ? (ВариантВстроенногоЯзыка = "ru", ".НайтиОбъект(Тип(""ТестируемаяФорма""), """, 
					   																					   ".FindObject(Type(""TestedForm""), """) + УдвоитьКавычки(ЗаголовокОбъекта) + """);");

	КонецЕсли;

	Читатель.Прочитать();

	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		Если Читатель.Имя = "FormField" Тогда
			ПреобразоватьПоле(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "FormTable" Тогда
			ПреобразоватьТаблицу(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "FormDecoration" Тогда
			ПреобразоватьДекорацию(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "FormButton" Тогда
			ПреобразоватьКнопку(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "FormGroup" Тогда
			ПреобразоватьГруппу(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Не ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Читатель.Прочитать();

КонецПроцедуры

Процедура ПреобразоватьТаблицу(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = ? (РазделятьКодНаПроцедуры, "", РодительскаяПеременная) + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "FormField" Тогда
			ПреобразоватьПоле(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormGroup" Тогда
			ПреобразоватьГруппу(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной + " = " + РодительскаяПеременная + 
					   ? (ВариантВстроенногоЯзыка = "ru", ".НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""), ", ".FindObject(Type(""TestedFormTable""), ") +
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

Процедура ПреобразоватьПоле(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = ? (РазделятьКодНаПроцедуры, "", РодительскаяПеременная) + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "FormField" Тогда
			ПреобразоватьПоле(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной + 
					   " = " + 
					   РодительскаяПеременная + 
					   ? (ВариантВстроенногоЯзыка = "ru", ".НайтиОбъект(Тип(""ТестируемоеПолеФормы""), ", ".FindObject(Type(""TestedFormField""), ") + 
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

Процедура ПреобразоватьКнопку(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = ? (РазделятьКодНаПроцедуры, "", РодительскаяПеременная) + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной +
					   " = " +
					   РодительскаяПеременная +
					   ? (ВариантВстроенногоЯзыка = "ru", ".НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""), ", ".FindObject(Type(""TestedFormButton""), ") +
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

Процедура ПреобразоватьДекорацию(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = ? (РазделятьКодНаПроцедуры, "", РодительскаяПеременная) + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной +
					   " = " +
					   РодительскаяПеременная +
					   ? (ВариантВстроенногоЯзыка = "ru", ".НайтиОбъект(Тип(""ТестируемаяДекорацияФормы""), ", ".FindObject(Type(""TestedFormDecoration""), ") +
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

Процедура ПреобразоватьГруппу(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = ? (РазделятьКодНаПроцедуры, "", РодительскаяПеременная) + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "FormField" Тогда
			ПреобразоватьПоле(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormTable" Тогда
			ПреобразоватьТаблицу(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormDecoration" Тогда
			ПреобразоватьДекорацию(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormButton" Тогда
			ПреобразоватьКнопку(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormGroup" Тогда
			ПреобразоватьГруппу(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной +
					   " = " +
					   РодительскаяПеременная +
					   ? (ВариантВстроенногоЯзыка = "ru", ".НайтиОбъект(Тип(""ТестируемаяГруппаФормы""), ", ".FindObject(Type(""TestedFormGroup""), ") +
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

Функция ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной)

	Если Читатель.Имя = "activate" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Активизировать();", ".Activate();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Активизировать", "Activate");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "inputText" Тогда
		ТекстДляВывода = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "text" Тогда
				ТекстДляВывода = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ВвестиТекст(""", ".InputText(""") + УдвоитьКавычки(ТекстДляВывода) + """);", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ВвестиТекст", "InputText");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "click" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Нажать();", ".Click();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Нажать", "Click");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "clear" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Очистить();", ".Clear();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Очистить", "Clear");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "open" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Открыть();", ".Open();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Открыть", "Open");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "startChoosing" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Выбрать();", ".StartChoosing();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Выбрать", "StartChoosing");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "startChoosingFromChoiceList" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ВыбратьИзСпискаВыбора();", ".StartChoosingFromChoiceList();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ВыбратьИзСпискаВыбора", "StartChoosingFromChoiceList");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "executeChoiceFromChoiceList" Тогда
		Представление = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "presentation" Тогда
				Представление = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ОжидатьФормированияВыпадающегоСписка();", ".WaitForDropDownListGeneration();"), Истина);
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ВыполнитьВыборИзСпискаВыбора(""", ".ExecuteChoiceFromChoiceList(""") + УдвоитьКавычки(Представление) + """);", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ВыполнитьВыборИзСпискаВыбора", "ВыполнитьВыборИзСпискаВыбора");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "increaseValue" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".УвеличитьЗначение();", ".IncreaseValue();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "УвеличитьЗначение", "IncreaseValue");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "decreaseValue" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".УменьшитьЗначение();", ".DecreaseValue();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "УменьшитьЗначение", "DecreaseValue");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "setCheck" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".УстановитьОтметку();", ".SetCheck();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "УстановитьОтметку", "SetCheck");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "selectOption" Тогда
		Представление = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "presentation" Тогда
				Представление = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ВыбратьВариант(""", ".SelectOption(""") + УдвоитьКавычки(Представление) + """);", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ВыбратьВариант", "SelectOption");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoNextMonth" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиНаМесяцВперед();", ".GotoNextMonth();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиНаМесяцВперед", "GotoNextMonth");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoPreviousMonth" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиНаМесяцНазад();", ".GotoPreviousMonth();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиНаМесяцНазад", "GotoPreviousMonth");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoNextYear" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиНаГодВперед();", ".GotoNextYear();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиНаГодВперед", "GotoNextYear");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoPreviousYear" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиНаГодНазад();", ".GotoPreviousYear();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиНаГодНазад", "GotoPreviousYear");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoDate" Тогда
		Представление = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "date" Тогда
				Представление = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиКДате(XMLЗначение(Тип(""Дата""), """, ".GotoDate(XMLValue(Type(""Date""), """) + Представление + """));", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиКДате", "GotoDate");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "setCurrentArea" Тогда
		Область = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "area" Тогда
				Область = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".УстановитьТекущуюОбласть(""", ".SetCurrentArea(""") + Область + """);", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "УстановитьТекущуюОбласть", "SetCurrentArea");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "beginEditingCurrentArea" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".НачатьРедактированиеТекущейОбласти();", ".BeginEditingCurrentArea();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "НачатьРедактированиеТекущейОбласти", "BeginEditingCurrentArea");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "finishEditingCurrentArea" Тогда
		ФлагОтмены = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "cancel" Тогда
				ФлагОтмены = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ЗавершитьРедактированиеТекущейОбласти(", ".EndEditingCurrentArea(") + ФлагОтмены + ");", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ЗавершитьРедактированиеТекущейОбласти", "EndEditingCurrentArea");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoNextItem" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиКСледующемуЭлементу();", ".GotoNextItem();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиКСледующемуЭлементу", "GotoNextItem");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoPreviousItem" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиКПредыдущемуЭлементу();", ".GotoPreviousItem();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиКПредыдущемуЭлементу", "GotoPreviousItem");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "goOneLevelUp" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиНаУровеньВверх();", ".GoOneLevelUp();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиНаУровеньВверх", "GoOneLevelUp");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "goOneLevelDown" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиНаУровеньВниз();", ".GoOneLevelDown();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиНаУровеньВниз", "GoOneLevelDown");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoNextRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиКСледующейСтроке();", ".GotoNextRow();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиКСледующейСтроке", "GotoNextRow");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoPreviousRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиКПредыдущейСтроке();", ".GotoPreviousRow();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиКПредыдущейСтроке", "GotoPreviousRow");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoFirstRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиКПервойСтроке();", ".GotoFirstRow();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиКПервойСтроке", "GotoFirstRow");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoLastRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ПерейтиКПоследнейСтроке();", ".GotoLastRow();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиКПоследнейСтроке", "GotoLastRow");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoRow" Тогда
		
		Направление = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "direction" Тогда
				Направление = ? (ВариантВстроенногоЯзыка = "ru", 
										? (Читатель.Значение = "up", "НаправлениеПереходаКСтроке.Вверх", "НаправлениеПереходаКСтроке.Вниз"),
										? (Читатель.Значение = "up", "RowGotoDirection.Up", "RowGotoDirection.Down"));
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;

		Читатель.Прочитать();

		ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "ОписаниеСтроки = Новый Соответствие();", "RowDescription = New Map();"));

		Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
			
			Если Читатель.Имя = "Field" Тогда

				ЗаголовокСтолбца = "";
				ТекстЯчейки = "";
				Пока Читатель.ПрочитатьАтрибут() Цикл
					Если Читатель.Имя = "title" Тогда
						ЗаголовокСтолбца = Читатель.Значение;
					ИначеЕсли Читатель.Имя = "cellText" Тогда
						ТекстЯчейки = Читатель.Значение;
					Иначе
						ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
					КонецЕсли;
				КонецЦикла;
				ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", 
											"ОписаниеСтроки.Вставить(""", 
											"RowDescription.Insert(""") + 
											ЗаголовокСтолбца + """, """ + УдвоитьКавычки(ТекстЯчейки) + """);");
				Читатель.Прочитать();

			Иначе

				ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;

			КонецЕсли;

			Читатель.Прочитать();

		КонецЦикла;

		ДобавитьСтроку(Писатель, 
						ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", 
											".ПерейтиКСтроке(ОписаниеСтроки" + ? (Направление = "", "", ", " + Направление)+ ");", 
											".GotoRow(RowDescription" + ? (Направление = "", "", ", " + Направление) + ");"),
						Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ПерейтиКСтроке", "GotoRow");

	ИначеЕсли Читатель.Имя = "choose" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Выбрать();", ".Choose();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Выбрать", "Choose");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "changeRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ИзменитьСтроку();", ".ChangeRow();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ИзменитьСтроку", "ChangeRow");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "endEditRow" Тогда
		ФлагОтмены = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "cancel" Тогда
				ФлагОтмены = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ЗакончитьРедактированиеСтроки(", ".EndEditRow(") + ФлагОтмены + ");", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ЗакончитьРедактированиеСтроки", "EndEditRow");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "addRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ДобавитьСтроку();", ".AddRow();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ДобавитьСтроку", "AddRow");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "deleteRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".УдалитьСтроку();", ".DeleteRow();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "УдалитьСтроку", "DeleteRow");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "expand" Тогда

		Читатель.Прочитать();

		Если Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента И Читатель.Имя = "Field" Тогда

			ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "ОписаниеСтроки = Новый Соответствие();", "RowDescription = New Map();"));

			Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
				
				Если Читатель.Имя = "Field" Тогда

					ЗаголовокСтолбца = "";
					ТекстЯчейки = "";
					Пока Читатель.ПрочитатьАтрибут() Цикл
						Если Читатель.Имя = "title" Тогда
							ЗаголовокСтолбца = Читатель.Значение;
						ИначеЕсли Читатель.Имя = "cellText" Тогда
							ТекстЯчейки = Читатель.Значение;
						Иначе
							ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
						КонецЕсли;
					КонецЦикла;
					ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", 
												"ОписаниеСтроки.Вставить(""", 
												"RowDescription.Insert(""") + 
												ЗаголовокСтолбца + """, """ + УдвоитьКавычки(ТекстЯчейки) + """);");
					Читатель.Прочитать();

				Иначе

					ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;

				КонецЕсли;

				Читатель.Прочитать();

			КонецЦикла;

			ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Развернуть(ОписаниеСтроки);", ".Expand(RowDescription);"), Истина);

		Иначе

			ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Развернуть();", ".Expand();"), Истина);

		КонецЕсли;

		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Развернуть", "Expand");

	ИначеЕсли Читатель.Имя = "collapse" Тогда

		Читатель.Прочитать();

		Если Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента И Читатель.Имя = "Field" Тогда

			ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", "ОписаниеСтроки = Новый Соответствие();", "RowDescription = New Map();"));

			Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
				
				Если Читатель.Имя = "Field" Тогда

					ЗаголовокСтолбца = "";
					ТекстЯчейки = "";
					Пока Читатель.ПрочитатьАтрибут() Цикл
						Если Читатель.Имя = "title" Тогда
							ЗаголовокСтолбца = Читатель.Значение;
						ИначеЕсли Читатель.Имя = "cellText" Тогда
							ТекстЯчейки = Читатель.Значение;
						Иначе
							ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
						КонецЕсли;
					КонецЦикла;
					ДобавитьСтроку(Писатель, ? (ВариантВстроенногоЯзыка = "ru", 
												"ОписаниеСтроки.Вставить(""", 
												"RowDescription.Insert(""") + 
												ЗаголовокСтолбца + """, """ + УдвоитьКавычки(ТекстЯчейки) + """);");
					Читатель.Прочитать();

				Иначе

					ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;

				КонецЕсли;

				Читатель.Прочитать();

			КонецЦикла;

			ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Свернуть(ОписаниеСтроки);", ".Collapse(RowDescription);"), Истина);

		Иначе

			ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Свернуть();", ".Collapse();"), Истина);

		КонецЕсли;
		
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Свернуть", "Collapse");

	ИначеЕсли Читатель.Имя = "close" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".Закрыть();", ".Close();"), Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "Закрыть", "Close");
		ОкноБылоЗакрыто = Истина;
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "chooseUserMessage" Тогда
		ТекстСообщения = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "messageText" Тогда
				ТекстСообщения = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ВыбратьСообщениеПользователю(""", ".ChooseUserMessage(""") + ТекстСообщения + """);", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ВыбратьСообщениеПользователю", "ChooseUserMessage");
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "executeCommand" Тогда
		СсылкаНаКоманду = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "url" Тогда
				СсылкаНаКоманду = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ? (ВариантВстроенногоЯзыка = "ru", ".ВыполнитьКоманду(""", ".ExecuteCommand(""") + СсылкаНаКоманду + """);", Истина);
		ПоследняяОбработаннаяКоманда = ? (ВариантВстроенногоЯзыка = "ru", "ВыполнитьКоманду", "ExecureCommand");
		Читатель.Прочитать();

	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Читатель.Прочитать();

	Возврат Истина;

КонецФункции

Функция Инициализация()
	
	ДвоичныеДанныеПрограммыРаспаковки = ПолучитьМакет("UnpackV8");
	ДвоичныеДанныеDLL=ЭтотОбъект.ПолучитьМакет("zlib1");
	ДвоичныеДанныеПрограммыРаспаковки.Записать(КаталогВременныхФайлов()+"UnpackV8.exe");
	ДвоичныеДанныеDLL.Записать(КаталогВременныхФайлов()+"zlib1.dll");
	ФайлПрограммыРаспаковки = Новый Файл(КаталогВременныхФайлов()+"UnpackV8.exe");
	ФайлDLL=Новый Файл(КаталогВременныхФайлов()+"zlib1.dll");
	
	Возврат ФайлПрограммыРаспаковки; 	
	
КонецФункции

Функция СоздатьВнешнююОбработку(ТекстДляПреобразования) Экспорт
	
	ТекстПроцедуры = Преобразовать(ТекстДляПреобразования);
	ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, """", """""");
	
	ФайлПрограммыРаспаковки = Инициализация();
	
	ГлобальныйКлюч = "" + Новый УникальныйИдентификатор;
	
	лПутьКШаблонуВнешнейОбработки = КаталогВременныхФайлов() + ГлобальныйКлюч;
	Файл = Новый Файл(ПолучитьИмяВременногоФайла());
	
	ПолучитьМакет("ШаблонТеста_ВнешняяОбработка").Записать(Файл.ПолноеИмя);
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("epf");
	
	СтрокаКоманды = """"+ФайлПрограммыРаспаковки.ПолноеИмя+""" -parse """+Файл.ПолноеИмя+""" """+лПутьКШаблонуВнешнейОбработки+"""";
	ЗапуститьПриложение(СтрокаКоманды, , Истина);
	
	РазобранныеФайлы = НайтиФайлы(лПутьКШаблонуВнешнейОбработки, "*.*");
	Если РазобранныеФайлы.Количество() = 0 Тогда
		Сообщить("Не удалось разобрать макет внешней обработки теста командой <"+СтрокаКоманды+">");
		Возврат "";
	КонецЕсли;
	
	//Заменить текст. 
	ФайлТекстаМодуляОбработки = Новый Файл(лПутьКШаблонуВнешнейОбработки + "\8401ee62-68b8-43ea-8738-0c08cbc8c901.0");
	ТекстовыйДокументМодуля = Новый ТекстовыйДокумент;
	ТекстовыйДокументМодуля.Прочитать(ФайлТекстаМодуляОбработки.ПолноеИмя);
	ТекстМодуля = ТекстовыйДокументМодуля.ПолучитьТекст();
	
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "Процедура НазваниеПроцедуры_ТестовыйСценарий(тестовоеПриложение) КонецПроцедуры", Символы.ПС);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "НазваниеПроцедуры_Тест_ГУИ_83", "Тест_"+ИмяОсновнойПроцедуры);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "НазваниеПроцедуры_ТестовыйСценарий", ИмяОсновнойПроцедуры);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "//ЗАМЕНИТЬТЕСТОВОЙПРОЦЕДУРОЙ", ТекстПроцедуры);
	
	ТекстовыйДокументМодуля.УстановитьТекст(ТекстМодуля);
	ТекстовыйДокументМодуля.Записать(ФайлТекстаМодуляОбработки.ПолноеИмя);
	
	//Сохраним в макет наш файл. 
	
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(лПутьКШаблонуВнешнейОбработки + "\1b3a3d0f-5dc6-47e8-bad6-38c097bc00d4.0");
	ЗаписьТекста.Записать(ТекстДляПреобразования);
	ЗаписьТекста.Закрыть();
			
	//Заменить имена. 
	ФайлТекстаЗаголовков = Новый Файл(лПутьКШаблонуВнешнейОбработки + "\4e93fd08-5eda-44dd-92ef-b84867283b1e");
	ТекстовыйДокументЗаголовков = Новый ТекстовыйДокумент;
	ТекстовыйДокументЗаголовков.Прочитать(ФайлТекстаЗаголовков.ПолноеИмя);
	Текст = ТекстовыйДокументЗаголовков.ПолучитьТекст();
	Текст = СтрЗаменить(Текст, "ИмяВнешнейОбработки", "Тест"+ИмяОсновнойПроцедуры);
	ТекстовыйДокументЗаголовков.УстановитьТекст(Текст);
	ТекстовыйДокументЗаголовков.Записать(ФайлТекстаЗаголовков.ПолноеИмя);
	//
	//Упаковать. 
	ВременныйФайл = ПолучитьИмяВременногоФайла("epf");
	
	СтрокаКоманды = """"+ФайлПрограммыРаспаковки.ПолноеИмя+""" -build """+лПутьКШаблонуВнешнейОбработки+""" """+ВременныйФайл+"""";
	ЗапуститьПриложение(СтрокаКоманды, , Истина);
	
	РезультатСтрока = "";
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда 
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		РезультатСтрока = Base64Строка(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат РезультатСтрока;
	
КонецФункции
